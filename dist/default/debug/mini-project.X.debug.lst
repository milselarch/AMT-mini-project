

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Aug 10 14:24:11 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           	psect	idataCOMRAM
    44  001ABE                     __pidataCOMRAM:
    45                           	opt stack 0
    46                           
    47                           ;initializer for _scan_code
    48  001ABE  EB                 	db	235
    49  001ABF  77                 	db	119
    50  001AC0  7B                 	db	123
    51  001AC1  7D                 	db	125
    52  001AC2  B7                 	db	183
    53  001AC3  BB                 	db	187
    54  001AC4  BD                 	db	189
    55  001AC5  D7                 	db	215
    56  001AC6  DB                 	db	219
    57  001AC7  DD                 	db	221
    58  001AC8  7E                 	db	126
    59  001AC9  BE                 	db	190
    60  001ACA  DE                 	db	222
    61  001ACB  EE                 	db	238
    62  001ACC  E7                 	db	231
    63  001ACD  ED                 	db	237
    64                           
    65                           ;initializer for clr_screen@F6532
    66  001ACE  1B                 	db	27
    67  001ACF  5B                 	db	91
    68  001AD0  32                 	db	50
    69  001AD1  4A                 	db	74
    70                           
    71                           ;initializer for cursor_home@F6537
    72  001AD2  1B                 	db	27
    73  001AD3  5B                 	db	91
    74  001AD4  32                 	db	50
    75  001AD5  48                 	db	72
    76                           
    77                           	psect	idataBANK0
    78  001AFC                     __pidataBANK0:
    79                           	opt stack 0
    80                           
    81                           ;initializer for _keyValues
    82  001AFC  30                 	db	48
    83  001AFD  31                 	db	49
    84  001AFE  32                 	db	50
    85  001AFF  33                 	db	51
    86  001B00  34                 	db	52
    87  001B01  35                 	db	53
    88  001B02  36                 	db	54
    89  001B03  37                 	db	55
    90  001B04  38                 	db	56
    91  001B05  39                 	db	57
    92  001B06  41                 	db	65
    93  001B07  42                 	db	66
    94  001B08  43                 	db	67
    95  001B09  44                 	db	68
    96  001B0A  2A                 	db	42
    97  001B0B  23                 	db	35
    98                           
    99                           	psect	smallconst
   100  001000                     __psmallconst:
   101                           	opt stack 0
   102  001000  00                 	db	0
   103  001001                     _dpowers:
   104                           	opt stack 0
   105  001001  0001               	dw	1
   106  001003  000A               	dw	10
   107  001005  0064               	dw	100
   108  001007  03E8               	dw	1000
   109  001009  2710               	dw	10000
   110  00100B                     __end_of_dpowers:
   111                           	opt stack 0
   112  00100B                     _EEDELAY:
   113                           	opt stack 0
   114  00100B  001E               	dw	30
   115  00100D  0000               	dw	0
   116  00100F                     __end_of_EEDELAY:
   117                           	opt stack 0
   118  00100F                     _READ_MODE:
   119                           	opt stack 0
   120  00100F  0001               	dw	1
   121  001011                     __end_of_READ_MODE:
   122                           	opt stack 0
   123  001011                     _WRITE_MODE:
   124                           	opt stack 0
   125  001011  0000               	dw	0
   126  001013                     __end_of_WRITE_MODE:
   127                           	opt stack 0
   128  0000                     _BAUDCON1	set	3966
   129  0000                     _INTCONbits	set	4082
   130  0000                     _IPR1bits	set	3999
   131  0000                     _IPR3bits	set	4005
   132  0000                     _LATCbits	set	3979
   133  0000                     _LATD	set	3980
   134  0000                     _LATE	set	3981
   135  0000                     _LATHbits	set	3984
   136  0000                     _PIE1bits	set	3997
   137  0000                     _PIE3bits	set	4003
   138  0000                     _PIR1bits	set	3998
   139  0000                     _PIR3bits	set	4004
   140  0000                     _PORTD	set	3971
   141  0000                     _PORTDbits	set	3971
   142  0000                     _PORTJ	set	3976
   143  0000                     _RCONbits	set	4048
   144  0000                     _RCSTA1bits	set	4011
   145  0000                     _RCSTAbits	set	4011
   146  0000                     _SPBRG1	set	4015
   147  0000                     _SSP1BUF	set	4041
   148  0000                     _SSP1CON1	set	4038
   149  0000                     _SSP1STATbits	set	4039
   150  0000                     _SSPBUF	set	4041
   151  0000                     _TRISCbits	set	3988
   152  0000                     _TRISD	set	3989
   153  0000                     _TRISDbits	set	3989
   154  0000                     _TRISE	set	3990
   155  0000                     _TRISH	set	3993
   156  0000                     _TRISJ	set	3994
   157  0000                     _TXREG1	set	4013
   158  0000                     _TXSTA1	set	4012
   159  0000                     _TXSTA1bits	set	4012
   160  001013                     STR_6:
   161  001013  20                 	db	32
   162  001014  76                 	db	118	;'v'
   163  001015  61                 	db	97	;'a'
   164  001016  6C                 	db	108	;'l'
   165  001017  3D                 	db	61	;'='
   166  001018  00                 	db	0
   167  001019                     STR_5:
   168  001019  20                 	db	32
   169  00101A  6B                 	db	107	;'k'
   170  00101B  65                 	db	101	;'e'
   171  00101C  79                 	db	121	;'y'
   172  00101D  3D                 	db	61	;'='
   173  00101E  00                 	db	0
   174  00101F                     STR_4:
   175  00101F  57                 	db	87	;'W'
   176  001020  52                 	db	82	;'R'
   177  001021  00                 	db	0
   178  001022                     STR_3:
   179  001022  20                 	db	32
   180  001023  56                 	db	86	;'V'
   181  001024  00                 	db	0
   182  001025                     STR_1:
   183  001025  25                 	db	37
   184  001026  69                 	db	105	;'i'
   185  001027  00                 	db	0
   186  001028                     STR_2:
   187  001028  23                 	db	35
   188  001029  00                 	db	0
   189                           
   190                           ; #config settings
   191  00102A  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           	psect	cinit
   194  0018C4                     __pcinit:
   195                           	opt stack 0
   196  0018C4                     start_initialization:
   197                           	opt stack 0
   198  0018C4                     __initialization:
   199                           	opt stack 0
   200                           
   201                           ; Clear objects allocated to COMRAM (4 bytes)
   202  0018C4  6A3F               	clrf	(__pbssCOMRAM+3)& (0+255),c
   203  0018C6  6A3E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   204  0018C8  6A3D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   205  0018CA  6A3C               	clrf	__pbssCOMRAM& (0+255),c
   206                           
   207                           ; Initialize objects allocated to BANK0 (16 bytes)
   208                           ; load TBLPTR registers with __pidataBANK0
   209  0018CC  0EFC               	movlw	low __pidataBANK0
   210  0018CE  6EF6               	movwf	tblptrl,c
   211  0018D0  0E1A               	movlw	high __pidataBANK0
   212  0018D2  6EF7               	movwf	tblptrh,c
   213  0018D4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   214  0018D6  6EF8               	movwf	tblptru,c
   215  0018D8  EE00  F08D         	lfsr	0,__pdataBANK0
   216  0018DC  EE10 F010          	lfsr	1,16
   217  0018E0                     copy_data0:
   218  0018E0  0009               	tblrd		*+
   219  0018E2  CFF5 FFEE          	movff	tablat,postinc0
   220  0018E6  50E5               	movf	postdec1,w,c
   221  0018E8  50E1               	movf	fsr1l,w,c
   222  0018EA  E1FA               	bnz	copy_data0
   223                           
   224                           ; Initialize objects allocated to COMRAM (24 bytes)
   225                           ; load TBLPTR registers with __pidataCOMRAM
   226  0018EC  0EBE               	movlw	low __pidataCOMRAM
   227  0018EE  6EF6               	movwf	tblptrl,c
   228  0018F0  0E1A               	movlw	high __pidataCOMRAM
   229  0018F2  6EF7               	movwf	tblptrh,c
   230  0018F4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   231  0018F6  6EF8               	movwf	tblptru,c
   232  0018F8  EE00  F024         	lfsr	0,__pdataCOMRAM
   233  0018FC  EE10 F018          	lfsr	1,24
   234  001900                     copy_data1:
   235  001900  0009               	tblrd		*+
   236  001902  CFF5 FFEE          	movff	tablat,postinc0
   237  001906  50E5               	movf	postdec1,w,c
   238  001908  50E1               	movf	fsr1l,w,c
   239  00190A  E1FA               	bnz	copy_data1
   240  00190C                     end_of_initialization:
   241                           	opt stack 0
   242  00190C                     __end_of__initialization:
   243                           	opt stack 0
   244  00190C  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   245  00190E  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   246  001910  0100               	movlb	0
   247  001912  EF16  F008         	goto	_main	;jump to C main() function
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           postdec1	equ	0xFE5
   254                           fsr1l	equ	0xFE1
   255                           
   256                           	psect	bssCOMRAM
   257  00003C                     __pbssCOMRAM:
   258                           	opt stack 0
   259  00003C                     _counter:
   260                           	opt stack 0
   261  00003C                     	ds	2
   262  00003E                     _sec:
   263                           	opt stack 0
   264  00003E                     	ds	2
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           postdec1	equ	0xFE5
   271                           fsr1l	equ	0xFE1
   272                           
   273                           	psect	dataCOMRAM
   274  000024                     __pdataCOMRAM:
   275                           	opt stack 0
   276  000024                     _scan_code:
   277                           	opt stack 0
   278  000024                     	ds	16
   279  000034                     clr_screen@F6532:
   280                           	opt stack 0
   281  000034                     	ds	4
   282  000038                     cursor_home@F6537:
   283                           	opt stack 0
   284  000038                     	ds	4
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           postdec1	equ	0xFE5
   291                           fsr1l	equ	0xFE1
   292                           
   293                           	psect	dataBANK0
   294  00008D                     __pdataBANK0:
   295                           	opt stack 0
   296  00008D                     _keyValues:
   297                           	opt stack 0
   298  00008D                     	ds	16
   299                           tblptru	equ	0xFF8
   300                           tblptrh	equ	0xFF7
   301                           tblptrl	equ	0xFF6
   302                           tablat	equ	0xFF5
   303                           postinc0	equ	0xFEE
   304                           postdec1	equ	0xFE5
   305                           fsr1l	equ	0xFE1
   306                           
   307                           	psect	cstackBANK0
   308  000060                     __pcstackBANK0:
   309                           	opt stack 0
   310  000060                     Read_KeyPad@value:
   311                           	opt stack 0
   312  000060                     ___lwdiv@counter:
   313                           	opt stack 0
   314  000060                     delay_ms@i:
   315                           	opt stack 0
   316  000060                     delay_us@i:
   317                           	opt stack 0
   318  000060                     ee_read_byte@_data:
   319                           	opt stack 0
   320  000060                     XEEIsBusy@SPICON1Save:
   321                           	opt stack 0
   322                           
   323                           ; 4 bytes @ 0x0
   324  000060                     	ds	1
   325  000061                     Read_KeyPad@i:
   326                           	opt stack 0
   327  000061                     ___lwdiv@quotient:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x1
   331  000061                     	ds	1
   332  000062                     LCD8send@c:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x2
   336  000062                     	ds	1
   337  000063                     ?___lwmod:
   338                           	opt stack 0
   339  000063                     Read_KeyPad@Col:
   340                           	opt stack 0
   341  000063                     lcdWriteLine@data:
   342                           	opt stack 0
   343  000063                     ___lwmod@dividend:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x3
   347  000063                     	ds	1
   348  000064                     Read_KeyPad@code:
   349                           	opt stack 0
   350  000064                     XEEIsBusy@val:
   351                           	opt stack 0
   352                           
   353                           ; 4 bytes @ 0x4
   354  000064                     	ds	1
   355  000065                     ??_lcdWriteLine:
   356  000065                     ___lwmod@divisor:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x5
   360  000065                     	ds	2
   361  000067                     ___lwmod@counter:
   362                           	opt stack 0
   363  000067                     lcdWriteLine@i:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x7
   367  000067                     	ds	1
   368  000068                     ?_sprintf:
   369                           	opt stack 0
   370  000068                     eeWriteChar@Dummy:
   371                           	opt stack 0
   372  000068                     sprintf@sp:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x8
   376  000068                     	ds	2
   377  00006A                     sprintf@f:
   378                           	opt stack 0
   379  00006A                     eeWriteChar@SPICON1Save:
   380                           	opt stack 0
   381                           
   382                           ; 4 bytes @ 0xA
   383  00006A                     	ds	4
   384  00006E                     ??_sprintf:
   385  00006E                     eeWriteChar@EEPROMAddress:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0xE
   389  00006E                     	ds	1
   390  00006F                     eeWriteChar@sr:
   391                           	opt stack 0
   392  00006F                     sprintf@ap:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0xF
   396  00006F                     	ds	2
   397  000071                     sprintf@flag:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0x11
   401  000071                     	ds	1
   402  000072                     sprintf@prec:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x12
   406  000072                     	ds	1
   407  000073                     sprintf@val:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x13
   411  000073                     	ds	2
   412  000075                     sprintf@c:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0x15
   416  000075                     	ds	1
   417  000076                     writeNum@numStr:
   418                           	opt stack 0
   419                           
   420                           ; 10 bytes @ 0x16
   421  000076                     	ds	10
   422  000080                     writeNum@number:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x20
   426  000080                     	ds	1
   427  000081                     writeLCD@data:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x21
   431  000081                     	ds	2
   432  000083                     writeLCD@address:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x23
   436  000083                     	ds	1
   437  000084                     ??_main:
   438                           
   439                           ; 1 bytes @ 0x24
   440  000084                     	ds	1
   441  000085                     main@prevKey:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x25
   445  000085                     	ds	1
   446  000086                     main@address:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x26
   450  000086                     	ds	1
   451  000087                     main@writeValue:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x27
   455  000087                     	ds	1
   456  000088                     main@keyNo:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x28
   460  000088                     	ds	2
   461  00008A                     main@key:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x2A
   465  00008A                     	ds	1
   466  00008B                     main@mode:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x2B
   470  00008B                     	ds	2
   471                           tblptru	equ	0xFF8
   472                           tblptrh	equ	0xFF7
   473                           tblptrl	equ	0xFF6
   474                           tablat	equ	0xFF5
   475                           postinc0	equ	0xFEE
   476                           postdec1	equ	0xFE5
   477                           fsr1l	equ	0xFE1
   478                           
   479                           	psect	cstackCOMRAM
   480  000001                     __pcstackCOMRAM:
   481                           	opt stack 0
   482  000001                     ??_HighIsr:
   483  000001                     
   484                           ; 1 bytes @ 0x0
   485  000001                     	ds	14
   486  00000F                     ??_LowIsr:
   487                           
   488                           ; 1 bytes @ 0xE
   489  00000F                     	ds	17
   490  000020                     ?_XEEIsBusy:
   491                           	opt stack 0
   492  000020                     ?___lwdiv:
   493                           	opt stack 0
   494  000020                     SPI1out@Code:
   495                           	opt stack 0
   496  000020                     delay_ms@x:
   497                           	opt stack 0
   498  000020                     delay_us@x:
   499                           	opt stack 0
   500  000020                     ___lwdiv@dividend:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x1F
   504  000020                     	ds	1
   505  000021                     process_key@code:
   506                           	opt stack 0
   507  000021                     XEERead@address:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x20
   511  000021                     	ds	1
   512  000022                     ??_delay_ms:
   513  000022                     ??_delay_us:
   514  000022                     process_key@i:
   515                           	opt stack 0
   516  000022                     XEERead@buffer:
   517                           	opt stack 0
   518  000022                     eeWriteChar@value:
   519                           	opt stack 0
   520  000022                     ___lwdiv@divisor:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x21
   524  000022                     	ds	1
   525  000023                     LCD8send@mode:
   526                           	opt stack 0
   527  000023                     ee_read_byte@address:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x22
   531  000023                     	ds	1
   532  000024                     tblptru	equ	0xFF8
   533                           tblptrh	equ	0xFF7
   534                           tblptrl	equ	0xFF6
   535                           tablat	equ	0xFF5
   536                           postinc0	equ	0xFEE
   537                           postdec1	equ	0xFE5
   538                           fsr1l	equ	0xFE1
   539                           
   540                           ; 1 bytes @ 0x23
   541 ;;
   542 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   543 ;;
   544 ;; *************** function _main *****************
   545 ;; Defined at:
   546 ;;		line 61 in file "test.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;		None
   549 ;; Auto vars:     Size  Location     Type
   550 ;;  keyNo           2   40[BANK0 ] int 
   551 ;;  key             1   42[BANK0 ] unsigned char 
   552 ;;  mode            2   43[BANK0 ] unsigned int 
   553 ;;  writeValue      1   39[BANK0 ] unsigned char 
   554 ;;  address         1   38[BANK0 ] unsigned char 
   555 ;;  prevKey         1   37[BANK0 ] unsigned char 
   556 ;; Return value:  Size  Location     Type
   557 ;;                  1    wreg      void 
   558 ;; Registers used:
   559 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   560 ;; Tracked objects:
   561 ;;		On entry : 0/0
   562 ;;		On exit  : 0/0
   563 ;;		Unchanged: 0/0
   564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   566 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   568 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   569 ;;Total ram usage:        9 bytes
   570 ;; Hardware stack levels required when called:    7
   571 ;; This function calls:
   572 ;;		_KeyPadinit
   573 ;;		_LCD8init
   574 ;;		_LCD8send
   575 ;;		_Read_KeyPad
   576 ;;		_XEEInit
   577 ;;		_delay_ms
   578 ;;		_eeWriteChar
   579 ;;		_lcdWriteLine
   580 ;;		_writeLCD
   581 ;;		_writeNum
   582 ;; This function is called by:
   583 ;;		Startup code after reset
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text0
   588  00102C                     __ptext0:
   589                           	opt stack 0
   590  00102C                     _main:
   591                           	opt stack 24
   592                           
   593                           ;test.c: 62: LCD8init();
   594                           
   595                           ;incstack = 0
   596  00102C  EC6C  F00A         	call	_LCD8init	;wreg free
   597                           
   598                           ;test.c: 63: KeyPadinit();
   599  001030  EC91  F00D         	call	_KeyPadinit	;wreg free
   600                           
   601                           ;test.c: 64: XEEInit();
   602  001034  EC52  F00D         	call	_XEEInit	;wreg free
   603                           
   604                           ;test.c: 66: delay_ms(1000);
   605  001038  0E03               	movlw	3
   606  00103A  6E21               	movwf	delay_ms@x+1,c
   607  00103C  0EE8               	movlw	232
   608  00103E  6E20               	movwf	delay_ms@x,c
   609  001040  ECD1  F00C         	call	_delay_ms	;wreg free
   610                           
   611                           ;test.c: 68: TRISJ = 0x00;
   612  001044  0E00               	movlw	0
   613  001046  6E9A               	movwf	3994,c	;volatile
   614                           
   615                           ;test.c: 69: PORTJ = 0b0;
   616  001048  0E00               	movlw	0
   617  00104A  6E88               	movwf	3976,c	;volatile
   618                           
   619                           ;test.c: 71: unsigned char address = 0;
   620  00104C  0E00               	movlw	0
   621  00104E  0100               	movlb	0	; () banked
   622  001050  6F86               	movwf	main@address& (0+255),b
   623                           
   624                           ; BSR set to: 0
   625                           ;test.c: 72: unsigned char writeValue = 0;
   626  001052  0E00               	movlw	0
   627  001054  0100               	movlb	0	; () banked
   628  001056  6F87               	movwf	main@writeValue& (0+255),b
   629                           
   630                           ; BSR set to: 0
   631                           ;test.c: 73: unsigned int mode = READ_MODE;
   632  001058  0E0F               	movlw	low _READ_MODE
   633  00105A  6EF6               	movwf	tblptrl,c
   634  00105C                     	if	1	;There is more than 1 active tblptr byte
   635  00105C  0E10               	movlw	high _READ_MODE
   636  00105E  6EF7               	movwf	tblptrh,c
   637  001060                     	endif
   638  001060                     	if	1	;There are 3 active tblptr bytes
   639  001060  0E00               	movlw	low (_READ_MODE shr (0+16))
   640  001062  6EF8               	movwf	tblptru,c
   641  001064                     	endif
   642  001064  0009               	tblrd		*+
   643  001066  CFF5 F08B          	movff	tablat,main@mode
   644  00106A  000A               	tblrd		*-
   645  00106C  CFF5 F08C          	movff	tablat,main@mode+1
   646                           
   647                           ; BSR set to: 0
   648                           ;test.c: 74: unsigned char prevKey = 0xFF;
   649  001070  0100               	movlb	0	; () banked
   650  001072  6985               	setf	main@prevKey& (0+255),b
   651  001074                     l2577:
   652                           
   653                           ;test.c: 77: int keyNo = Read_KeyPad();
   654  001074  EC9C  F00B         	call	_Read_KeyPad	;wreg free
   655  001078  0100               	movlb	0	; () banked
   656  00107A  6F84               	movwf	??_main& (0+255),b
   657  00107C  0100               	movlb	0	; () banked
   658  00107E  5184               	movf	??_main& (0+255),w,b
   659  001080  0100               	movlb	0	; () banked
   660  001082  6F88               	movwf	main@keyNo& (0+255),b
   661  001084  6B89               	clrf	(main@keyNo+1)& (0+255),b
   662                           
   663                           ; BSR set to: 0
   664                           ;test.c: 78: unsigned char key = keyValues[keyNo];
   665  001086  0E8D               	movlw	low _keyValues
   666  001088  0100               	movlb	0	; () banked
   667  00108A  2588               	addwf	main@keyNo& (0+255),w,b
   668  00108C  6ED9               	movwf	fsr2l,c
   669  00108E  0E00               	movlw	high _keyValues
   670  001090  0100               	movlb	0	; () banked
   671  001092  2189               	addwfc	(main@keyNo+1)& (0+255),w,b
   672  001094  6EDA               	movwf	fsr2h,c
   673  001096  50DF               	movf	indf2,w,c
   674  001098  0100               	movlb	0	; () banked
   675  00109A  6F8A               	movwf	main@key& (0+255),b
   676                           
   677                           ; BSR set to: 0
   678                           ;test.c: 80: if (key != prevKey) {
   679  00109C  0100               	movlb	0	; () banked
   680  00109E  5185               	movf	main@prevKey& (0+255),w,b
   681  0010A0  0100               	movlb	0	; () banked
   682  0010A2  198A               	xorwf	main@key& (0+255),w,b
   683  0010A4  B4D8               	btfsc	status,2,c
   684  0010A6  D147               	goto	l2659
   685                           
   686                           ; BSR set to: 0
   687                           ;test.c: 81: PORTJ++;
   688  0010A8  2A88               	incf	3976,f,c	;volatile
   689                           
   690                           ; BSR set to: 0
   691                           ;test.c: 83: if (keyNo >= 0 && 10 > keyNo) {
   692  0010AA  0100               	movlb	0	; () banked
   693  0010AC  BF89               	btfsc	(main@keyNo+1)& (0+255),7,b
   694  0010AE  D02C               	goto	l2595
   695                           
   696                           ; BSR set to: 0
   697  0010B0  0100               	movlb	0	; () banked
   698  0010B2  BF89               	btfsc	(main@keyNo+1)& (0+255),7,b
   699  0010B4  D008               	goto	l2589
   700  0010B6  0100               	movlb	0	; () banked
   701  0010B8  5189               	movf	(main@keyNo+1)& (0+255),w,b
   702  0010BA  E126               	bnz	l2595
   703  0010BC  0E0A               	movlw	10
   704  0010BE  0100               	movlb	0	; () banked
   705  0010C0  5D88               	subwf	main@keyNo& (0+255),w,b
   706  0010C2  B0D8               	btfsc	status,0,c
   707  0010C4  D021               	goto	l2595
   708  0010C6                     l2589:
   709                           
   710                           ; BSR set to: 0
   711                           ;test.c: 84: if (mode == READ_MODE) {
   712  0010C6  0E0F               	movlw	low _READ_MODE
   713  0010C8  6EF6               	movwf	tblptrl,c
   714  0010CA                     	if	1	;There is more than 1 active tblptr byte
   715  0010CA  0E10               	movlw	high _READ_MODE
   716  0010CC  6EF7               	movwf	tblptrh,c
   717  0010CE                     	endif
   718  0010CE                     	if	1	;There are 3 active tblptr bytes
   719  0010CE  0E00               	movlw	low (_READ_MODE shr (0+16))
   720  0010D0  6EF8               	movwf	tblptru,c
   721  0010D2                     	endif
   722  0010D2  0100               	movlb	0	; () banked
   723  0010D4  518B               	movf	main@mode& (0+255),w,b
   724  0010D6  0009               	tblrd		*+
   725  0010D8  18F5               	xorwf	tablat,w,c
   726  0010DA  E10F               	bnz	l2593
   727  0010DC  0100               	movlb	0	; () banked
   728  0010DE  518C               	movf	(main@mode+1)& (0+255),w,b
   729  0010E0  0009               	tblrd		*+
   730  0010E2  18F5               	xorwf	tablat,w,c
   731  0010E4  A4D8               	btfss	status,2,c
   732  0010E6  D009               	goto	l2593
   733                           
   734                           ; BSR set to: 0
   735                           ;test.c: 85: address = address * 10 + keyNo;
   736  0010E8  0100               	movlb	0	; () banked
   737  0010EA  5186               	movf	main@address& (0+255),w,b
   738  0010EC  0D0A               	mullw	10
   739  0010EE  50F3               	movf	prodl,w,c
   740  0010F0  0100               	movlb	0	; () banked
   741  0010F2  2588               	addwf	main@keyNo& (0+255),w,b
   742  0010F4  0100               	movlb	0	; () banked
   743  0010F6  6F86               	movwf	main@address& (0+255),b
   744                           
   745                           ;test.c: 86: } else {
   746  0010F8  D0E3               	goto	l2641
   747  0010FA                     l2593:
   748                           
   749                           ; BSR set to: 0
   750                           ;test.c: 87: writeValue = writeValue * 10 + keyNo;
   751  0010FA  0100               	movlb	0	; () banked
   752  0010FC  5187               	movf	main@writeValue& (0+255),w,b
   753  0010FE  0D0A               	mullw	10
   754  001100  50F3               	movf	prodl,w,c
   755  001102  0100               	movlb	0	; () banked
   756  001104  2588               	addwf	main@keyNo& (0+255),w,b
   757  001106  D02B               	goto	L1
   758  001108                     l2595:
   759                           
   760                           ; BSR set to: 0
   761  001108  0E41               	movlw	65
   762  00110A  0100               	movlb	0	; () banked
   763  00110C  198A               	xorwf	main@key& (0+255),w,b
   764  00110E  A4D8               	btfss	status,2,c
   765  001110  D029               	goto	l2605
   766                           
   767                           ; BSR set to: 0
   768                           ;test.c: 91: if (mode == READ_MODE) { address = 0; }
   769  001112  0E0F               	movlw	low _READ_MODE
   770  001114  6EF6               	movwf	tblptrl,c
   771  001116                     	if	1	;There is more than 1 active tblptr byte
   772  001116  0E10               	movlw	high _READ_MODE
   773  001118  6EF7               	movwf	tblptrh,c
   774  00111A                     	endif
   775  00111A                     	if	1	;There are 3 active tblptr bytes
   776  00111A  0E00               	movlw	low (_READ_MODE shr (0+16))
   777  00111C  6EF8               	movwf	tblptru,c
   778  00111E                     	endif
   779  00111E  0100               	movlb	0	; () banked
   780  001120  518B               	movf	main@mode& (0+255),w,b
   781  001122  0009               	tblrd		*+
   782  001124  18F5               	xorwf	tablat,w,c
   783  001126  E109               	bnz	l2601
   784  001128  0100               	movlb	0	; () banked
   785  00112A  518C               	movf	(main@mode+1)& (0+255),w,b
   786  00112C  0009               	tblrd		*+
   787  00112E  18F5               	xorwf	tablat,w,c
   788  001130  A4D8               	btfss	status,2,c
   789  001132  D003               	goto	l2601
   790                           
   791                           ; BSR set to: 0
   792  001134  0E00               	movlw	0
   793  001136  0100               	movlb	0	; () banked
   794  001138  6F86               	movwf	main@address& (0+255),b
   795  00113A                     l2601:
   796                           
   797                           ; BSR set to: 0
   798                           ;test.c: 92: if (mode == WRITE_MODE) { writeValue = 0; }
   799  00113A  0E11               	movlw	low _WRITE_MODE
   800  00113C  6EF6               	movwf	tblptrl,c
   801  00113E                     	if	1	;There is more than 1 active tblptr byte
   802  00113E  0E10               	movlw	high _WRITE_MODE
   803  001140  6EF7               	movwf	tblptrh,c
   804  001142                     	endif
   805  001142                     	if	1	;There are 3 active tblptr bytes
   806  001142  0E00               	movlw	low (_WRITE_MODE shr (0+16))
   807  001144  6EF8               	movwf	tblptru,c
   808  001146                     	endif
   809  001146  0100               	movlb	0	; () banked
   810  001148  518B               	movf	main@mode& (0+255),w,b
   811  00114A  0009               	tblrd		*+
   812  00114C  18F5               	xorwf	tablat,w,c
   813  00114E  E105               	bnz	u1801
   814  001150  0100               	movlb	0	; () banked
   815  001152  518C               	movf	(main@mode+1)& (0+255),w,b
   816  001154  0009               	tblrd		*+
   817  001156  18F5               	xorwf	tablat,w,c
   818  001158  A4D8               	btfss	status,2,c
   819  00115A                     u1801:
   820  00115A  D0B2               	goto	l2641
   821                           
   822                           ; BSR set to: 0
   823  00115C  0E00               	movlw	0
   824  00115E                     L1:
   825  00115E  0100               	movlb	0	; () banked
   826  001160  6F87               	movwf	main@writeValue& (0+255),b
   827                           
   828                           ; BSR set to: 0
   829                           ;test.c: 94: } else if (key == 'B') {
   830  001162  D0AE               	goto	l2641
   831  001164                     l2605:
   832                           
   833                           ; BSR set to: 0
   834  001164  0E42               	movlw	66
   835  001166  0100               	movlb	0	; () banked
   836  001168  198A               	xorwf	main@key& (0+255),w,b
   837  00116A  A4D8               	btfss	status,2,c
   838  00116C  D027               	goto	l2615
   839                           
   840                           ; BSR set to: 0
   841                           ;test.c: 95: if (mode == READ_MODE) { address++; }
   842  00116E  0E0F               	movlw	low _READ_MODE
   843  001170  6EF6               	movwf	tblptrl,c
   844  001172                     	if	1	;There is more than 1 active tblptr byte
   845  001172  0E10               	movlw	high _READ_MODE
   846  001174  6EF7               	movwf	tblptrh,c
   847  001176                     	endif
   848  001176                     	if	1	;There are 3 active tblptr bytes
   849  001176  0E00               	movlw	low (_READ_MODE shr (0+16))
   850  001178  6EF8               	movwf	tblptru,c
   851  00117A                     	endif
   852  00117A  0100               	movlb	0	; () banked
   853  00117C  518B               	movf	main@mode& (0+255),w,b
   854  00117E  0009               	tblrd		*+
   855  001180  18F5               	xorwf	tablat,w,c
   856  001182  E108               	bnz	l2611
   857  001184  0100               	movlb	0	; () banked
   858  001186  518C               	movf	(main@mode+1)& (0+255),w,b
   859  001188  0009               	tblrd		*+
   860  00118A  18F5               	xorwf	tablat,w,c
   861  00118C  A4D8               	btfss	status,2,c
   862  00118E  D002               	goto	l2611
   863                           
   864                           ; BSR set to: 0
   865  001190  0100               	movlb	0	; () banked
   866  001192  2B86               	incf	main@address& (0+255),f,b
   867  001194                     l2611:
   868                           
   869                           ; BSR set to: 0
   870                           ;test.c: 96: if (mode == WRITE_MODE) { writeValue++; }
   871  001194  0E11               	movlw	low _WRITE_MODE
   872  001196  6EF6               	movwf	tblptrl,c
   873  001198                     	if	1	;There is more than 1 active tblptr byte
   874  001198  0E10               	movlw	high _WRITE_MODE
   875  00119A  6EF7               	movwf	tblptrh,c
   876  00119C                     	endif
   877  00119C                     	if	1	;There are 3 active tblptr bytes
   878  00119C  0E00               	movlw	low (_WRITE_MODE shr (0+16))
   879  00119E  6EF8               	movwf	tblptru,c
   880  0011A0                     	endif
   881  0011A0  0100               	movlb	0	; () banked
   882  0011A2  518B               	movf	main@mode& (0+255),w,b
   883  0011A4  0009               	tblrd		*+
   884  0011A6  18F5               	xorwf	tablat,w,c
   885  0011A8  E105               	bnz	u1831
   886  0011AA  0100               	movlb	0	; () banked
   887  0011AC  518C               	movf	(main@mode+1)& (0+255),w,b
   888  0011AE  0009               	tblrd		*+
   889  0011B0  18F5               	xorwf	tablat,w,c
   890  0011B2  A4D8               	btfss	status,2,c
   891  0011B4                     u1831:
   892  0011B4  D085               	goto	l2641
   893                           
   894                           ; BSR set to: 0
   895  0011B6  0100               	movlb	0	; () banked
   896  0011B8  2B87               	incf	main@writeValue& (0+255),f,b
   897                           
   898                           ; BSR set to: 0
   899                           ;test.c: 98: } else if (key == 'C') {
   900  0011BA  D082               	goto	l2641
   901  0011BC                     l2615:
   902                           
   903                           ; BSR set to: 0
   904  0011BC  0E43               	movlw	67
   905  0011BE  0100               	movlb	0	; () banked
   906  0011C0  198A               	xorwf	main@key& (0+255),w,b
   907  0011C2  A4D8               	btfss	status,2,c
   908  0011C4  D027               	goto	l2625
   909                           
   910                           ; BSR set to: 0
   911                           ;test.c: 99: if (mode == READ_MODE) { address--; }
   912  0011C6  0E0F               	movlw	low _READ_MODE
   913  0011C8  6EF6               	movwf	tblptrl,c
   914  0011CA                     	if	1	;There is more than 1 active tblptr byte
   915  0011CA  0E10               	movlw	high _READ_MODE
   916  0011CC  6EF7               	movwf	tblptrh,c
   917  0011CE                     	endif
   918  0011CE                     	if	1	;There are 3 active tblptr bytes
   919  0011CE  0E00               	movlw	low (_READ_MODE shr (0+16))
   920  0011D0  6EF8               	movwf	tblptru,c
   921  0011D2                     	endif
   922  0011D2  0100               	movlb	0	; () banked
   923  0011D4  518B               	movf	main@mode& (0+255),w,b
   924  0011D6  0009               	tblrd		*+
   925  0011D8  18F5               	xorwf	tablat,w,c
   926  0011DA  E108               	bnz	l2621
   927  0011DC  0100               	movlb	0	; () banked
   928  0011DE  518C               	movf	(main@mode+1)& (0+255),w,b
   929  0011E0  0009               	tblrd		*+
   930  0011E2  18F5               	xorwf	tablat,w,c
   931  0011E4  A4D8               	btfss	status,2,c
   932  0011E6  D002               	goto	l2621
   933                           
   934                           ; BSR set to: 0
   935  0011E8  0100               	movlb	0	; () banked
   936  0011EA  0786               	decf	main@address& (0+255),f,b
   937  0011EC                     l2621:
   938                           
   939                           ; BSR set to: 0
   940                           ;test.c: 100: if (mode == WRITE_MODE) { writeValue--; }
   941  0011EC  0E11               	movlw	low _WRITE_MODE
   942  0011EE  6EF6               	movwf	tblptrl,c
   943  0011F0                     	if	1	;There is more than 1 active tblptr byte
   944  0011F0  0E10               	movlw	high _WRITE_MODE
   945  0011F2  6EF7               	movwf	tblptrh,c
   946  0011F4                     	endif
   947  0011F4                     	if	1	;There are 3 active tblptr bytes
   948  0011F4  0E00               	movlw	low (_WRITE_MODE shr (0+16))
   949  0011F6  6EF8               	movwf	tblptru,c
   950  0011F8                     	endif
   951  0011F8  0100               	movlb	0	; () banked
   952  0011FA  518B               	movf	main@mode& (0+255),w,b
   953  0011FC  0009               	tblrd		*+
   954  0011FE  18F5               	xorwf	tablat,w,c
   955  001200  E15F               	bnz	l2641
   956  001202  0100               	movlb	0	; () banked
   957  001204  518C               	movf	(main@mode+1)& (0+255),w,b
   958  001206  0009               	tblrd		*+
   959  001208  18F5               	xorwf	tablat,w,c
   960  00120A  A4D8               	btfss	status,2,c
   961  00120C  D059               	goto	l2641
   962                           
   963                           ; BSR set to: 0
   964  00120E  0100               	movlb	0	; () banked
   965  001210  0787               	decf	main@writeValue& (0+255),f,b
   966                           
   967                           ; BSR set to: 0
   968                           ;test.c: 102: } else if (key == 'D') {
   969  001212  D056               	goto	l2641
   970  001214                     l2625:
   971                           
   972                           ; BSR set to: 0
   973  001214  0E44               	movlw	68
   974  001216  0100               	movlb	0	; () banked
   975  001218  198A               	xorwf	main@key& (0+255),w,b
   976  00121A  A4D8               	btfss	status,2,c
   977  00121C  D035               	goto	l2635
   978                           
   979                           ; BSR set to: 0
   980                           ;test.c: 103: if (mode == READ_MODE) { mode = WRITE_MODE; }
   981  00121E  0E0F               	movlw	low _READ_MODE
   982  001220  6EF6               	movwf	tblptrl,c
   983  001222                     	if	1	;There is more than 1 active tblptr byte
   984  001222  0E10               	movlw	high _READ_MODE
   985  001224  6EF7               	movwf	tblptrh,c
   986  001226                     	endif
   987  001226                     	if	1	;There are 3 active tblptr bytes
   988  001226  0E00               	movlw	low (_READ_MODE shr (0+16))
   989  001228  6EF8               	movwf	tblptru,c
   990  00122A                     	endif
   991  00122A  0100               	movlb	0	; () banked
   992  00122C  518B               	movf	main@mode& (0+255),w,b
   993  00122E  0009               	tblrd		*+
   994  001230  18F5               	xorwf	tablat,w,c
   995  001232  E10C               	bnz	l2631
   996  001234  0100               	movlb	0	; () banked
   997  001236  518C               	movf	(main@mode+1)& (0+255),w,b
   998  001238  0009               	tblrd		*+
   999  00123A  18F5               	xorwf	tablat,w,c
  1000  00123C  A4D8               	btfss	status,2,c
  1001  00123E  D006               	goto	l2631
  1002                           
  1003                           ; BSR set to: 0
  1004  001240  0E11               	movlw	low _WRITE_MODE
  1005  001242  6EF6               	movwf	tblptrl,c
  1006  001244                     	if	1	;There is more than 1 active tblptr byte
  1007  001244  0E10               	movlw	high _WRITE_MODE
  1008  001246  6EF7               	movwf	tblptrh,c
  1009  001248                     	endif
  1010  001248                     	if	1	;There are 3 active tblptr bytes
  1011  001248  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1012  00124A  D016               	goto	L2
  1013  00124C                     l2631:
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;test.c: 104: else if (mode == WRITE_MODE) { mode = READ_MODE; }
  1017  00124C  0E11               	movlw	low _WRITE_MODE
  1018  00124E  6EF6               	movwf	tblptrl,c
  1019  001250                     	if	1	;There is more than 1 active tblptr byte
  1020  001250  0E10               	movlw	high _WRITE_MODE
  1021  001252  6EF7               	movwf	tblptrh,c
  1022  001254                     	endif
  1023  001254                     	if	1	;There are 3 active tblptr bytes
  1024  001254  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1025  001256  6EF8               	movwf	tblptru,c
  1026  001258                     	endif
  1027  001258  0100               	movlb	0	; () banked
  1028  00125A  518B               	movf	main@mode& (0+255),w,b
  1029  00125C  0009               	tblrd		*+
  1030  00125E  18F5               	xorwf	tablat,w,c
  1031  001260  E12F               	bnz	l2641
  1032  001262  0100               	movlb	0	; () banked
  1033  001264  518C               	movf	(main@mode+1)& (0+255),w,b
  1034  001266  0009               	tblrd		*+
  1035  001268  18F5               	xorwf	tablat,w,c
  1036  00126A  A4D8               	btfss	status,2,c
  1037  00126C  D029               	goto	l2641
  1038                           
  1039                           ; BSR set to: 0
  1040  00126E  0E0F               	movlw	low _READ_MODE
  1041  001270  6EF6               	movwf	tblptrl,c
  1042  001272                     	if	1	;There is more than 1 active tblptr byte
  1043  001272  0E10               	movlw	high _READ_MODE
  1044  001274  6EF7               	movwf	tblptrh,c
  1045  001276                     	endif
  1046  001276                     	if	1	;There are 3 active tblptr bytes
  1047  001276  0E00               	movlw	low (_READ_MODE shr (0+16))
  1048  001278                     L2:
  1049  001278  6EF8               	movwf	tblptru,c
  1050  00127A                     	endif
  1051  00127A  0009               	tblrd		*+
  1052  00127C  CFF5 F08B          	movff	tablat,main@mode
  1053  001280  000A               	tblrd		*-
  1054  001282  CFF5 F08C          	movff	tablat,main@mode+1
  1055                           
  1056                           ; BSR set to: 0
  1057                           ;test.c: 106: } else if (key == '*' && mode == WRITE_MODE) {
  1058                           
  1059                           ; BSR set to: 0
  1060  001286  D01C               	goto	l2641
  1061  001288                     l2635:
  1062                           
  1063                           ; BSR set to: 0
  1064  001288  0E2A               	movlw	42
  1065  00128A  0100               	movlb	0	; () banked
  1066  00128C  198A               	xorwf	main@key& (0+255),w,b
  1067  00128E  A4D8               	btfss	status,2,c
  1068  001290  D017               	goto	l2641
  1069                           
  1070                           ; BSR set to: 0
  1071  001292  0E11               	movlw	low _WRITE_MODE
  1072  001294  6EF6               	movwf	tblptrl,c
  1073  001296                     	if	1	;There is more than 1 active tblptr byte
  1074  001296  0E10               	movlw	high _WRITE_MODE
  1075  001298  6EF7               	movwf	tblptrh,c
  1076  00129A                     	endif
  1077  00129A                     	if	1	;There are 3 active tblptr bytes
  1078  00129A  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1079  00129C  6EF8               	movwf	tblptru,c
  1080  00129E                     	endif
  1081  00129E  0100               	movlb	0	; () banked
  1082  0012A0  518B               	movf	main@mode& (0+255),w,b
  1083  0012A2  0009               	tblrd		*+
  1084  0012A4  18F5               	xorwf	tablat,w,c
  1085  0012A6  E10C               	bnz	l2641
  1086  0012A8  0100               	movlb	0	; () banked
  1087  0012AA  518C               	movf	(main@mode+1)& (0+255),w,b
  1088  0012AC  0009               	tblrd		*+
  1089  0012AE  18F5               	xorwf	tablat,w,c
  1090  0012B0  A4D8               	btfss	status,2,c
  1091  0012B2  D006               	goto	l2641
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;test.c: 107: eeWriteChar(address, writeValue);
  1095  0012B4  C087  F022         	movff	main@writeValue,eeWriteChar@value
  1096  0012B8  0100               	movlb	0	; () banked
  1097  0012BA  5186               	movf	main@address& (0+255),w,b
  1098  0012BC  EC5F  F00B         	call	_eeWriteChar
  1099  0012C0                     l2641:
  1100                           
  1101                           ;test.c: 108: }
  1102                           ;test.c: 110: if (keyNo != 0xFF) {
  1103  0012C0  0100               	movlb	0	; () banked
  1104  0012C2  2988               	incf	main@keyNo& (0+255),w,b
  1105  0012C4  0100               	movlb	0	; () banked
  1106  0012C6  1189               	iorwf	(main@keyNo+1)& (0+255),w,b
  1107  0012C8  B4D8               	btfsc	status,2,c
  1108  0012CA  D004               	goto	l2645
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;test.c: 111: writeLCD(address);
  1112  0012CC  0100               	movlb	0	; () banked
  1113  0012CE  5186               	movf	main@address& (0+255),w,b
  1114  0012D0  EC37  F00C         	call	_writeLCD
  1115  0012D4                     l2645:
  1116                           
  1117                           ;test.c: 112: }
  1118                           ;test.c: 114: LCD8send(0xC0, 0);
  1119  0012D4  0E00               	movlw	0
  1120  0012D6  6E23               	movwf	LCD8send@mode,c
  1121  0012D8  0EC0               	movlw	192
  1122  0012DA  ECB3  F00C         	call	_LCD8send
  1123                           
  1124                           ;test.c: 115: LCD8send("WR"[mode], 1);
  1125  0012DE  0E01               	movlw	1
  1126  0012E0  6E23               	movwf	LCD8send@mode,c
  1127  0012E2  0E1F               	movlw	low STR_4
  1128  0012E4  0100               	movlb	0	; () banked
  1129  0012E6  258B               	addwf	main@mode& (0+255),w,b
  1130  0012E8  6EF6               	movwf	tblptrl,c
  1131  0012EA  0E10               	movlw	high STR_4
  1132  0012EC  218C               	addwfc	(main@mode+1)& (0+255),w,b
  1133  0012EE  6EF7               	movwf	tblptrh,c
  1134  0012F0                     	if	1	;There are 3 active tblptr bytes
  1135  0012F0  6AF8               	clrf	tblptru,c
  1136  0012F2  0E00               	movlw	low (__mediumconst shr (0+16))
  1137  0012F4  22F8               	addwfc	tblptru,f,c
  1138  0012F6                     	endif
  1139  0012F6  0008               	tblrd		*
  1140  0012F8  50F5               	movf	tablat,w,c
  1141  0012FA  ECB3  F00C         	call	_LCD8send
  1142                           
  1143                           ;test.c: 116: lcdWriteLine(" key=");
  1144  0012FE  0E19               	movlw	low STR_5
  1145  001300  0100               	movlb	0	; () banked
  1146  001302  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1147  001304  0E10               	movlw	high STR_5
  1148  001306  0100               	movlb	0	; () banked
  1149  001308  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1150  00130A  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1151                           
  1152                           ;test.c: 118: LCD8send(key, 1);
  1153  00130E  0E01               	movlw	1
  1154  001310  6E23               	movwf	LCD8send@mode,c
  1155  001312  0100               	movlb	0	; () banked
  1156  001314  518A               	movf	main@key& (0+255),w,b
  1157  001316  ECB3  F00C         	call	_LCD8send
  1158                           
  1159                           ;test.c: 119: lcdWriteLine(" val=");
  1160  00131A  0E13               	movlw	low STR_6
  1161  00131C  0100               	movlb	0	; () banked
  1162  00131E  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1163  001320  0E10               	movlw	high STR_6
  1164  001322  0100               	movlb	0	; () banked
  1165  001324  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1166  001326  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1167                           
  1168                           ;test.c: 120: writeNum(writeValue);
  1169  00132A  0100               	movlb	0	; () banked
  1170  00132C  5187               	movf	main@writeValue& (0+255),w,b
  1171  00132E  ECEF  F00C         	call	_writeNum
  1172                           
  1173                           ;test.c: 122: prevKey = key;
  1174  001332  C08A  F085         	movff	main@key,main@prevKey
  1175  001336                     l2659:
  1176                           
  1177                           ;test.c: 123: }
  1178                           ;test.c: 125: delay_ms(100);
  1179  001336  0E00               	movlw	0
  1180  001338  6E21               	movwf	delay_ms@x+1,c
  1181  00133A  0E64               	movlw	100
  1182  00133C  6E20               	movwf	delay_ms@x,c
  1183  00133E  ECD1  F00C         	call	_delay_ms	;wreg free
  1184  001342  D698               	goto	l2577
  1185  001344                     __end_of_main:
  1186                           	opt stack 0
  1187                           tblptru	equ	0xFF8
  1188                           tblptrh	equ	0xFF7
  1189                           tblptrl	equ	0xFF6
  1190                           tablat	equ	0xFF5
  1191                           prodl	equ	0xFF3
  1192                           postinc0	equ	0xFEE
  1193                           postdec1	equ	0xFE5
  1194                           fsr1l	equ	0xFE1
  1195                           indf2	equ	0xFDF
  1196                           fsr2h	equ	0xFDA
  1197                           fsr2l	equ	0xFD9
  1198                           status	equ	0xFD8
  1199                           
  1200 ;; *************** function _writeLCD *****************
  1201 ;; Defined at:
  1202 ;;		line 49 in file "test.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;  address         1    wreg     unsigned char 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  address         1   35[BANK0 ] unsigned char 
  1207 ;;  data            2   33[BANK0 ] PTR unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;Total ram usage:        3 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    6
  1224 ;; This function calls:
  1225 ;;		_LCD8send
  1226 ;;		_ee_read_byte
  1227 ;;		_lcdWriteLine
  1228 ;;		_writeNum
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text1
  1235  00186E                     __ptext1:
  1236                           	opt stack 0
  1237  00186E                     _writeLCD:
  1238                           	opt stack 24
  1239                           
  1240                           ;incstack = 0
  1241                           ;writeLCD@address stored from wreg
  1242  00186E  0100               	movlb	0	; () banked
  1243  001870  6F83               	movwf	writeLCD@address& (0+255),b
  1244                           
  1245                           ;test.c: 50: unsigned char *data;
  1246                           ;test.c: 51: LCD8send(0x01, 0);
  1247  001872  0E00               	movlw	0
  1248  001874  6E23               	movwf	LCD8send@mode,c
  1249  001876  0E01               	movlw	1
  1250  001878  ECB3  F00C         	call	_LCD8send
  1251                           
  1252                           ;test.c: 52: ee_read_byte(address, data);
  1253  00187C  C081  F060         	movff	writeLCD@data,ee_read_byte@_data
  1254  001880  C082  F061         	movff	writeLCD@data+1,ee_read_byte@_data+1
  1255  001884  0100               	movlb	0	; () banked
  1256  001886  5183               	movf	writeLCD@address& (0+255),w,b
  1257  001888  EC6B  F00D         	call	_ee_read_byte
  1258                           
  1259                           ;test.c: 54: lcdWriteLine("#");
  1260  00188C  0E28               	movlw	low STR_2
  1261  00188E  0100               	movlb	0	; () banked
  1262  001890  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1263  001892  0E10               	movlw	high STR_2
  1264  001894  0100               	movlb	0	; () banked
  1265  001896  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1266  001898  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1267                           
  1268                           ;test.c: 55: writeNum(address);
  1269  00189C  0100               	movlb	0	; () banked
  1270  00189E  5183               	movf	writeLCD@address& (0+255),w,b
  1271  0018A0  ECEF  F00C         	call	_writeNum
  1272                           
  1273                           ;test.c: 57: lcdWriteLine(" V");
  1274  0018A4  0E22               	movlw	low STR_3
  1275  0018A6  0100               	movlb	0	; () banked
  1276  0018A8  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1277  0018AA  0E10               	movlw	high STR_3
  1278  0018AC  0100               	movlb	0	; () banked
  1279  0018AE  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1280  0018B0  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1281                           
  1282                           ;test.c: 58: writeNum(*data);
  1283  0018B4  C081  FFD9         	movff	writeLCD@data,fsr2l
  1284  0018B8  C082  FFDA         	movff	writeLCD@data+1,fsr2h
  1285  0018BC  50DF               	movf	indf2,w,c
  1286  0018BE  ECEF  F00C         	call	_writeNum
  1287  0018C2  0012               	return		;funcret
  1288  0018C4                     __end_of_writeLCD:
  1289                           	opt stack 0
  1290                           tblptru	equ	0xFF8
  1291                           tblptrh	equ	0xFF7
  1292                           tblptrl	equ	0xFF6
  1293                           tablat	equ	0xFF5
  1294                           prodl	equ	0xFF3
  1295                           postinc0	equ	0xFEE
  1296                           postdec1	equ	0xFE5
  1297                           fsr1l	equ	0xFE1
  1298                           indf2	equ	0xFDF
  1299                           fsr2h	equ	0xFDA
  1300                           fsr2l	equ	0xFD9
  1301                           status	equ	0xFD8
  1302                           
  1303 ;; *************** function _writeNum *****************
  1304 ;; Defined at:
  1305 ;;		line 43 in file "test.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  number          1    wreg     unsigned char 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;  number          1   32[BANK0 ] unsigned char 
  1310 ;;  numStr         10   22[BANK0 ] unsigned char [10]
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  1    wreg      void 
  1313 ;; Registers used:
  1314 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;Total ram usage:       11 bytes
  1325 ;; Hardware stack levels used:    1
  1326 ;; Hardware stack levels required when called:    5
  1327 ;; This function calls:
  1328 ;;		_lcdWriteLine
  1329 ;;		_sprintf
  1330 ;; This function is called by:
  1331 ;;		_writeLCD
  1332 ;;		_main
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text2
  1337  0019DE                     __ptext2:
  1338                           	opt stack 0
  1339  0019DE                     _writeNum:
  1340                           	opt stack 25
  1341                           
  1342                           ;incstack = 0
  1343                           ;writeNum@number stored from wreg
  1344  0019DE  0100               	movlb	0	; () banked
  1345  0019E0  6F80               	movwf	writeNum@number& (0+255),b
  1346                           
  1347                           ;test.c: 44: char numStr[10];
  1348                           ;test.c: 45: sprintf(numStr, "%i", number);
  1349  0019E2  0E76               	movlw	low writeNum@numStr
  1350  0019E4  0100               	movlb	0	; () banked
  1351  0019E6  6F68               	movwf	sprintf@sp& (0+255),b
  1352  0019E8  0E00               	movlw	high writeNum@numStr
  1353  0019EA  0100               	movlb	0	; () banked
  1354  0019EC  6F69               	movwf	(sprintf@sp+1)& (0+255),b
  1355  0019EE  0E25               	movlw	low STR_1
  1356  0019F0  0100               	movlb	0	; () banked
  1357  0019F2  6F6A               	movwf	sprintf@f& (0+255),b
  1358  0019F4  0E10               	movlw	high STR_1
  1359  0019F6  0100               	movlb	0	; () banked
  1360  0019F8  6F6B               	movwf	(sprintf@f+1)& (0+255),b
  1361  0019FA  C080  F06C         	movff	writeNum@number,?_sprintf+4
  1362  0019FE  0100               	movlb	0	; () banked
  1363  001A00  6B6D               	clrf	(?_sprintf+5)& (0+255),b
  1364  001A02  ECA2  F009         	call	_sprintf	;wreg free
  1365                           
  1366                           ;test.c: 46: lcdWriteLine(numStr);
  1367  001A06  0E76               	movlw	low writeNum@numStr
  1368  001A08  0100               	movlb	0	; () banked
  1369  001A0A  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1370  001A0C  0E00               	movlw	high writeNum@numStr
  1371  001A0E  0100               	movlb	0	; () banked
  1372  001A10  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1373  001A12  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1374  001A16  0012               	return		;funcret
  1375  001A18                     __end_of_writeNum:
  1376                           	opt stack 0
  1377                           tblptru	equ	0xFF8
  1378                           tblptrh	equ	0xFF7
  1379                           tblptrl	equ	0xFF6
  1380                           tablat	equ	0xFF5
  1381                           prodl	equ	0xFF3
  1382                           postinc0	equ	0xFEE
  1383                           postdec1	equ	0xFE5
  1384                           fsr1l	equ	0xFE1
  1385                           indf2	equ	0xFDF
  1386                           fsr2h	equ	0xFDA
  1387                           fsr2l	equ	0xFD9
  1388                           status	equ	0xFD8
  1389                           
  1390 ;; *************** function _sprintf *****************
  1391 ;; Defined at:
  1392 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;  sp              2    8[BANK0 ] PTR unsigned char 
  1395 ;;		 -> writeNum@numStr(10), 
  1396 ;;  f               2   10[BANK0 ] PTR const unsigned char 
  1397 ;;		 -> STR_1(3), 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  tmpval          4    0        struct .
  1400 ;;  cp              3    0        PTR const unsigned char 
  1401 ;;  val             2   19[BANK0 ] unsigned int 
  1402 ;;  ap              2   15[BANK0 ] PTR void [1]
  1403 ;;		 -> ?_sprintf(2), 
  1404 ;;  len             2    0        unsigned int 
  1405 ;;  c               1   21[BANK0 ] char 
  1406 ;;  prec            1   18[BANK0 ] char 
  1407 ;;  flag            1   17[BANK0 ] unsigned char 
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  2    8[BANK0 ] int 
  1410 ;; Registers used:
  1411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1417 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1420 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1421 ;;Total ram usage:       14 bytes
  1422 ;; Hardware stack levels used:    1
  1423 ;; Hardware stack levels required when called:    3
  1424 ;; This function calls:
  1425 ;;		___lwdiv
  1426 ;;		___lwmod
  1427 ;; This function is called by:
  1428 ;;		_writeNum
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text3
  1433  001344                     __ptext3:
  1434                           	opt stack 0
  1435  001344                     _sprintf:
  1436                           	opt stack 26
  1437                           
  1438                           ;doprnt.c: 494: va_list ap;
  1439                           ;doprnt.c: 499: signed char c;
  1440                           ;doprnt.c: 506: signed char prec;
  1441                           ;doprnt.c: 508: unsigned char flag;
  1442                           ;doprnt.c: 523: union {
  1443                           ;doprnt.c: 524: unsigned long vd;
  1444                           ;doprnt.c: 525: double integ;
  1445                           ;doprnt.c: 526: } tmpval;
  1446                           ;doprnt.c: 528: unsigned int val;
  1447                           ;doprnt.c: 529: unsigned len;
  1448                           ;doprnt.c: 530: const char * cp;
  1449                           ;doprnt.c: 533: *ap = __va_start();
  1450                           
  1451                           ;incstack = 0
  1452  001344  0E6C               	movlw	low (?_sprintf+4)
  1453  001346  0100               	movlb	0	; () banked
  1454  001348  6F6F               	movwf	sprintf@ap& (0+255),b
  1455  00134A  0E00               	movlw	high (?_sprintf+4)
  1456  00134C  0100               	movlb	0	; () banked
  1457  00134E  6F70               	movwf	(sprintf@ap+1)& (0+255),b
  1458                           
  1459                           ;doprnt.c: 536: while(c = *f++) {
  1460  001350  D0AC               	goto	l2309
  1461  001352                     l2257:
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;doprnt.c: 538: if(c != '%')
  1465  001352  0E25               	movlw	37
  1466  001354  0100               	movlb	0	; () banked
  1467  001356  1975               	xorwf	sprintf@c& (0+255),w,b
  1468  001358  B4D8               	btfsc	status,2,c
  1469  00135A  D00A               	goto	l2263
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;doprnt.c: 540: {
  1473                           ;doprnt.c: 541: ((*sp++ = (c)));
  1474  00135C  C068  FFD9         	movff	sprintf@sp,fsr2l
  1475  001360  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1476  001364  C075  FFDF         	movff	sprintf@c,indf2
  1477                           
  1478                           ; BSR set to: 0
  1479  001368  0100               	movlb	0	; () banked
  1480  00136A  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1481  00136C  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1482                           
  1483                           ;doprnt.c: 542: continue;
  1484  00136E  D09D               	goto	l2309
  1485  001370                     l2263:
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;doprnt.c: 543: }
  1489                           ;doprnt.c: 548: flag = 0;
  1490  001370  0E00               	movlw	0
  1491  001372  0100               	movlb	0	; () banked
  1492  001374  6F71               	movwf	sprintf@flag& (0+255),b
  1493                           
  1494                           ; BSR set to: 0
  1495                           
  1496                           ; BSR set to: 0
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;doprnt.c: 822: }
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;doprnt.c: 813: continue;
  1503                           
  1504                           ;doprnt.c: 802: default:
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;doprnt.c: 698: case 'i':
  1508                           ;doprnt.c: 699: break;
  1509                           
  1510                           ; BSR set to: 0
  1511                           
  1512                           ;doprnt.c: 697: case 'd':
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;doprnt.c: 638: goto alldone;
  1516                           
  1517                           ;doprnt.c: 637: case 0:
  1518                           
  1519                           ;doprnt.c: 635: switch(c = *f++) {
  1520  001376  C06A  FFF6         	movff	sprintf@f,tblptrl
  1521  00137A  C06B  FFF7         	movff	sprintf@f+1,tblptrh
  1522  00137E  0100               	movlb	0	; () banked
  1523  001380  4B6A               	infsnz	sprintf@f& (0+255),f,b
  1524  001382  2B6B               	incf	(sprintf@f+1)& (0+255),f,b
  1525  001384                     	if	0	;tblptru may be non-zero
  1526  001384                     	endif
  1527  001384                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1528  001384  0E00               	movlw	low (__mediumconst shr (0+16))
  1529  001386  6EF8               	movwf	tblptru,c
  1530  001388                     	endif
  1531  001388  0008               	tblrd		*
  1532  00138A  CFF5 F075          	movff	tablat,sprintf@c
  1533  00138E  0100               	movlb	0	; () banked
  1534  001390  5175               	movf	sprintf@c& (0+255),w,b
  1535                           
  1536                           ; Switch size 1, requested type "space"
  1537                           ; Number of cases is 3, Range of values is 0 to 105
  1538                           ; switch strategies available:
  1539                           ; Name         Instructions Cycles
  1540                           ; simple_byte           10     6 (average)
  1541                           ;	Chosen strategy is simple_byte
  1542  001392  0A00               	xorlw	0	; case 0
  1543  001394  B4D8               	btfsc	status,2,c
  1544  001396  D099               	goto	l2311
  1545  001398  0A64               	xorlw	100	; case 100
  1546  00139A  B4D8               	btfsc	status,2,c
  1547  00139C  D003               	goto	l2269
  1548  00139E  0A0D               	xorlw	13	; case 105
  1549  0013A0  A4D8               	btfss	status,2,c
  1550  0013A2  D083               	goto	l2309
  1551  0013A4                     l2269:
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;doprnt.c: 1253: {
  1555                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1556  0013A4  C06F  FFD9         	movff	sprintf@ap,fsr2l
  1557  0013A8  C070  FFDA         	movff	sprintf@ap+1,fsr2h
  1558  0013AC  CFDE F073          	movff	postinc2,sprintf@val
  1559  0013B0  CFDD F074          	movff	postdec2,sprintf@val+1
  1560                           
  1561                           ; BSR set to: 0
  1562  0013B4  0E02               	movlw	2
  1563  0013B6  0100               	movlb	0	; () banked
  1564  0013B8  276F               	addwf	sprintf@ap& (0+255),f,b
  1565  0013BA  0E00               	movlw	0
  1566  0013BC  2370               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;doprnt.c: 1261: if((int)val < 0) {
  1570  0013BE  0100               	movlb	0	; () banked
  1571  0013C0  AF74               	btfss	(sprintf@val+1)& (0+255),7,b
  1572  0013C2  D008               	goto	l2279
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;doprnt.c: 1262: flag |= 0x03;
  1576  0013C4  0E03               	movlw	3
  1577  0013C6  0100               	movlb	0	; () banked
  1578  0013C8  1371               	iorwf	sprintf@flag& (0+255),f,b
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;doprnt.c: 1263: val = -val;
  1582  0013CA  0100               	movlb	0	; () banked
  1583  0013CC  6D73               	negf	sprintf@val& (0+255),b
  1584  0013CE  1F74               	comf	(sprintf@val+1)& (0+255),f,b
  1585  0013D0  B0D8               	btfsc	status,0,c
  1586  0013D2  2B74               	incf	(sprintf@val+1)& (0+255),f,b
  1587  0013D4                     l2279:
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;doprnt.c: 1264: }
  1591                           ;doprnt.c: 1266: }
  1592                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1593  0013D4  0E01               	movlw	1
  1594  0013D6  0100               	movlb	0	; () banked
  1595  0013D8  6F75               	movwf	sprintf@c& (0+255),b
  1596  0013DA                     l2281:
  1597                           
  1598                           ; BSR set to: 0
  1599  0013DA  0E05               	movlw	5
  1600  0013DC  0100               	movlb	0	; () banked
  1601  0013DE  1975               	xorwf	sprintf@c& (0+255),w,b
  1602  0013E0  B4D8               	btfsc	status,2,c
  1603  0013E2  D019               	goto	l2293
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;doprnt.c: 1306: if(val < dpowers[c])
  1607                           
  1608                           ; BSR set to: 0
  1609                           
  1610                           ; BSR set to: 0
  1611  0013E4  0100               	movlb	0	; () banked
  1612  0013E6  5175               	movf	sprintf@c& (0+255),w,b
  1613  0013E8  0D02               	mullw	2
  1614  0013EA  0E01               	movlw	low _dpowers
  1615  0013EC  24F3               	addwf	prodl,w,c
  1616  0013EE  6EF6               	movwf	tblptrl,c
  1617  0013F0  0E10               	movlw	high _dpowers
  1618  0013F2  20F4               	addwfc	prodh,w,c
  1619  0013F4  6EF7               	movwf	tblptrh,c
  1620  0013F6                     	if	1	;There are 3 active tblptr bytes
  1621  0013F6  6AF8               	clrf	tblptru,c
  1622  0013F8  0E00               	movlw	low (__mediumconst shr (0+16))
  1623  0013FA  22F8               	addwfc	tblptru,f,c
  1624  0013FC                     	endif
  1625  0013FC  0009               	tblrd		*+
  1626  0013FE  50F5               	movf	tablat,w,c
  1627  001400  0100               	movlb	0	; () banked
  1628  001402  5D73               	subwf	sprintf@val& (0+255),w,b
  1629  001404  0009               	tblrd		*+
  1630  001406  50F5               	movf	tablat,w,c
  1631  001408  0100               	movlb	0	; () banked
  1632  00140A  5974               	subwfb	(sprintf@val+1)& (0+255),w,b
  1633  00140C  A0D8               	btfss	status,0,c
  1634  00140E  D003               	goto	l2293
  1635                           
  1636                           ; BSR set to: 0
  1637                           
  1638                           ; BSR set to: 0
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;doprnt.c: 1307: break;
  1642  001410  0100               	movlb	0	; () banked
  1643  001412  2B75               	incf	sprintf@c& (0+255),f,b
  1644  001414  D7E2               	goto	l2281
  1645  001416                     l2293:
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;doprnt.c: 1422: {
  1649                           ;doprnt.c: 1438: if(flag & 0x03)
  1650  001416  C071  F06E         	movff	sprintf@flag,??_sprintf
  1651  00141A  0E03               	movlw	3
  1652  00141C  0100               	movlb	0	; () banked
  1653  00141E  176E               	andwf	??_sprintf& (0+255),f,b
  1654  001420  B4D8               	btfsc	status,2,c
  1655  001422  D009               	goto	l2299
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1659  001424  C068  FFD9         	movff	sprintf@sp,fsr2l
  1660  001428  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1661  00142C  0E2D               	movlw	45
  1662  00142E  6EDF               	movwf	indf2,c
  1663                           
  1664                           ; BSR set to: 0
  1665  001430  0100               	movlb	0	; () banked
  1666  001432  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1667  001434  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1668  001436                     l2299:
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;doprnt.c: 1469: }
  1672                           ;doprnt.c: 1472: prec = c;
  1673  001436  C075  F072         	movff	sprintf@c,sprintf@prec
  1674                           
  1675                           ;doprnt.c: 1474: while(prec--) {
  1676  00143A  D031               	goto	l2307
  1677  00143C                     l2301:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;doprnt.c: 1478: {
  1681                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1682  00143C  0100               	movlb	0	; () banked
  1683  00143E  5172               	movf	sprintf@prec& (0+255),w,b
  1684  001440  0D02               	mullw	2
  1685  001442  0E01               	movlw	low _dpowers
  1686  001444  24F3               	addwf	prodl,w,c
  1687  001446  6EF6               	movwf	tblptrl,c
  1688  001448  0E10               	movlw	high _dpowers
  1689  00144A  20F4               	addwfc	prodh,w,c
  1690  00144C  6EF7               	movwf	tblptrh,c
  1691  00144E                     	if	1	;There are 3 active tblptr bytes
  1692  00144E  6AF8               	clrf	tblptru,c
  1693  001450  0E00               	movlw	low (__mediumconst shr (0+16))
  1694  001452  22F8               	addwfc	tblptru,f,c
  1695  001454                     	endif
  1696  001454  0009               	tblrd		*+
  1697  001456  CFF5 F022          	movff	tablat,___lwdiv@divisor
  1698  00145A  000A               	tblrd		*-
  1699  00145C  CFF5 F023          	movff	tablat,___lwdiv@divisor+1
  1700  001460  C073  F020         	movff	sprintf@val,___lwdiv@dividend
  1701  001464  C074  F021         	movff	sprintf@val+1,___lwdiv@dividend+1
  1702  001468  EC08  F00C         	call	___lwdiv	;wreg free
  1703  00146C  C020  F063         	movff	?___lwdiv,___lwmod@dividend
  1704  001470  C021  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  1705  001474  0E00               	movlw	0
  1706  001476  0100               	movlb	0	; () banked
  1707  001478  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  1708  00147A  0E0A               	movlw	10
  1709  00147C  6F65               	movwf	___lwmod@divisor& (0+255),b
  1710  00147E  ECD7  F00B         	call	___lwmod	;wreg free
  1711  001482  0100               	movlb	0	; () banked
  1712  001484  5163               	movf	?___lwmod& (0+255),w,b
  1713  001486  0F30               	addlw	48
  1714  001488  0100               	movlb	0	; () banked
  1715  00148A  6F75               	movwf	sprintf@c& (0+255),b
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;doprnt.c: 1523: }
  1719                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1720  00148C  C068  FFD9         	movff	sprintf@sp,fsr2l
  1721  001490  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1722  001494  C075  FFDF         	movff	sprintf@c,indf2
  1723                           
  1724                           ; BSR set to: 0
  1725  001498  0100               	movlb	0	; () banked
  1726  00149A  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1727  00149C  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1728  00149E                     l2307:
  1729                           
  1730                           ; BSR set to: 0
  1731  00149E  0100               	movlb	0	; () banked
  1732  0014A0  0772               	decf	sprintf@prec& (0+255),f,b
  1733  0014A2  0100               	movlb	0	; () banked
  1734  0014A4  2972               	incf	sprintf@prec& (0+255),w,b
  1735  0014A6  A4D8               	btfss	status,2,c
  1736  0014A8  D7C9               	goto	l2301
  1737  0014AA                     l2309:
  1738                           
  1739                           ; BSR set to: 0
  1740  0014AA  C06A  FFF6         	movff	sprintf@f,tblptrl
  1741  0014AE  C06B  FFF7         	movff	sprintf@f+1,tblptrh
  1742  0014B2  0100               	movlb	0	; () banked
  1743  0014B4  4B6A               	infsnz	sprintf@f& (0+255),f,b
  1744  0014B6  2B6B               	incf	(sprintf@f+1)& (0+255),f,b
  1745  0014B8                     	if	0	;tblptru may be non-zero
  1746  0014B8                     	endif
  1747  0014B8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1748  0014B8  0E00               	movlw	low (__mediumconst shr (0+16))
  1749  0014BA  6EF8               	movwf	tblptru,c
  1750  0014BC                     	endif
  1751  0014BC  0008               	tblrd		*
  1752  0014BE  CFF5 F075          	movff	tablat,sprintf@c
  1753  0014C2  0100               	movlb	0	; () banked
  1754  0014C4  5175               	movf	sprintf@c& (0+255),w,b
  1755  0014C6  A4D8               	btfss	status,2,c
  1756  0014C8  D744               	goto	l2257
  1757  0014CA                     l2311:
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;doprnt.c: 1538: *sp = 0;
  1761  0014CA  C068  FFD9         	movff	sprintf@sp,fsr2l
  1762  0014CE  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1763  0014D2  0E00               	movlw	0
  1764  0014D4  6EDF               	movwf	indf2,c
  1765  0014D6  0012               	return	
  1766  0014D8                     __end_of_sprintf:
  1767                           	opt stack 0
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           prodh	equ	0xFF4
  1773                           prodl	equ	0xFF3
  1774                           postinc0	equ	0xFEE
  1775                           postdec1	equ	0xFE5
  1776                           fsr1l	equ	0xFE1
  1777                           indf2	equ	0xFDF
  1778                           postinc2	equ	0xFDE
  1779                           postdec2	equ	0xFDD
  1780                           fsr2h	equ	0xFDA
  1781                           fsr2l	equ	0xFD9
  1782                           status	equ	0xFD8
  1783                           
  1784 ;; *************** function ___lwmod *****************
  1785 ;; Defined at:
  1786 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  dividend        2    3[BANK0 ] unsigned int 
  1789 ;;  divisor         2    5[BANK0 ] unsigned int 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  counter         1    7[BANK0 ] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  2    3[BANK0 ] unsigned int 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1801 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;Total ram usage:        5 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    2
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_sprintf
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text4
  1816  0017AE                     __ptext4:
  1817                           	opt stack 0
  1818  0017AE                     ___lwmod:
  1819                           	opt stack 26
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;incstack = 0
  1823  0017AE  0100               	movlb	0	; () banked
  1824  0017B0  5165               	movf	___lwmod@divisor& (0+255),w,b
  1825  0017B2  0100               	movlb	0	; () banked
  1826  0017B4  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1827  0017B6  B4D8               	btfsc	status,2,c
  1828  0017B8  D026               	goto	l800
  1829                           
  1830                           ; BSR set to: 0
  1831  0017BA  0E01               	movlw	1
  1832  0017BC  0100               	movlb	0	; () banked
  1833  0017BE  6F67               	movwf	___lwmod@counter& (0+255),b
  1834  0017C0  D006               	goto	l2219
  1835  0017C2                     l2217:
  1836                           
  1837                           ; BSR set to: 0
  1838  0017C2  0100               	movlb	0	; () banked
  1839  0017C4  90D8               	bcf	status,0,c
  1840  0017C6  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  1841  0017C8  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1842  0017CA  0100               	movlb	0	; () banked
  1843  0017CC  2B67               	incf	___lwmod@counter& (0+255),f,b
  1844  0017CE                     l2219:
  1845                           
  1846                           ; BSR set to: 0
  1847  0017CE  0100               	movlb	0	; () banked
  1848  0017D0  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1849  0017D2  D7F7               	goto	l2217
  1850  0017D4                     l2221:
  1851                           
  1852                           ; BSR set to: 0
  1853  0017D4  0100               	movlb	0	; () banked
  1854  0017D6  5165               	movf	___lwmod@divisor& (0+255),w,b
  1855  0017D8  0100               	movlb	0	; () banked
  1856  0017DA  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  1857  0017DC  0100               	movlb	0	; () banked
  1858  0017DE  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1859  0017E0  0100               	movlb	0	; () banked
  1860  0017E2  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1861  0017E4  A0D8               	btfss	status,0,c
  1862  0017E6  D008               	goto	l2225
  1863                           
  1864                           ; BSR set to: 0
  1865  0017E8  0100               	movlb	0	; () banked
  1866  0017EA  5165               	movf	___lwmod@divisor& (0+255),w,b
  1867  0017EC  0100               	movlb	0	; () banked
  1868  0017EE  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  1869  0017F0  0100               	movlb	0	; () banked
  1870  0017F2  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1871  0017F4  0100               	movlb	0	; () banked
  1872  0017F6  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1873  0017F8                     l2225:
  1874                           
  1875                           ; BSR set to: 0
  1876  0017F8  0100               	movlb	0	; () banked
  1877  0017FA  90D8               	bcf	status,0,c
  1878  0017FC  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1879  0017FE  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  1880                           
  1881                           ; BSR set to: 0
  1882  001800  0100               	movlb	0	; () banked
  1883  001802  2F67               	decfsz	___lwmod@counter& (0+255),f,b
  1884  001804  D7E7               	goto	l2221
  1885  001806                     l800:
  1886                           
  1887                           ; BSR set to: 0
  1888  001806  C063  F063         	movff	___lwmod@dividend,?___lwmod
  1889  00180A  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  1890                           
  1891                           ; BSR set to: 0
  1892  00180E  0012               	return		;funcret
  1893  001810                     __end_of___lwmod:
  1894                           	opt stack 0
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           prodh	equ	0xFF4
  1900                           prodl	equ	0xFF3
  1901                           postinc0	equ	0xFEE
  1902                           postdec1	equ	0xFE5
  1903                           fsr1l	equ	0xFE1
  1904                           indf2	equ	0xFDF
  1905                           postinc2	equ	0xFDE
  1906                           postdec2	equ	0xFDD
  1907                           fsr2h	equ	0xFDA
  1908                           fsr2l	equ	0xFD9
  1909                           status	equ	0xFD8
  1910                           
  1911 ;; *************** function ___lwdiv *****************
  1912 ;; Defined at:
  1913 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;  dividend        2   31[COMRAM] unsigned int 
  1916 ;;  divisor         2   33[COMRAM] unsigned int 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  quotient        2    1[BANK0 ] unsigned int 
  1919 ;;  counter         1    0[BANK0 ] unsigned char 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  2   31[COMRAM] unsigned int 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2, status,0
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1929 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;Total ram usage:        7 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    2
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_sprintf
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text5
  1944  001810                     __ptext5:
  1945                           	opt stack 0
  1946  001810                     ___lwdiv:
  1947                           	opt stack 26
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;incstack = 0
  1951  001810  0E00               	movlw	0
  1952  001812  0100               	movlb	0	; () banked
  1953  001814  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1954  001816  0E00               	movlw	0
  1955  001818  6F61               	movwf	___lwdiv@quotient& (0+255),b
  1956                           
  1957                           ; BSR set to: 0
  1958  00181A  5022               	movf	___lwdiv@divisor,w,c
  1959  00181C  1023               	iorwf	___lwdiv@divisor+1,w,c
  1960  00181E  B4D8               	btfsc	status,2,c
  1961  001820  D021               	goto	l790
  1962                           
  1963                           ; BSR set to: 0
  1964  001822  0E01               	movlw	1
  1965  001824  0100               	movlb	0	; () banked
  1966  001826  6F60               	movwf	___lwdiv@counter& (0+255),b
  1967  001828  D005               	goto	l2199
  1968  00182A                     l2197:
  1969                           
  1970                           ; BSR set to: 0
  1971  00182A  90D8               	bcf	status,0,c
  1972  00182C  3622               	rlcf	___lwdiv@divisor,f,c
  1973  00182E  3623               	rlcf	___lwdiv@divisor+1,f,c
  1974  001830  0100               	movlb	0	; () banked
  1975  001832  2B60               	incf	___lwdiv@counter& (0+255),f,b
  1976  001834                     l2199:
  1977                           
  1978                           ; BSR set to: 0
  1979  001834  AE23               	btfss	___lwdiv@divisor+1,7,c
  1980  001836  D7F9               	goto	l2197
  1981  001838                     l2201:
  1982                           
  1983                           ; BSR set to: 0
  1984  001838  0100               	movlb	0	; () banked
  1985  00183A  90D8               	bcf	status,0,c
  1986  00183C  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  1987  00183E  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1988                           
  1989                           ; BSR set to: 0
  1990  001840  5022               	movf	___lwdiv@divisor,w,c
  1991  001842  5C20               	subwf	___lwdiv@dividend,w,c
  1992  001844  5023               	movf	___lwdiv@divisor+1,w,c
  1993  001846  5821               	subwfb	___lwdiv@dividend+1,w,c
  1994  001848  A0D8               	btfss	status,0,c
  1995  00184A  D006               	goto	l2209
  1996                           
  1997                           ; BSR set to: 0
  1998  00184C  5022               	movf	___lwdiv@divisor,w,c
  1999  00184E  5E20               	subwf	___lwdiv@dividend,f,c
  2000  001850  5023               	movf	___lwdiv@divisor+1,w,c
  2001  001852  5A21               	subwfb	___lwdiv@dividend+1,f,c
  2002                           
  2003                           ; BSR set to: 0
  2004  001854  0100               	movlb	0	; () banked
  2005  001856  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  2006  001858                     l2209:
  2007                           
  2008                           ; BSR set to: 0
  2009  001858  90D8               	bcf	status,0,c
  2010  00185A  3223               	rrcf	___lwdiv@divisor+1,f,c
  2011  00185C  3222               	rrcf	___lwdiv@divisor,f,c
  2012                           
  2013                           ; BSR set to: 0
  2014  00185E  0100               	movlb	0	; () banked
  2015  001860  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  2016  001862  D7EA               	goto	l2201
  2017  001864                     l790:
  2018                           
  2019                           ; BSR set to: 0
  2020  001864  C061  F020         	movff	___lwdiv@quotient,?___lwdiv
  2021  001868  C062  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2022                           
  2023                           ; BSR set to: 0
  2024  00186C  0012               	return		;funcret
  2025  00186E                     __end_of___lwdiv:
  2026                           	opt stack 0
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           prodh	equ	0xFF4
  2032                           prodl	equ	0xFF3
  2033                           postinc0	equ	0xFEE
  2034                           postdec1	equ	0xFE5
  2035                           fsr1l	equ	0xFE1
  2036                           indf2	equ	0xFDF
  2037                           postinc2	equ	0xFDE
  2038                           postdec2	equ	0xFDD
  2039                           fsr2h	equ	0xFDA
  2040                           fsr2l	equ	0xFD9
  2041                           status	equ	0xFD8
  2042                           
  2043 ;; *************** function _lcdWriteLine *****************
  2044 ;; Defined at:
  2045 ;;		line 37 in file "test.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  data            2    3[BANK0 ] PTR unsigned char 
  2048 ;;		 -> STR_6(6), STR_5(6), STR_3(3), STR_2(2), 
  2049 ;;		 -> writeNum@numStr(10), 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;  i               2    7[BANK0 ] int 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2061 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;Total ram usage:        6 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    4
  2068 ;; This function calls:
  2069 ;;		_LCD8send
  2070 ;; This function is called by:
  2071 ;;		_writeNum
  2072 ;;		_writeLCD
  2073 ;;		_main
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text6
  2078  001596                     __ptext6:
  2079                           	opt stack 0
  2080  001596                     _lcdWriteLine:
  2081                           	opt stack 25
  2082                           
  2083                           ;test.c: 38: for (int i = 0; data[i] != 0; i++) {
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;incstack = 0
  2087  001596  0E00               	movlw	0
  2088  001598  0100               	movlb	0	; () banked
  2089  00159A  6F68               	movwf	(lcdWriteLine@i+1)& (0+255),b
  2090  00159C  0E00               	movlw	0
  2091  00159E  6F67               	movwf	lcdWriteLine@i& (0+255),b
  2092  0015A0  D024               	goto	l2253
  2093  0015A2                     l2249:
  2094                           
  2095                           ;test.c: 39: LCD8send(data[i], 1);
  2096  0015A2  0E01               	movlw	1
  2097  0015A4  6E23               	movwf	LCD8send@mode,c
  2098  0015A6  0100               	movlb	0	; () banked
  2099  0015A8  5167               	movf	lcdWriteLine@i& (0+255),w,b
  2100  0015AA  0100               	movlb	0	; () banked
  2101  0015AC  2563               	addwf	lcdWriteLine@data& (0+255),w,b
  2102  0015AE  0100               	movlb	0	; () banked
  2103  0015B0  6F65               	movwf	??_lcdWriteLine& (0+255),b
  2104  0015B2  0100               	movlb	0	; () banked
  2105  0015B4  5168               	movf	(lcdWriteLine@i+1)& (0+255),w,b
  2106  0015B6  0100               	movlb	0	; () banked
  2107  0015B8  2164               	addwfc	(lcdWriteLine@data+1)& (0+255),w,b
  2108  0015BA  0100               	movlb	0	; () banked
  2109  0015BC  6F66               	movwf	(??_lcdWriteLine+1)& (0+255),b
  2110  0015BE  C065  FFF6         	movff	??_lcdWriteLine,tblptrl
  2111  0015C2  C066  FFF7         	movff	??_lcdWriteLine+1,tblptrh
  2112  0015C6  0E00               	movlw	low (__smallconst shr (0+16))
  2113  0015C8  6EF8               	movwf	tblptru,c
  2114  0015CA  0E0F               	movlw	(high __ramtop+-1)
  2115  0015CC  64F7               	cpfsgt	tblptrh,c
  2116  0015CE  D003               	bra	u1507
  2117  0015D0  0008               	tblrd		*
  2118  0015D2  50F5               	movf	tablat,w,c
  2119  0015D4  D005               	bra	u1500
  2120  0015D6                     u1507:
  2121  0015D6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2122  0015DA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2123  0015DE  50EF               	movf	indf0,w,c
  2124  0015E0                     u1500:
  2125  0015E0  ECB3  F00C         	call	_LCD8send
  2126  0015E4  0100               	movlb	0	; () banked
  2127  0015E6  4B67               	infsnz	lcdWriteLine@i& (0+255),f,b
  2128  0015E8  2B68               	incf	(lcdWriteLine@i+1)& (0+255),f,b
  2129  0015EA                     l2253:
  2130                           
  2131                           ; BSR set to: 0
  2132  0015EA  0100               	movlb	0	; () banked
  2133  0015EC  5167               	movf	lcdWriteLine@i& (0+255),w,b
  2134  0015EE  0100               	movlb	0	; () banked
  2135  0015F0  2563               	addwf	lcdWriteLine@data& (0+255),w,b
  2136  0015F2  0100               	movlb	0	; () banked
  2137  0015F4  6F65               	movwf	??_lcdWriteLine& (0+255),b
  2138  0015F6  0100               	movlb	0	; () banked
  2139  0015F8  5168               	movf	(lcdWriteLine@i+1)& (0+255),w,b
  2140  0015FA  0100               	movlb	0	; () banked
  2141  0015FC  2164               	addwfc	(lcdWriteLine@data+1)& (0+255),w,b
  2142  0015FE  0100               	movlb	0	; () banked
  2143  001600  6F66               	movwf	(??_lcdWriteLine+1)& (0+255),b
  2144  001602  C065  FFF6         	movff	??_lcdWriteLine,tblptrl
  2145  001606  C066  FFF7         	movff	??_lcdWriteLine+1,tblptrh
  2146  00160A  0E00               	movlw	low (__smallconst shr (0+16))
  2147  00160C  6EF8               	movwf	tblptru,c
  2148  00160E  0E0F               	movlw	(high __ramtop+-1)
  2149  001610  64F7               	cpfsgt	tblptrh,c
  2150  001612  D003               	bra	u1517
  2151  001614  0008               	tblrd		*
  2152  001616  50F5               	movf	tablat,w,c
  2153  001618  D005               	bra	u1510
  2154  00161A                     u1517:
  2155  00161A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2156  00161E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2157  001622  50EF               	movf	indf0,w,c
  2158  001624                     u1510:
  2159  001624  0900               	iorlw	0
  2160  001626  B4D8               	btfsc	status,2,c
  2161  001628  0012               	return	
  2162  00162A  D7BB               	goto	l2249
  2163  00162C                     __end_of_lcdWriteLine:
  2164                           	opt stack 0
  2165                           tblptru	equ	0xFF8
  2166                           tblptrh	equ	0xFF7
  2167                           tblptrl	equ	0xFF6
  2168                           tablat	equ	0xFF5
  2169                           prodh	equ	0xFF4
  2170                           prodl	equ	0xFF3
  2171                           indf0	equ	0xFEF
  2172                           postinc0	equ	0xFEE
  2173                           fsr0h	equ	0xFEA
  2174                           fsr0l	equ	0xFE9
  2175                           postdec1	equ	0xFE5
  2176                           fsr1l	equ	0xFE1
  2177                           indf2	equ	0xFDF
  2178                           postinc2	equ	0xFDE
  2179                           postdec2	equ	0xFDD
  2180                           fsr2h	equ	0xFDA
  2181                           fsr2l	equ	0xFD9
  2182                           status	equ	0xFD8
  2183                           
  2184 ;; *************** function _ee_read_byte *****************
  2185 ;; Defined at:
  2186 ;;		line 108 in file "EEPROM.h"
  2187 ;; Parameters:    Size  Location     Type
  2188 ;;  address         1    wreg     unsigned char 
  2189 ;;  _data           2    0[BANK0 ] PTR unsigned char 
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  address         1   34[COMRAM] unsigned char 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2201 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;Total ram usage:        3 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    4
  2208 ;; This function calls:
  2209 ;;		_XEERead
  2210 ;; This function is called by:
  2211 ;;		_writeLCD
  2212 ;;		_readEEPROM
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	text7
  2217  001AD6                     __ptext7:
  2218                           	opt stack 0
  2219  001AD6                     _ee_read_byte:
  2220                           	opt stack 25
  2221                           
  2222                           ;incstack = 0
  2223                           ;ee_read_byte@address stored from wreg
  2224  001AD6  6E23               	movwf	ee_read_byte@address,c
  2225                           
  2226                           ;EEPROM.h: 117: *_data = XEERead(address);
  2227  001AD8  5023               	movf	ee_read_byte@address,w,c
  2228  001ADA  EC3E  F00D         	call	_XEERead
  2229  001ADE  C060  FFD9         	movff	ee_read_byte@_data,fsr2l
  2230  001AE2  C061  FFDA         	movff	ee_read_byte@_data+1,fsr2h
  2231  001AE6  6EDF               	movwf	indf2,c
  2232  001AE8  0012               	return		;funcret
  2233  001AEA                     __end_of_ee_read_byte:
  2234                           	opt stack 0
  2235                           tblptru	equ	0xFF8
  2236                           tblptrh	equ	0xFF7
  2237                           tblptrl	equ	0xFF6
  2238                           tablat	equ	0xFF5
  2239                           prodh	equ	0xFF4
  2240                           prodl	equ	0xFF3
  2241                           indf0	equ	0xFEF
  2242                           postinc0	equ	0xFEE
  2243                           fsr0h	equ	0xFEA
  2244                           fsr0l	equ	0xFE9
  2245                           postdec1	equ	0xFE5
  2246                           fsr1l	equ	0xFE1
  2247                           indf2	equ	0xFDF
  2248                           postinc2	equ	0xFDE
  2249                           postdec2	equ	0xFDD
  2250                           fsr2h	equ	0xFDA
  2251                           fsr2l	equ	0xFD9
  2252                           status	equ	0xFD8
  2253                           
  2254 ;; *************** function _XEERead *****************
  2255 ;; Defined at:
  2256 ;;		line 65 in file "exprom.h"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  address         1    wreg     unsigned char 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  address         1   32[COMRAM] unsigned char 
  2261 ;;  buffer          1   33[COMRAM] unsigned char 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      unsigned char 
  2264 ;; Registers used:
  2265 ;;		wreg, status,2, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2274 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2275 ;;Total ram usage:        2 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    3
  2278 ;; This function calls:
  2279 ;;		_SPI1out
  2280 ;;		_wait
  2281 ;; This function is called by:
  2282 ;;		_ee_read_byte
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text8
  2287  001A7C                     __ptext8:
  2288                           	opt stack 0
  2289  001A7C                     _XEERead:
  2290                           	opt stack 25
  2291                           
  2292                           ;incstack = 0
  2293                           ;XEERead@address stored from wreg
  2294  001A7C  6E21               	movwf	XEERead@address,c
  2295                           
  2296                           ;exprom.h: 68: (PORTDbits.RD7) = 0;
  2297  001A7E  9E83               	bcf	3971,7,c	;volatile
  2298                           
  2299                           ;exprom.h: 70: SPI1out(0x03);
  2300  001A80  0E03               	movlw	3
  2301  001A82  EC86  F00D         	call	_SPI1out
  2302                           
  2303                           ;exprom.h: 71: SPI1out(((address)>>8)&0xFF);
  2304  001A86  0E00               	movlw	0
  2305  001A88  EC86  F00D         	call	_SPI1out
  2306                           
  2307                           ;exprom.h: 72: SPI1out(address&0xFF);
  2308  001A8C  5021               	movf	XEERead@address,w,c
  2309  001A8E  EC86  F00D         	call	_SPI1out
  2310                           
  2311                           ;exprom.h: 74: (SSP1BUF) = 0x00;
  2312  001A92  0E00               	movlw	0
  2313  001A94  6EC9               	movwf	4041,c	;volatile
  2314                           
  2315                           ;exprom.h: 75: wait();
  2316  001A96  EC8E  F00D         	call	_wait	;wreg free
  2317                           
  2318                           ;exprom.h: 77: unsigned char buffer = (SSP1BUF);
  2319  001A9A  CFC9 F022          	movff	4041,XEERead@buffer	;volatile
  2320                           
  2321                           ;exprom.h: 79: (PORTDbits.RD7) = 1;
  2322  001A9E  8E83               	bsf	3971,7,c	;volatile
  2323                           
  2324                           ;exprom.h: 80: return buffer;
  2325  001AA0  5022               	movf	XEERead@buffer,w,c
  2326  001AA2  0012               	return	
  2327  001AA4                     __end_of_XEERead:
  2328                           	opt stack 0
  2329                           tblptru	equ	0xFF8
  2330                           tblptrh	equ	0xFF7
  2331                           tblptrl	equ	0xFF6
  2332                           tablat	equ	0xFF5
  2333                           prodh	equ	0xFF4
  2334                           prodl	equ	0xFF3
  2335                           indf0	equ	0xFEF
  2336                           postinc0	equ	0xFEE
  2337                           fsr0h	equ	0xFEA
  2338                           fsr0l	equ	0xFE9
  2339                           postdec1	equ	0xFE5
  2340                           fsr1l	equ	0xFE1
  2341                           indf2	equ	0xFDF
  2342                           postinc2	equ	0xFDE
  2343                           postdec2	equ	0xFDD
  2344                           fsr2h	equ	0xFDA
  2345                           fsr2l	equ	0xFD9
  2346                           status	equ	0xFD8
  2347                           
  2348 ;; *************** function _eeWriteChar *****************
  2349 ;; Defined at:
  2350 ;;		line 83 in file "exprom.h"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  EEPROMAddres    1    wreg     unsigned char 
  2353 ;;  value           1   33[COMRAM] unsigned char 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  EEPROMAddres    1   14[BANK0 ] unsigned char 
  2356 ;;  SPICON1Save     4   10[BANK0 ] unsigned long 
  2357 ;;  Dummy           2    8[BANK0 ] int 
  2358 ;;  sr              1   15[BANK0 ] unsigned char 
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      void 
  2361 ;; Registers used:
  2362 ;;		wreg, status,2, status,0, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2368 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;Total ram usage:        9 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    4
  2375 ;; This function calls:
  2376 ;;		_SPI1out
  2377 ;;		_XEEIsBusy
  2378 ;;		_wait
  2379 ;; This function is called by:
  2380 ;;		_main
  2381 ;;		_ee_write_char
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text9
  2386  0016BE                     __ptext9:
  2387                           	opt stack 0
  2388  0016BE                     _eeWriteChar:
  2389                           	opt stack 26
  2390                           
  2391                           ;incstack = 0
  2392                           ;eeWriteChar@EEPROMAddress stored from wreg
  2393  0016BE  0100               	movlb	0	; () banked
  2394  0016C0  6F6E               	movwf	eeWriteChar@EEPROMAddress& (0+255),b
  2395                           
  2396                           ;exprom.h: 84: unsigned long SPICON1Save;
  2397                           ;exprom.h: 87: SPICON1Save = (SSP1CON1);
  2398  0016C2  50C6               	movf	4038,w,c	;volatile
  2399  0016C4  0100               	movlb	0	; () banked
  2400  0016C6  6F6A               	movwf	eeWriteChar@SPICON1Save& (0+255),b
  2401  0016C8  6B6B               	clrf	(eeWriteChar@SPICON1Save+1)& (0+255),b
  2402  0016CA  6B6C               	clrf	(eeWriteChar@SPICON1Save+2)& (0+255),b
  2403  0016CC  6B6D               	clrf	(eeWriteChar@SPICON1Save+3)& (0+255),b
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;exprom.h: 88: (SSP1CON1) = (SSP1CON1);
  2407  0016CE  CFC6 FFC6          	movff	4038,4038	;volatile
  2408                           
  2409                           ;exprom.h: 90: unsigned char sr = 0x00;
  2410  0016D2  0E00               	movlw	0
  2411  0016D4  0100               	movlb	0	; () banked
  2412  0016D6  6F6F               	movwf	eeWriteChar@sr& (0+255),b
  2413  0016D8                     l2463:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;exprom.h: 93: (PORTDbits.RD7) = 0;
  2417  0016D8  9E83               	bcf	3971,7,c	;volatile
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;exprom.h: 94: SPI1out(0x06);
  2421  0016DA  0E06               	movlw	6
  2422  0016DC  EC86  F00D         	call	_SPI1out
  2423                           
  2424                           ;exprom.h: 95: SPI1out(0x05);
  2425  0016E0  0E05               	movlw	5
  2426  0016E2  EC86  F00D         	call	_SPI1out
  2427                           
  2428                           ;exprom.h: 96: (PORTDbits.RD7) = 1;
  2429  0016E6  8E83               	bsf	3971,7,c	;volatile
  2430                           
  2431                           ;exprom.h: 97: (SSP1BUF) = 0x00;
  2432  0016E8  0E00               	movlw	0
  2433  0016EA  6EC9               	movwf	4041,c	;volatile
  2434                           
  2435                           ;exprom.h: 98: wait();
  2436  0016EC  EC8E  F00D         	call	_wait	;wreg free
  2437                           
  2438                           ;exprom.h: 100: sr = (SSP1BUF);
  2439  0016F0  CFC9 F06F          	movff	4041,eeWriteChar@sr	;volatile
  2440                           
  2441                           ;exprom.h: 101: if (sr & 0x02 == 0x02) { break; }
  2442  0016F4  0100               	movlb	0	; () banked
  2443  0016F6  A16F               	btfss	eeWriteChar@sr& (0+255),0,b
  2444  0016F8  D7EF               	goto	l2463
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;exprom.h: 102: }
  2448                           ;exprom.h: 104: wait();
  2449                           
  2450                           ; BSR set to: 0
  2451                           
  2452                           ; BSR set to: 0
  2453                           
  2454                           ; BSR set to: 0
  2455                           
  2456                           ; BSR set to: 0
  2457  0016FA  EC8E  F00D         	call	_wait	;wreg free
  2458                           
  2459                           ;exprom.h: 105: SPI1out(0x02);
  2460  0016FE  0E02               	movlw	2
  2461  001700  EC86  F00D         	call	_SPI1out
  2462                           
  2463                           ;exprom.h: 106: SPI1out(((EEPROMAddress)>>8)&0xFF);
  2464  001704  0E00               	movlw	0
  2465  001706  EC86  F00D         	call	_SPI1out
  2466                           
  2467                           ;exprom.h: 107: SPI1out(EEPROMAddress&0xFF);
  2468  00170A  0100               	movlb	0	; () banked
  2469  00170C  516E               	movf	eeWriteChar@EEPROMAddress& (0+255),w,b
  2470  00170E  EC86  F00D         	call	_SPI1out
  2471                           
  2472                           ;exprom.h: 109: (SSP1BUF) = value;
  2473  001712  C022  FFC9         	movff	eeWriteChar@value,4041	;volatile
  2474                           
  2475                           ;exprom.h: 111: wait();
  2476  001716  EC8E  F00D         	call	_wait	;wreg free
  2477                           
  2478                           ;exprom.h: 113: int Dummy = (SSP1BUF);
  2479  00171A  CFC9 F068          	movff	4041,eeWriteChar@Dummy	;volatile
  2480  00171E  0100               	movlb	0	; () banked
  2481  001720  6B69               	clrf	(eeWriteChar@Dummy+1)& (0+255),b
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;exprom.h: 115: (PIR1bits.SSPIF) = 0;
  2485  001722  969E               	bcf	3998,3,c	;volatile
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;exprom.h: 117: (PORTDbits.RD7) = 1;
  2489  001724  8E83               	bsf	3971,7,c	;volatile
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;exprom.h: 119: (SSP1CON1) = SPICON1Save;
  2493  001726  C06A  FFC6         	movff	eeWriteChar@SPICON1Save,4038	;volatile
  2494  00172A                     l2501:
  2495  00172A  EC8B  F00C         	call	_XEEIsBusy	;wreg free
  2496  00172E  5020               	movf	?_XEEIsBusy,w,c
  2497  001730  1021               	iorwf	?_XEEIsBusy+1,w,c
  2498  001732  B4D8               	btfsc	status,2,c
  2499  001734  0012               	return	
  2500  001736  D7F9               	goto	l2501
  2501  001738                     __end_of_eeWriteChar:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           prodh	equ	0xFF4
  2508                           prodl	equ	0xFF3
  2509                           indf0	equ	0xFEF
  2510                           postinc0	equ	0xFEE
  2511                           fsr0h	equ	0xFEA
  2512                           fsr0l	equ	0xFE9
  2513                           postdec1	equ	0xFE5
  2514                           fsr1l	equ	0xFE1
  2515                           indf2	equ	0xFDF
  2516                           postinc2	equ	0xFDE
  2517                           postdec2	equ	0xFDD
  2518                           fsr2h	equ	0xFDA
  2519                           fsr2l	equ	0xFD9
  2520                           status	equ	0xFD8
  2521                           
  2522 ;; *************** function _XEEIsBusy *****************
  2523 ;; Defined at:
  2524 ;;		line 126 in file "exprom.h"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  val             4    4[BANK0 ] unsigned long 
  2529 ;;  SPICON1Save     4    0[BANK0 ] unsigned long 
  2530 ;;  result          1    0        unsigned char 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  2   31[COMRAM] int 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0, cstack
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2540 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;Total ram usage:       10 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    3
  2547 ;; This function calls:
  2548 ;;		_wait
  2549 ;; This function is called by:
  2550 ;;		_eeWriteChar
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text10
  2555  001916                     __ptext10:
  2556                           	opt stack 0
  2557  001916                     _XEEIsBusy:
  2558                           	opt stack 26
  2559                           
  2560                           ;exprom.h: 127: unsigned char result;
  2561                           ;exprom.h: 128: unsigned long SPICON1Save;
  2562                           ;exprom.h: 131: SPICON1Save = (SSP1CON1);
  2563                           
  2564                           ;incstack = 0
  2565  001916  50C6               	movf	4038,w,c	;volatile
  2566  001918  0100               	movlb	0	; () banked
  2567  00191A  6F60               	movwf	XEEIsBusy@SPICON1Save& (0+255),b
  2568  00191C  6B61               	clrf	(XEEIsBusy@SPICON1Save+1)& (0+255),b
  2569  00191E  6B62               	clrf	(XEEIsBusy@SPICON1Save+2)& (0+255),b
  2570  001920  6B63               	clrf	(XEEIsBusy@SPICON1Save+3)& (0+255),b
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;exprom.h: 132: (SSP1CON1) = (SSP1CON1);
  2574  001922  CFC6 FFC6          	movff	4038,4038	;volatile
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;exprom.h: 134: (PORTDbits.RD7) = 0;
  2578  001926  9E83               	bcf	3971,7,c	;volatile
  2579                           
  2580                           ;exprom.h: 136: (SSP1BUF) = 0x05;
  2581  001928  0E05               	movlw	5
  2582  00192A  6EC9               	movwf	4041,c	;volatile
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;exprom.h: 137: wait();
  2586  00192C  EC8E  F00D         	call	_wait	;wreg free
  2587                           
  2588                           ;exprom.h: 139: unsigned long val;
  2589                           ;exprom.h: 140: val = (SSP1BUF);
  2590  001930  50C9               	movf	4041,w,c	;volatile
  2591  001932  0100               	movlb	0	; () banked
  2592  001934  6F64               	movwf	XEEIsBusy@val& (0+255),b
  2593  001936  6B65               	clrf	(XEEIsBusy@val+1)& (0+255),b
  2594  001938  6B66               	clrf	(XEEIsBusy@val+2)& (0+255),b
  2595  00193A  6B67               	clrf	(XEEIsBusy@val+3)& (0+255),b
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;exprom.h: 141: (PIR1bits.SSPIF) = 0;
  2599  00193C  969E               	bcf	3998,3,c	;volatile
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;exprom.h: 144: (SSP1BUF) = 0;
  2603  00193E  0E00               	movlw	0
  2604  001940  6EC9               	movwf	4041,c	;volatile
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;exprom.h: 145: wait();
  2608  001942  EC8E  F00D         	call	_wait	;wreg free
  2609                           
  2610                           ;exprom.h: 147: val = (SSP1BUF);
  2611  001946  50C9               	movf	4041,w,c	;volatile
  2612  001948  0100               	movlb	0	; () banked
  2613  00194A  6F64               	movwf	XEEIsBusy@val& (0+255),b
  2614  00194C  6B65               	clrf	(XEEIsBusy@val+1)& (0+255),b
  2615  00194E  6B66               	clrf	(XEEIsBusy@val+2)& (0+255),b
  2616  001950  6B67               	clrf	(XEEIsBusy@val+3)& (0+255),b
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;exprom.h: 148: (PIR1bits.SSPIF) = 0;
  2620  001952  969E               	bcf	3998,3,c	;volatile
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;exprom.h: 149: (PORTDbits.RD7) = 1;
  2624  001954  8E83               	bsf	3971,7,c	;volatile
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;exprom.h: 152: (SSP1CON1) = SPICON1Save;
  2628  001956  C060  FFC6         	movff	XEEIsBusy@SPICON1Save,4038	;volatile
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;exprom.h: 154: return val & 1;
  2632  00195A  0E01               	movlw	1
  2633  00195C  0100               	movlb	0	; () banked
  2634  00195E  1564               	andwf	XEEIsBusy@val& (0+255),w,b
  2635  001960  6E20               	movwf	?_XEEIsBusy,c
  2636  001962  6A21               	clrf	?_XEEIsBusy+1,c
  2637  001964  0012               	return	
  2638  001966                     __end_of_XEEIsBusy:
  2639                           	opt stack 0
  2640                           tblptru	equ	0xFF8
  2641                           tblptrh	equ	0xFF7
  2642                           tblptrl	equ	0xFF6
  2643                           tablat	equ	0xFF5
  2644                           prodh	equ	0xFF4
  2645                           prodl	equ	0xFF3
  2646                           indf0	equ	0xFEF
  2647                           postinc0	equ	0xFEE
  2648                           fsr0h	equ	0xFEA
  2649                           fsr0l	equ	0xFE9
  2650                           postdec1	equ	0xFE5
  2651                           fsr1l	equ	0xFE1
  2652                           indf2	equ	0xFDF
  2653                           postinc2	equ	0xFDE
  2654                           postdec2	equ	0xFDD
  2655                           fsr2h	equ	0xFDA
  2656                           fsr2l	equ	0xFD9
  2657                           status	equ	0xFD8
  2658                           
  2659 ;; *************** function _wait *****************
  2660 ;; Defined at:
  2661 ;;		line 38 in file "exprom.h"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		None
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;Total ram usage:        0 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    2
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_XEERead
  2686 ;;		_eeWriteChar
  2687 ;;		_XEEIsBusy
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text11
  2692  001B1C                     __ptext11:
  2693                           	opt stack 0
  2694  001B1C                     _wait:
  2695                           	opt stack 25
  2696  001B1C                     l143:
  2697  001B1C  B0C7               	btfsc	4039,0,c	;volatile
  2698  001B1E  0012               	return	
  2699  001B20  D7FD               	goto	l143
  2700  001B22                     __end_of_wait:
  2701                           	opt stack 0
  2702                           tblptru	equ	0xFF8
  2703                           tblptrh	equ	0xFF7
  2704                           tblptrl	equ	0xFF6
  2705                           tablat	equ	0xFF5
  2706                           prodh	equ	0xFF4
  2707                           prodl	equ	0xFF3
  2708                           indf0	equ	0xFEF
  2709                           postinc0	equ	0xFEE
  2710                           fsr0h	equ	0xFEA
  2711                           fsr0l	equ	0xFE9
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           indf2	equ	0xFDF
  2715                           postinc2	equ	0xFDE
  2716                           postdec2	equ	0xFDD
  2717                           fsr2h	equ	0xFDA
  2718                           fsr2l	equ	0xFD9
  2719                           status	equ	0xFD8
  2720                           
  2721 ;; *************** function _XEEInit *****************
  2722 ;; Defined at:
  2723 ;;		line 44 in file "exprom.h"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;		None
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, status,2, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;Total ram usage:        0 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    4
  2744 ;; This function calls:
  2745 ;;		_SPI1init
  2746 ;;		_SPI1out
  2747 ;; This function is called by:
  2748 ;;		_main
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           	psect	text12
  2753  001AA4                     __ptext12:
  2754                           	opt stack 0
  2755  001AA4                     _XEEInit:
  2756                           	opt stack 26
  2757                           
  2758                           ;exprom.h: 45: (PORTDbits.RD7) = 1;
  2759                           
  2760                           ;incstack = 0
  2761  001AA4  8E83               	bsf	3971,7,c	;volatile
  2762                           
  2763                           ;exprom.h: 46: (TRISDbits.TRISD7) = 0;
  2764  001AA6  9E95               	bcf	3989,7,c	;volatile
  2765                           
  2766                           ;exprom.h: 48: (TRISCbits.TRISC3) = 0;
  2767  001AA8  9694               	bcf	3988,3,c	;volatile
  2768                           
  2769                           ;exprom.h: 49: (TRISCbits.TRISC4) = 1;
  2770  001AAA  8894               	bsf	3988,4,c	;volatile
  2771                           
  2772                           ;exprom.h: 50: (TRISCbits.TRISC5) = 0;
  2773  001AAC  9A94               	bcf	3988,5,c	;volatile
  2774                           
  2775                           ;exprom.h: 52: BAUDCON1 = 0x00;
  2776  001AAE  0E00               	movlw	0
  2777  001AB0  6E7E               	movwf	3966,c	;volatile
  2778                           
  2779                           ;exprom.h: 60: SPI1init();
  2780  001AB2  EC75  F00D         	call	_SPI1init	;wreg free
  2781                           
  2782                           ;exprom.h: 61: SPI1out(0x00);
  2783  001AB6  0E00               	movlw	0
  2784  001AB8  EC86  F00D         	call	_SPI1out
  2785  001ABC  0012               	return		;funcret
  2786  001ABE                     __end_of_XEEInit:
  2787                           	opt stack 0
  2788                           tblptru	equ	0xFF8
  2789                           tblptrh	equ	0xFF7
  2790                           tblptrl	equ	0xFF6
  2791                           tablat	equ	0xFF5
  2792                           prodh	equ	0xFF4
  2793                           prodl	equ	0xFF3
  2794                           indf0	equ	0xFEF
  2795                           postinc0	equ	0xFEE
  2796                           fsr0h	equ	0xFEA
  2797                           fsr0l	equ	0xFE9
  2798                           postdec1	equ	0xFE5
  2799                           fsr1l	equ	0xFE1
  2800                           indf2	equ	0xFDF
  2801                           postinc2	equ	0xFDE
  2802                           postdec2	equ	0xFDD
  2803                           fsr2h	equ	0xFDA
  2804                           fsr2l	equ	0xFD9
  2805                           status	equ	0xFD8
  2806                           
  2807 ;; *************** function _SPI1init *****************
  2808 ;; Defined at:
  2809 ;;		line 6 in file "SPI.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;Total ram usage:        0 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    3
  2830 ;; This function calls:
  2831 ;;		_SPI1out
  2832 ;; This function is called by:
  2833 ;;		_XEEInit
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text13
  2838  001AEA                     __ptext13:
  2839                           	opt stack 0
  2840  001AEA                     _SPI1init:
  2841                           	opt stack 26
  2842                           
  2843                           ;SPI.c: 8: SSP1CON1 = 0b00100010;
  2844                           
  2845                           ;incstack = 0
  2846  001AEA  0E22               	movlw	34
  2847  001AEC  6EC6               	movwf	4038,c	;volatile
  2848                           
  2849                           ;SPI.c: 9: SSP1STATbits.CKE = 1;
  2850  001AEE  8CC7               	bsf	4039,6,c	;volatile
  2851                           
  2852                           ;SPI.c: 10: TRISCbits.TRISC3 = 0;
  2853  001AF0  9694               	bcf	3988,3,c	;volatile
  2854                           
  2855                           ;SPI.c: 11: TRISCbits.TRISC5 = 0;
  2856  001AF2  9A94               	bcf	3988,5,c	;volatile
  2857                           
  2858                           ;SPI.c: 12: SPI1out(0x00);
  2859  001AF4  0E00               	movlw	0
  2860  001AF6  EC86  F00D         	call	_SPI1out
  2861  001AFA  0012               	return		;funcret
  2862  001AFC                     __end_of_SPI1init:
  2863                           	opt stack 0
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           indf0	equ	0xFEF
  2871                           postinc0	equ	0xFEE
  2872                           fsr0h	equ	0xFEA
  2873                           fsr0l	equ	0xFE9
  2874                           postdec1	equ	0xFE5
  2875                           fsr1l	equ	0xFE1
  2876                           indf2	equ	0xFDF
  2877                           postinc2	equ	0xFDE
  2878                           postdec2	equ	0xFDD
  2879                           fsr2h	equ	0xFDA
  2880                           fsr2l	equ	0xFD9
  2881                           status	equ	0xFD8
  2882                           
  2883 ;; *************** function _SPI1out *****************
  2884 ;; Defined at:
  2885 ;;		line 15 in file "SPI.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  Code            1    wreg     unsigned char 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  Code            1   31[COMRAM] unsigned char 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      void 
  2892 ;; Registers used:
  2893 ;;		wreg
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;Total ram usage:        1 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    2
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_SPI1init
  2910 ;;		_XEEInit
  2911 ;;		_XEERead
  2912 ;;		_eeWriteChar
  2913 ;;		_SPI_LCD4send
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text14
  2918  001B0C                     __ptext14:
  2919                           	opt stack 0
  2920  001B0C                     _SPI1out:
  2921                           	opt stack 25
  2922                           
  2923                           ;incstack = 0
  2924                           ;SPI1out@Code stored from wreg
  2925  001B0C  6E20               	movwf	SPI1out@Code,c
  2926                           
  2927                           ;SPI.c: 17: SSP1BUF = Code;
  2928  001B0E  C020  FFC9         	movff	SPI1out@Code,4041	;volatile
  2929  001B12                     l61:
  2930  001B12  A0C7               	btfss	4039,0,c	;volatile
  2931  001B14  D7FE               	goto	l61
  2932                           
  2933                           ;SPI.c: 19: Code = SSP1BUF;
  2934  001B16  CFC9 F020          	movff	4041,SPI1out@Code	;volatile
  2935  001B1A  0012               	return		;funcret
  2936  001B1C                     __end_of_SPI1out:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           prodh	equ	0xFF4
  2943                           prodl	equ	0xFF3
  2944                           indf0	equ	0xFEF
  2945                           postinc0	equ	0xFEE
  2946                           fsr0h	equ	0xFEA
  2947                           fsr0l	equ	0xFE9
  2948                           postdec1	equ	0xFE5
  2949                           fsr1l	equ	0xFE1
  2950                           indf2	equ	0xFDF
  2951                           postinc2	equ	0xFDE
  2952                           postdec2	equ	0xFDD
  2953                           fsr2h	equ	0xFDA
  2954                           fsr2l	equ	0xFD9
  2955                           status	equ	0xFD8
  2956                           
  2957 ;; *************** function _Read_KeyPad *****************
  2958 ;; Defined at:
  2959 ;;		line 14 in file "Keypad.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  i               2    1[BANK0 ] int 
  2964 ;;  code            1    4[BANK0 ] unsigned char 
  2965 ;;  Col             1    3[BANK0 ] unsigned char 
  2966 ;;  value           1    0[BANK0 ] unsigned char 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      unsigned char 
  2969 ;; Registers used:
  2970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;Total ram usage:        5 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    3
  2983 ;; This function calls:
  2984 ;;		_process_key
  2985 ;; This function is called by:
  2986 ;;		_main
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text15
  2991  001738                     __ptext15:
  2992                           	opt stack 0
  2993  001738                     _Read_KeyPad:
  2994                           	opt stack 27
  2995                           
  2996                           ;Keypad.c: 16: unsigned char code,Col,value;
  2997                           ;Keypad.c: 17: int i;
  2998                           ;Keypad.c: 18: value = 0xFF;
  2999                           
  3000                           ;incstack = 0
  3001  001738  0100               	movlb	0	; () banked
  3002  00173A  6960               	setf	Read_KeyPad@value& (0+255),b
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;Keypad.c: 19: Col = 0b11111110;
  3006  00173C  0EFE               	movlw	254
  3007  00173E  0100               	movlb	0	; () banked
  3008  001740  6F63               	movwf	Read_KeyPad@Col& (0+255),b
  3009                           
  3010                           ;Keypad.c: 20: for (i=0;i<4;i++)
  3011  001742  0E00               	movlw	0
  3012  001744  0100               	movlb	0	; () banked
  3013  001746  6F62               	movwf	(Read_KeyPad@i+1)& (0+255),b
  3014  001748  0E00               	movlw	0
  3015  00174A  6F61               	movwf	Read_KeyPad@i& (0+255),b
  3016  00174C                     l2381:
  3017                           
  3018                           ; BSR set to: 0
  3019  00174C  0100               	movlb	0	; () banked
  3020  00174E  BF62               	btfsc	(Read_KeyPad@i+1)& (0+255),7,b
  3021  001750  D008               	goto	l16
  3022  001752  0100               	movlb	0	; () banked
  3023  001754  5162               	movf	(Read_KeyPad@i+1)& (0+255),w,b
  3024  001756  E128               	bnz	l2395
  3025  001758  0E04               	movlw	4
  3026  00175A  0100               	movlb	0	; () banked
  3027  00175C  5D61               	subwf	Read_KeyPad@i& (0+255),w,b
  3028  00175E  B0D8               	btfsc	status,0,c
  3029  001760  D023               	goto	l2395
  3030  001762                     l16:
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;Keypad.c: 21: {
  3034                           ;Keypad.c: 22: LATD = Col;
  3035  001762  C063  FF8C         	movff	Read_KeyPad@Col,3980	;volatile
  3036                           
  3037                           ;Keypad.c: 23: code = PORTD;
  3038  001766  CF83 F064          	movff	3971,Read_KeyPad@code	;volatile
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;Keypad.c: 24: code = code | 0b00001111;
  3042  00176A  0100               	movlb	0	; () banked
  3043  00176C  5164               	movf	Read_KeyPad@code& (0+255),w,b
  3044  00176E  090F               	iorlw	15
  3045  001770  0100               	movlb	0	; () banked
  3046  001772  6F64               	movwf	Read_KeyPad@code& (0+255),b
  3047                           
  3048                           ;Keypad.c: 25: code = code & Col;
  3049  001774  0100               	movlb	0	; () banked
  3050  001776  5164               	movf	Read_KeyPad@code& (0+255),w,b
  3051  001778  0100               	movlb	0	; () banked
  3052  00177A  1563               	andwf	Read_KeyPad@Col& (0+255),w,b
  3053  00177C  0100               	movlb	0	; () banked
  3054  00177E  6F64               	movwf	Read_KeyPad@code& (0+255),b
  3055                           
  3056                           ;Keypad.c: 26: if (code!=Col)
  3057  001780  0100               	movlb	0	; () banked
  3058  001782  5163               	movf	Read_KeyPad@Col& (0+255),w,b
  3059  001784  0100               	movlb	0	; () banked
  3060  001786  1964               	xorwf	Read_KeyPad@code& (0+255),w,b
  3061  001788  B4D8               	btfsc	status,2,c
  3062  00178A  D007               	goto	l2389
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;Keypad.c: 27: {
  3066                           ;Keypad.c: 28: value = process_key(code);
  3067  00178C  0100               	movlb	0	; () banked
  3068  00178E  5164               	movf	Read_KeyPad@code& (0+255),w,b
  3069  001790  EC0C  F00D         	call	_process_key
  3070  001794  0100               	movlb	0	; () banked
  3071  001796  6F60               	movwf	Read_KeyPad@value& (0+255),b
  3072                           
  3073                           ;Keypad.c: 29: break;
  3074  001798  D007               	goto	l2395
  3075  00179A                     l2389:
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;Keypad.c: 30: }
  3079                           ;Keypad.c: 31: Col = (Col << 1) | 0x01;
  3080  00179A  80D8               	bsf	status,0,c
  3081  00179C  0100               	movlb	0	; () banked
  3082  00179E  3763               	rlcf	Read_KeyPad@Col& (0+255),f,b
  3083                           
  3084                           ; BSR set to: 0
  3085  0017A0  0100               	movlb	0	; () banked
  3086  0017A2  4B61               	infsnz	Read_KeyPad@i& (0+255),f,b
  3087  0017A4  2B62               	incf	(Read_KeyPad@i+1)& (0+255),f,b
  3088  0017A6  D7D2               	goto	l2381
  3089  0017A8                     l2395:
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;Keypad.c: 32: }
  3093                           ;Keypad.c: 34: return(value);
  3094  0017A8  0100               	movlb	0	; () banked
  3095  0017AA  5160               	movf	Read_KeyPad@value& (0+255),w,b
  3096  0017AC  0012               	return	
  3097  0017AE                     __end_of_Read_KeyPad:
  3098                           	opt stack 0
  3099                           tblptru	equ	0xFF8
  3100                           tblptrh	equ	0xFF7
  3101                           tblptrl	equ	0xFF6
  3102                           tablat	equ	0xFF5
  3103                           prodh	equ	0xFF4
  3104                           prodl	equ	0xFF3
  3105                           indf0	equ	0xFEF
  3106                           postinc0	equ	0xFEE
  3107                           fsr0h	equ	0xFEA
  3108                           fsr0l	equ	0xFE9
  3109                           postdec1	equ	0xFE5
  3110                           fsr1l	equ	0xFE1
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _process_key *****************
  3119 ;; Defined at:
  3120 ;;		line 37 in file "Keypad.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  code            1    wreg     unsigned char 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  code            1   32[COMRAM] unsigned char 
  3125 ;;  i               1   33[COMRAM] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      unsigned char 
  3128 ;; Registers used:
  3129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;Total ram usage:        3 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    2
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_Read_KeyPad
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text16
  3150  001A18                     __ptext16:
  3151                           	opt stack 0
  3152  001A18                     _process_key:
  3153                           	opt stack 27
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;incstack = 0
  3157                           ;process_key@code stored from wreg
  3158  001A18  6E21               	movwf	process_key@code,c
  3159                           
  3160                           ;Keypad.c: 39: unsigned char i;
  3161                           ;Keypad.c: 40: for (i=0;i<16;i++)
  3162  001A1A  0E00               	movlw	0
  3163  001A1C  6E22               	movwf	process_key@i,c
  3164  001A1E                     l2317:
  3165  001A1E  0E0F               	movlw	15
  3166  001A20  6422               	cpfsgt	process_key@i,c
  3167  001A22  D001               	goto	l2321
  3168  001A24  D010               	goto	l2331
  3169  001A26                     l2321:
  3170                           
  3171                           ;Keypad.c: 41: {
  3172                           ;Keypad.c: 42: if (code==scan_code[i]) return i;
  3173  001A26  5022               	movf	process_key@i,w,c
  3174  001A28  0D01               	mullw	1
  3175  001A2A  0E24               	movlw	low _scan_code
  3176  001A2C  24F3               	addwf	prodl,w,c
  3177  001A2E  6ED9               	movwf	fsr2l,c
  3178  001A30  0E00               	movlw	high _scan_code
  3179  001A32  20F4               	addwfc	prodh,w,c
  3180  001A34  6EDA               	movwf	fsr2h,c
  3181  001A36  5021               	movf	process_key@code,w,c
  3182  001A38  18DE               	xorwf	postinc2,w,c
  3183  001A3A  A4D8               	btfss	status,2,c
  3184  001A3C  D002               	goto	l2327
  3185  001A3E  5022               	movf	process_key@i,w,c
  3186  001A40  0012               	return	
  3187  001A42                     l2327:
  3188  001A42  2A22               	incf	process_key@i,f,c
  3189  001A44  D7EC               	goto	l2317
  3190  001A46                     l2331:
  3191                           
  3192                           ;Keypad.c: 43: }
  3193                           ;Keypad.c: 44: return(0xFF);
  3194  001A46  0EFF               	movlw	255
  3195  001A48  0012               	return	
  3196  001A4A                     __end_of_process_key:
  3197                           	opt stack 0
  3198                           tblptru	equ	0xFF8
  3199                           tblptrh	equ	0xFF7
  3200                           tblptrl	equ	0xFF6
  3201                           tablat	equ	0xFF5
  3202                           prodh	equ	0xFF4
  3203                           prodl	equ	0xFF3
  3204                           indf0	equ	0xFEF
  3205                           postinc0	equ	0xFEE
  3206                           fsr0h	equ	0xFEA
  3207                           fsr0l	equ	0xFE9
  3208                           postdec1	equ	0xFE5
  3209                           fsr1l	equ	0xFE1
  3210                           indf2	equ	0xFDF
  3211                           postinc2	equ	0xFDE
  3212                           postdec2	equ	0xFDD
  3213                           fsr2h	equ	0xFDA
  3214                           fsr2l	equ	0xFD9
  3215                           status	equ	0xFD8
  3216                           
  3217 ;; *************** function _LCD8init *****************
  3218 ;; Defined at:
  3219 ;;		line 12 in file "LCD8.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;		None
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0, cstack
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;Total ram usage:        0 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    4
  3240 ;; This function calls:
  3241 ;;		_LCD8send
  3242 ;;		_delay_ms
  3243 ;; This function is called by:
  3244 ;;		_main
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text17
  3249  0014D8                     __ptext17:
  3250                           	opt stack 0
  3251  0014D8                     _LCD8init:
  3252                           	opt stack 26
  3253                           
  3254                           ;LCD8.c: 14: TRISE = 0x00;
  3255                           
  3256                           ;incstack = 0
  3257  0014D8  0E00               	movlw	0
  3258  0014DA  6E96               	movwf	3990,c	;volatile
  3259                           
  3260                           ;LCD8.c: 15: TRISH = 0b11111000;
  3261  0014DC  0EF8               	movlw	248
  3262  0014DE  6E99               	movwf	3993,c	;volatile
  3263                           
  3264                           ;LCD8.c: 16: LATHbits.LATH1 = 0;
  3265  0014E0  9290               	bcf	3984,1,c	;volatile
  3266                           
  3267                           ;LCD8.c: 17: LATHbits.LATH0 = 0;
  3268  0014E2  9090               	bcf	3984,0,c	;volatile
  3269                           
  3270                           ;LCD8.c: 18: LATHbits.LATH2 = 0;
  3271  0014E4  9490               	bcf	3984,2,c	;volatile
  3272                           
  3273                           ;LCD8.c: 19: delay_ms(200);
  3274  0014E6  0E00               	movlw	0
  3275  0014E8  6E21               	movwf	delay_ms@x+1,c
  3276  0014EA  0EC8               	movlw	200
  3277  0014EC  6E20               	movwf	delay_ms@x,c
  3278  0014EE  ECD1  F00C         	call	_delay_ms	;wreg free
  3279                           
  3280                           ;LCD8.c: 21: LCD8send(0x30,0);
  3281  0014F2  0E00               	movlw	0
  3282  0014F4  6E23               	movwf	LCD8send@mode,c
  3283  0014F6  0E30               	movlw	48
  3284  0014F8  ECB3  F00C         	call	_LCD8send
  3285                           
  3286                           ;LCD8.c: 22: LCD8send(0x30,0);
  3287  0014FC  0E00               	movlw	0
  3288  0014FE  6E23               	movwf	LCD8send@mode,c
  3289  001500  0E30               	movlw	48
  3290  001502  ECB3  F00C         	call	_LCD8send
  3291                           
  3292                           ;LCD8.c: 23: LCD8send(0x30,0);
  3293  001506  0E00               	movlw	0
  3294  001508  6E23               	movwf	LCD8send@mode,c
  3295  00150A  0E30               	movlw	48
  3296  00150C  ECB3  F00C         	call	_LCD8send
  3297                           
  3298                           ;LCD8.c: 24: LCD8send(0x38,0);
  3299  001510  0E00               	movlw	0
  3300  001512  6E23               	movwf	LCD8send@mode,c
  3301  001514  0E38               	movlw	56
  3302  001516  ECB3  F00C         	call	_LCD8send
  3303                           
  3304                           ;LCD8.c: 25: LCD8send(0x10,0);
  3305  00151A  0E00               	movlw	0
  3306  00151C  6E23               	movwf	LCD8send@mode,c
  3307  00151E  0E10               	movlw	16
  3308  001520  ECB3  F00C         	call	_LCD8send
  3309                           
  3310                           ;LCD8.c: 26: LCD8send(0x0F,0);
  3311  001524  0E00               	movlw	0
  3312  001526  6E23               	movwf	LCD8send@mode,c
  3313  001528  0E0F               	movlw	15
  3314  00152A  ECB3  F00C         	call	_LCD8send
  3315                           
  3316                           ;LCD8.c: 27: LCD8send(0x06,0);
  3317  00152E  0E00               	movlw	0
  3318  001530  6E23               	movwf	LCD8send@mode,c
  3319  001532  0E06               	movlw	6
  3320  001534  ECB3  F00C         	call	_LCD8send
  3321                           
  3322                           ;LCD8.c: 28: LCD8send(0x01,0);
  3323  001538  0E00               	movlw	0
  3324  00153A  6E23               	movwf	LCD8send@mode,c
  3325  00153C  0E01               	movlw	1
  3326  00153E  ECB3  F00C         	call	_LCD8send
  3327                           
  3328                           ;LCD8.c: 29: delay_ms(100);
  3329  001542  0E00               	movlw	0
  3330  001544  6E21               	movwf	delay_ms@x+1,c
  3331  001546  0E64               	movlw	100
  3332  001548  6E20               	movwf	delay_ms@x,c
  3333  00154A  ECD1  F00C         	call	_delay_ms	;wreg free
  3334                           
  3335                           ;LCD8.c: 31: LCD8send(0x8A,0);
  3336  00154E  0E00               	movlw	0
  3337  001550  6E23               	movwf	LCD8send@mode,c
  3338  001552  0E8A               	movlw	138
  3339  001554  ECB3  F00C         	call	_LCD8send
  3340                           
  3341                           ;LCD8.c: 33: LCD8send('N',1);
  3342  001558  0E01               	movlw	1
  3343  00155A  6E23               	movwf	LCD8send@mode,c
  3344  00155C  0E4E               	movlw	78
  3345  00155E  ECB3  F00C         	call	_LCD8send
  3346                           
  3347                           ;LCD8.c: 34: LCD8send('A',1);
  3348  001562  0E01               	movlw	1
  3349  001564  6E23               	movwf	LCD8send@mode,c
  3350  001566  0E41               	movlw	65
  3351  001568  ECB3  F00C         	call	_LCD8send
  3352                           
  3353                           ;LCD8.c: 35: LCD8send('M',1);
  3354  00156C  0E01               	movlw	1
  3355  00156E  6E23               	movwf	LCD8send@mode,c
  3356  001570  0E4D               	movlw	77
  3357  001572  ECB3  F00C         	call	_LCD8send
  3358                           
  3359                           ;LCD8.c: 36: LCD8send('E',1);
  3360  001576  0E01               	movlw	1
  3361  001578  6E23               	movwf	LCD8send@mode,c
  3362  00157A  0E45               	movlw	69
  3363  00157C  ECB3  F00C         	call	_LCD8send
  3364                           
  3365                           ;LCD8.c: 38: LCD8send(0xC0,0);
  3366  001580  0E00               	movlw	0
  3367  001582  6E23               	movwf	LCD8send@mode,c
  3368  001584  0EC0               	movlw	192
  3369  001586  ECB3  F00C         	call	_LCD8send
  3370                           
  3371                           ;LCD8.c: 39: LCD8send('#',1);
  3372  00158A  0E01               	movlw	1
  3373  00158C  6E23               	movwf	LCD8send@mode,c
  3374  00158E  0E23               	movlw	35
  3375  001590  ECB3  F00C         	call	_LCD8send
  3376  001594  0012               	return		;funcret
  3377  001596                     __end_of_LCD8init:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           prodh	equ	0xFF4
  3384                           prodl	equ	0xFF3
  3385                           indf0	equ	0xFEF
  3386                           postinc0	equ	0xFEE
  3387                           fsr0h	equ	0xFEA
  3388                           fsr0l	equ	0xFE9
  3389                           postdec1	equ	0xFE5
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           postinc2	equ	0xFDE
  3393                           postdec2	equ	0xFDD
  3394                           fsr2h	equ	0xFDA
  3395                           fsr2l	equ	0xFD9
  3396                           status	equ	0xFD8
  3397                           
  3398 ;; *************** function _LCD8send *****************
  3399 ;; Defined at:
  3400 ;;		line 42 in file "LCD8.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  c               1    wreg     unsigned char 
  3403 ;;  mode            1   34[COMRAM] unsigned char 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  c               1    2[BANK0 ] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, status,0, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3415 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;Total ram usage:        2 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    3
  3422 ;; This function calls:
  3423 ;;		_delay_ms
  3424 ;;		_delay_us
  3425 ;; This function is called by:
  3426 ;;		_LCD8init
  3427 ;;		_lcdWriteLine
  3428 ;;		_writeLCD
  3429 ;;		_main
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text18
  3434  001966                     __ptext18:
  3435                           	opt stack 0
  3436  001966                     _LCD8send:
  3437                           	opt stack 25
  3438                           
  3439                           ;incstack = 0
  3440                           ;LCD8send@c stored from wreg
  3441  001966  0100               	movlb	0	; () banked
  3442  001968  6F62               	movwf	LCD8send@c& (0+255),b
  3443                           
  3444                           ;LCD8.c: 43: LATHbits.LATH2 = mode;
  3445  00196A  B023               	btfsc	LCD8send@mode,0,c
  3446  00196C  D002               	bra	u1415
  3447  00196E  9490               	bcf	3984,2,c	;volatile
  3448  001970  D001               	bra	u1416
  3449  001972                     u1415:
  3450  001972  8490               	bsf	3984,2,c	;volatile
  3451  001974                     u1416:
  3452                           
  3453                           ;LCD8.c: 44: delay_ms(1);
  3454  001974  0E00               	movlw	0
  3455  001976  6E21               	movwf	delay_ms@x+1,c
  3456  001978  0E01               	movlw	1
  3457  00197A  6E20               	movwf	delay_ms@x,c
  3458  00197C  ECD1  F00C         	call	_delay_ms	;wreg free
  3459                           
  3460                           ;LCD8.c: 46: LATE = c;
  3461  001980  C062  FF8D         	movff	LCD8send@c,3981	;volatile
  3462                           
  3463                           ;LCD8.c: 47: LATHbits.LATH0 = 1;
  3464  001984  8090               	bsf	3984,0,c	;volatile
  3465                           
  3466                           ;LCD8.c: 48: delay_us(1);
  3467  001986  0E00               	movlw	0
  3468  001988  6E21               	movwf	delay_us@x+1,c
  3469  00198A  0E01               	movlw	1
  3470  00198C  6E20               	movwf	delay_us@x,c
  3471  00198E  EC25  F00D         	call	_delay_us	;wreg free
  3472                           
  3473                           ;LCD8.c: 49: LATHbits.LATH0 = 0;
  3474  001992  9090               	bcf	3984,0,c	;volatile
  3475                           
  3476                           ;LCD8.c: 50: delay_us(50);
  3477  001994  0E00               	movlw	0
  3478  001996  6E21               	movwf	delay_us@x+1,c
  3479  001998  0E32               	movlw	50
  3480  00199A  6E20               	movwf	delay_us@x,c
  3481  00199C  EC25  F00D         	call	_delay_us	;wreg free
  3482  0019A0  0012               	return		;funcret
  3483  0019A2                     __end_of_LCD8send:
  3484                           	opt stack 0
  3485                           tblptru	equ	0xFF8
  3486                           tblptrh	equ	0xFF7
  3487                           tblptrl	equ	0xFF6
  3488                           tablat	equ	0xFF5
  3489                           prodh	equ	0xFF4
  3490                           prodl	equ	0xFF3
  3491                           indf0	equ	0xFEF
  3492                           postinc0	equ	0xFEE
  3493                           fsr0h	equ	0xFEA
  3494                           fsr0l	equ	0xFE9
  3495                           postdec1	equ	0xFE5
  3496                           fsr1l	equ	0xFE1
  3497                           indf2	equ	0xFDF
  3498                           postinc2	equ	0xFDE
  3499                           postdec2	equ	0xFDD
  3500                           fsr2h	equ	0xFDA
  3501                           fsr2l	equ	0xFD9
  3502                           status	equ	0xFD8
  3503                           
  3504 ;; *************** function _delay_us *****************
  3505 ;; Defined at:
  3506 ;;		line 87 in file "delay.h"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  x               2   31[COMRAM] int 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  i               2    0[BANK0 ] int 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3520 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;Total ram usage:        5 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    2
  3527 ;; This function calls:
  3528 ;;		Nothing
  3529 ;; This function is called by:
  3530 ;;		_LCD8send
  3531 ;;		_SPI_LCD4send
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text19
  3536  001A4A                     __ptext19:
  3537                           	opt stack 0
  3538  001A4A                     _delay_us:
  3539                           	opt stack 25
  3540                           
  3541                           ;delay.h: 89: for (int i = 0; i < x; i++)
  3542                           
  3543                           ;incstack = 0
  3544  001A4A  0E00               	movlw	0
  3545  001A4C  0100               	movlb	0	; () banked
  3546  001A4E  6F61               	movwf	(delay_us@i+1)& (0+255),b
  3547  001A50  0E00               	movlw	0
  3548  001A52  6F60               	movwf	delay_us@i& (0+255),b
  3549  001A54  D006               	goto	l2173
  3550  001A56                     l136:
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;delay.h: 90: {
  3554                           ;delay.h: 91: _delay((unsigned long)((1)*(25000000/4000000.0)));
  3555  001A56  D000               	nop2		;2 cycle nop
  3556  001A58  D000               	nop2		;2 cycle nop
  3557  001A5A  D000               	nop2		;2 cycle nop
  3558  001A5C  0100               	movlb	0	; () banked
  3559  001A5E  4B60               	infsnz	delay_us@i& (0+255),f,b
  3560  001A60  2B61               	incf	(delay_us@i+1)& (0+255),f,b
  3561  001A62                     l2173:
  3562                           
  3563                           ; BSR set to: 0
  3564  001A62  5020               	movf	delay_us@x,w,c
  3565  001A64  0100               	movlb	0	; () banked
  3566  001A66  5D60               	subwf	delay_us@i& (0+255),w,b
  3567  001A68  0100               	movlb	0	; () banked
  3568  001A6A  5161               	movf	(delay_us@i+1)& (0+255),w,b
  3569  001A6C  0A80               	xorlw	128
  3570  001A6E  6E22               	movwf	??_delay_us& (0+255),c
  3571  001A70  5021               	movf	delay_us@x+1,w,c
  3572  001A72  0A80               	xorlw	128
  3573  001A74  5822               	subwfb	??_delay_us& (0+255),w,c
  3574  001A76  B0D8               	btfsc	status,0,c
  3575  001A78  0012               	return	
  3576  001A7A  D7ED               	goto	l136
  3577  001A7C                     __end_of_delay_us:
  3578                           	opt stack 0
  3579                           tblptru	equ	0xFF8
  3580                           tblptrh	equ	0xFF7
  3581                           tblptrl	equ	0xFF6
  3582                           tablat	equ	0xFF5
  3583                           prodh	equ	0xFF4
  3584                           prodl	equ	0xFF3
  3585                           indf0	equ	0xFEF
  3586                           postinc0	equ	0xFEE
  3587                           fsr0h	equ	0xFEA
  3588                           fsr0l	equ	0xFE9
  3589                           postdec1	equ	0xFE5
  3590                           fsr1l	equ	0xFE1
  3591                           indf2	equ	0xFDF
  3592                           postinc2	equ	0xFDE
  3593                           postdec2	equ	0xFDD
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function _delay_ms *****************
  3599 ;; Defined at:
  3600 ;;		line 79 in file "delay.h"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  x               2   31[COMRAM] int 
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;  i               2    0[BANK0 ] int 
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  1    wreg      void 
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3614 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;Total ram usage:        5 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    2
  3621 ;; This function calls:
  3622 ;;		Nothing
  3623 ;; This function is called by:
  3624 ;;		_LCD8init
  3625 ;;		_LCD8send
  3626 ;;		_main
  3627 ;;		_SPI_LCD4send
  3628 ;;		_SPI_LCD4init
  3629 ;;		_writeEEPROM
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text20
  3634  0019A2                     __ptext20:
  3635                           	opt stack 0
  3636  0019A2                     _delay_ms:
  3637                           	opt stack 25
  3638                           
  3639                           ;delay.h: 81: for (int i = 0; i < x; i++)
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;incstack = 0
  3643  0019A2  0E00               	movlw	0
  3644  0019A4  0100               	movlb	0	; () banked
  3645  0019A6  6F61               	movwf	(delay_ms@i+1)& (0+255),b
  3646  0019A8  0E00               	movlw	0
  3647  0019AA  6F60               	movwf	delay_ms@i& (0+255),b
  3648  0019AC  D00B               	goto	l129
  3649  0019AE                     l2165:
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;delay.h: 82: {
  3653                           ;delay.h: 83: _delay((unsigned long)((1)*(25000000/4000.0)));
  3654  0019AE  0E09               	movlw	9
  3655  0019B0  6E22               	movwf	??_delay_ms& (0+255),c
  3656  0019B2  0E1C               	movlw	28
  3657  0019B4                     u1937:
  3658  0019B4  2EE8               	decfsz	wreg,f,c
  3659  0019B6  D7FE               	goto	u1937
  3660  0019B8  2E22               	decfsz	??_delay_ms& (0+255),f,c
  3661  0019BA  D7FC               	goto	u1937
  3662  0019BC  D000               	nop2	
  3663  0019BE  0100               	movlb	0	; () banked
  3664  0019C0  4B60               	infsnz	delay_ms@i& (0+255),f,b
  3665  0019C2  2B61               	incf	(delay_ms@i+1)& (0+255),f,b
  3666  0019C4                     l129:
  3667                           
  3668                           ; BSR set to: 0
  3669  0019C4  5020               	movf	delay_ms@x,w,c
  3670  0019C6  0100               	movlb	0	; () banked
  3671  0019C8  5D60               	subwf	delay_ms@i& (0+255),w,b
  3672  0019CA  0100               	movlb	0	; () banked
  3673  0019CC  5161               	movf	(delay_ms@i+1)& (0+255),w,b
  3674  0019CE  0A80               	xorlw	128
  3675  0019D0  6E22               	movwf	??_delay_ms& (0+255),c
  3676  0019D2  5021               	movf	delay_ms@x+1,w,c
  3677  0019D4  0A80               	xorlw	128
  3678  0019D6  5822               	subwfb	??_delay_ms& (0+255),w,c
  3679  0019D8  B0D8               	btfsc	status,0,c
  3680  0019DA  0012               	return	
  3681  0019DC  D7E8               	goto	l2165
  3682  0019DE                     __end_of_delay_ms:
  3683                           	opt stack 0
  3684                           tblptru	equ	0xFF8
  3685                           tblptrh	equ	0xFF7
  3686                           tblptrl	equ	0xFF6
  3687                           tablat	equ	0xFF5
  3688                           prodh	equ	0xFF4
  3689                           prodl	equ	0xFF3
  3690                           indf0	equ	0xFEF
  3691                           postinc0	equ	0xFEE
  3692                           fsr0h	equ	0xFEA
  3693                           fsr0l	equ	0xFE9
  3694                           wreg	equ	0xFE8
  3695                           postdec1	equ	0xFE5
  3696                           fsr1l	equ	0xFE1
  3697                           indf2	equ	0xFDF
  3698                           postinc2	equ	0xFDE
  3699                           postdec2	equ	0xFDD
  3700                           fsr2h	equ	0xFDA
  3701                           fsr2l	equ	0xFD9
  3702                           status	equ	0xFD8
  3703                           
  3704 ;; *************** function _KeyPadinit *****************
  3705 ;; Defined at:
  3706 ;;		line 10 in file "Keypad.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;		None
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;		None
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  1    wreg      void 
  3713 ;; Registers used:
  3714 ;;		wreg, status,2
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;Total ram usage:        0 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; Hardware stack levels required when called:    2
  3727 ;; This function calls:
  3728 ;;		Nothing
  3729 ;; This function is called by:
  3730 ;;		_main
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text21
  3735  001B22                     __ptext21:
  3736                           	opt stack 0
  3737  001B22                     _KeyPadinit:
  3738                           	opt stack 28
  3739                           
  3740                           ;Keypad.c: 11: TRISD = 0xF0;
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;incstack = 0
  3744  001B22  0EF0               	movlw	240
  3745  001B24  6E95               	movwf	3989,c	;volatile
  3746  001B26  0012               	return		;funcret
  3747  001B28                     __end_of_KeyPadinit:
  3748                           	opt stack 0
  3749                           tblptru	equ	0xFF8
  3750                           tblptrh	equ	0xFF7
  3751                           tblptrl	equ	0xFF6
  3752                           tablat	equ	0xFF5
  3753                           prodh	equ	0xFF4
  3754                           prodl	equ	0xFF3
  3755                           indf0	equ	0xFEF
  3756                           postinc0	equ	0xFEE
  3757                           fsr0h	equ	0xFEA
  3758                           fsr0l	equ	0xFE9
  3759                           wreg	equ	0xFE8
  3760                           postdec1	equ	0xFE5
  3761                           fsr1l	equ	0xFE1
  3762                           indf2	equ	0xFDF
  3763                           postinc2	equ	0xFDE
  3764                           postdec2	equ	0xFDD
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8
  3768                           
  3769 ;; *************** function _LowIsr *****************
  3770 ;; Defined at:
  3771 ;;		line 32 in file "test.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;		None
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      void 
  3778 ;; Registers used:
  3779 ;;		None
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;Total ram usage:       17 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    1
  3792 ;; This function calls:
  3793 ;;		Nothing
  3794 ;; This function is called by:
  3795 ;;		Interrupt level 1
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	intcodelo
  3800  000018                     __pintcodelo:
  3801                           	opt stack 0
  3802  000018                     _LowIsr:
  3803                           	opt stack 24
  3804                           
  3805                           ;incstack = 0
  3806  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3807  00001A  CFD8 F00F          	movff	status,??_LowIsr
  3808  00001E  CFE8 F010          	movff	wreg,??_LowIsr+1
  3809  000022  CFE0 F011          	movff	bsr,??_LowIsr+2
  3810  000026  CFFA F012          	movff	pclath,??_LowIsr+3
  3811  00002A  CFFB F013          	movff	pclatu,??_LowIsr+4
  3812  00002E  CFE9 F014          	movff	fsr0l,??_LowIsr+5
  3813  000032  CFEA F015          	movff	fsr0h,??_LowIsr+6
  3814  000036  CFE1 F016          	movff	fsr1l,??_LowIsr+7
  3815  00003A  CFE2 F017          	movff	fsr1h,??_LowIsr+8
  3816  00003E  CFD9 F018          	movff	fsr2l,??_LowIsr+9
  3817  000042  CFDA F019          	movff	fsr2h,??_LowIsr+10
  3818  000046  CFF3 F01A          	movff	prodl,??_LowIsr+11
  3819  00004A  CFF4 F01B          	movff	prodh,??_LowIsr+12
  3820  00004E  CFF6 F01C          	movff	tblptrl,??_LowIsr+13
  3821  000052  CFF7 F01D          	movff	tblptrh,??_LowIsr+14
  3822  000056  CFF8 F01E          	movff	tblptru,??_LowIsr+15
  3823  00005A  CFF5 F01F          	movff	tablat,??_LowIsr+16
  3824  00005E  C01F  FFF5         	movff	??_LowIsr+16,tablat
  3825  000062  C01E  FFF8         	movff	??_LowIsr+15,tblptru
  3826  000066  C01D  FFF7         	movff	??_LowIsr+14,tblptrh
  3827  00006A  C01C  FFF6         	movff	??_LowIsr+13,tblptrl
  3828  00006E  C01B  FFF4         	movff	??_LowIsr+12,prodh
  3829  000072  C01A  FFF3         	movff	??_LowIsr+11,prodl
  3830  000076  C019  FFDA         	movff	??_LowIsr+10,fsr2h
  3831  00007A  C018  FFD9         	movff	??_LowIsr+9,fsr2l
  3832  00007E  C017  FFE2         	movff	??_LowIsr+8,fsr1h
  3833  000082  C016  FFE1         	movff	??_LowIsr+7,fsr1l
  3834  000086  C015  FFEA         	movff	??_LowIsr+6,fsr0h
  3835  00008A  C014  FFE9         	movff	??_LowIsr+5,fsr0l
  3836  00008E  C013  FFFB         	movff	??_LowIsr+4,pclatu
  3837  000092  C012  FFFA         	movff	??_LowIsr+3,pclath
  3838  000096  C011  FFE0         	movff	??_LowIsr+2,bsr
  3839  00009A  C010  FFE8         	movff	??_LowIsr+1,wreg
  3840  00009E  C00F  FFD8         	movff	??_LowIsr,status
  3841  0000A2  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3842  0000A4  0010               	retfie	
  3843  0000A6                     __end_of_LowIsr:
  3844                           	opt stack 0
  3845                           pclatu	equ	0xFFB
  3846                           pclath	equ	0xFFA
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           prodh	equ	0xFF4
  3852                           prodl	equ	0xFF3
  3853                           indf0	equ	0xFEF
  3854                           postinc0	equ	0xFEE
  3855                           fsr0h	equ	0xFEA
  3856                           fsr0l	equ	0xFE9
  3857                           wreg	equ	0xFE8
  3858                           postdec1	equ	0xFE5
  3859                           fsr1h	equ	0xFE2
  3860                           fsr1l	equ	0xFE1
  3861                           bsr	equ	0xFE0
  3862                           indf2	equ	0xFDF
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function _HighIsr *****************
  3870 ;; Defined at:
  3871 ;;		line 18 in file "test.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;		None
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;		None
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  1    wreg      void 
  3878 ;; Registers used:
  3879 ;;		wreg, status,2, status,0
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3888 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;Total ram usage:       14 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; This function calls:
  3892 ;;		Nothing
  3893 ;; This function is called by:
  3894 ;;		Interrupt level 2
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           	psect	intcode
  3899  000008                     __pintcode:
  3900                           	opt stack 0
  3901  000008                     _HighIsr:
  3902                           	opt stack 24
  3903                           
  3904                           ;incstack = 0
  3905  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3906  00000A  CFFA F001          	movff	pclath,??_HighIsr
  3907  00000E  CFFB F002          	movff	pclatu,??_HighIsr+1
  3908  000012  EF16  F00B         	goto	int_func
  3909                           pclatu	equ	0xFFB
  3910                           pclath	equ	0xFFA
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodh	equ	0xFF4
  3916                           prodl	equ	0xFF3
  3917                           indf0	equ	0xFEF
  3918                           postinc0	equ	0xFEE
  3919                           fsr0h	equ	0xFEA
  3920                           fsr0l	equ	0xFE9
  3921                           wreg	equ	0xFE8
  3922                           postdec1	equ	0xFE5
  3923                           fsr1h	equ	0xFE2
  3924                           fsr1l	equ	0xFE1
  3925                           bsr	equ	0xFE0
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933                           	psect	intcode_body
  3934  00162C                     __pintcode_body:
  3935                           	opt stack 24
  3936  00162C                     int_func:
  3937                           	opt stack 24
  3938  00162C  CFE9 F003          	movff	fsr0l,??_HighIsr+2
  3939  001630  CFEA F004          	movff	fsr0h,??_HighIsr+3
  3940  001634  CFE1 F005          	movff	fsr1l,??_HighIsr+4
  3941  001638  CFE2 F006          	movff	fsr1h,??_HighIsr+5
  3942  00163C  CFD9 F007          	movff	fsr2l,??_HighIsr+6
  3943  001640  CFDA F008          	movff	fsr2h,??_HighIsr+7
  3944  001644  CFF3 F009          	movff	prodl,??_HighIsr+8
  3945  001648  CFF4 F00A          	movff	prodh,??_HighIsr+9
  3946  00164C  CFF6 F00B          	movff	tblptrl,??_HighIsr+10
  3947  001650  CFF7 F00C          	movff	tblptrh,??_HighIsr+11
  3948  001654  CFF8 F00D          	movff	tblptru,??_HighIsr+12
  3949  001658  CFF5 F00E          	movff	tablat,??_HighIsr+13
  3950                           
  3951                           ;test.c: 20: if(PIR3bits.TMR4IF==1)
  3952  00165C  A6A4               	btfss	4004,3,c	;volatile
  3953  00165E  D011               	goto	i2l243
  3954                           
  3955                           ;test.c: 21: {
  3956                           ;test.c: 22: counter++;
  3957  001660  4A3C               	infsnz	_counter,f,c
  3958  001662  2A3D               	incf	_counter+1,f,c
  3959                           
  3960                           ;test.c: 23: if (counter>=1000)
  3961  001664  BE3D               	btfsc	_counter+1,7,c
  3962  001666  D00C               	goto	i2l1521
  3963  001668  0EE8               	movlw	232
  3964  00166A  5C3C               	subwf	_counter,w,c
  3965  00166C  0E03               	movlw	3
  3966  00166E  583D               	subwfb	_counter+1,w,c
  3967  001670  A0D8               	btfss	status,0,c
  3968  001672  D006               	goto	i2l1521
  3969                           
  3970                           ;test.c: 24: {
  3971                           ;test.c: 25: sec++;
  3972  001674  4A3E               	infsnz	_sec,f,c
  3973  001676  2A3F               	incf	_sec+1,f,c
  3974                           
  3975                           ;test.c: 26: counter=0;
  3976  001678  0E00               	movlw	0
  3977  00167A  6E3D               	movwf	_counter+1,c
  3978  00167C  0E00               	movlw	0
  3979  00167E  6E3C               	movwf	_counter,c
  3980  001680                     i2l1521:
  3981                           
  3982                           ;test.c: 27: }
  3983                           ;test.c: 28: PIR3bits.TMR4IF = 0;
  3984  001680  96A4               	bcf	4004,3,c	;volatile
  3985  001682                     i2l243:
  3986  001682  C00E  FFF5         	movff	??_HighIsr+13,tablat
  3987  001686  C00D  FFF8         	movff	??_HighIsr+12,tblptru
  3988  00168A  C00C  FFF7         	movff	??_HighIsr+11,tblptrh
  3989  00168E  C00B  FFF6         	movff	??_HighIsr+10,tblptrl
  3990  001692  C00A  FFF4         	movff	??_HighIsr+9,prodh
  3991  001696  C009  FFF3         	movff	??_HighIsr+8,prodl
  3992  00169A  C008  FFDA         	movff	??_HighIsr+7,fsr2h
  3993  00169E  C007  FFD9         	movff	??_HighIsr+6,fsr2l
  3994  0016A2  C006  FFE2         	movff	??_HighIsr+5,fsr1h
  3995  0016A6  C005  FFE1         	movff	??_HighIsr+4,fsr1l
  3996  0016AA  C004  FFEA         	movff	??_HighIsr+3,fsr0h
  3997  0016AE  C003  FFE9         	movff	??_HighIsr+2,fsr0l
  3998  0016B2  C002  FFFB         	movff	??_HighIsr+1,pclatu
  3999  0016B6  C001  FFFA         	movff	??_HighIsr,pclath
  4000  0016BA  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4001  0016BC  0011               	retfie		f
  4002  0016BE                     __end_of_HighIsr:
  4003                           	opt stack 0
  4004                           pclatu	equ	0xFFB
  4005                           pclath	equ	0xFFA
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           prodh	equ	0xFF4
  4011                           prodl	equ	0xFF3
  4012                           indf0	equ	0xFEF
  4013                           postinc0	equ	0xFEE
  4014                           fsr0h	equ	0xFEA
  4015                           fsr0l	equ	0xFE9
  4016                           wreg	equ	0xFE8
  4017                           postdec1	equ	0xFE5
  4018                           fsr1h	equ	0xFE2
  4019                           fsr1l	equ	0xFE1
  4020                           bsr	equ	0xFE0
  4021                           indf2	equ	0xFDF
  4022                           postinc2	equ	0xFDE
  4023                           postdec2	equ	0xFDD
  4024                           fsr2h	equ	0xFDA
  4025                           fsr2l	equ	0xFD9
  4026                           status	equ	0xFD8
  4027                           pclatu	equ	0xFFB
  4028                           pclath	equ	0xFFA
  4029                           tblptru	equ	0xFF8
  4030                           tblptrh	equ	0xFF7
  4031                           tblptrl	equ	0xFF6
  4032                           tablat	equ	0xFF5
  4033                           prodh	equ	0xFF4
  4034                           prodl	equ	0xFF3
  4035                           indf0	equ	0xFEF
  4036                           postinc0	equ	0xFEE
  4037                           fsr0h	equ	0xFEA
  4038                           fsr0l	equ	0xFE9
  4039                           wreg	equ	0xFE8
  4040                           postdec1	equ	0xFE5
  4041                           fsr1h	equ	0xFE2
  4042                           fsr1l	equ	0xFE1
  4043                           bsr	equ	0xFE0
  4044                           indf2	equ	0xFDF
  4045                           postinc2	equ	0xFDE
  4046                           postdec2	equ	0xFDD
  4047                           fsr2h	equ	0xFDA
  4048                           fsr2l	equ	0xFD9
  4049                           status	equ	0xFD8
  4050                           
  4051                           	psect	rparam
  4052  0000                     pclatu	equ	0xFFB
  4053                           pclath	equ	0xFFA
  4054                           tblptru	equ	0xFF8
  4055                           tblptrh	equ	0xFF7
  4056                           tblptrl	equ	0xFF6
  4057                           tablat	equ	0xFF5
  4058                           prodh	equ	0xFF4
  4059                           prodl	equ	0xFF3
  4060                           indf0	equ	0xFEF
  4061                           postinc0	equ	0xFEE
  4062                           fsr0h	equ	0xFEA
  4063                           fsr0l	equ	0xFE9
  4064                           wreg	equ	0xFE8
  4065                           postdec1	equ	0xFE5
  4066                           fsr1h	equ	0xFE2
  4067                           fsr1l	equ	0xFE1
  4068                           bsr	equ	0xFE0
  4069                           indf2	equ	0xFDF
  4070                           postinc2	equ	0xFDE
  4071                           postdec2	equ	0xFDD
  4072                           fsr2h	equ	0xFDA
  4073                           fsr2l	equ	0xFD9
  4074                           status	equ	0xFD8
  4075                           
  4076                           	psect	temp
  4077  000040                     btemp:
  4078                           	opt stack 0
  4079  000040                     	ds	1
  4080  0000                     int$flags	set	btemp
  4081                           pclatu	equ	0xFFB
  4082                           pclath	equ	0xFFA
  4083                           tblptru	equ	0xFF8
  4084                           tblptrh	equ	0xFF7
  4085                           tblptrl	equ	0xFF6
  4086                           tablat	equ	0xFF5
  4087                           prodh	equ	0xFF4
  4088                           prodl	equ	0xFF3
  4089                           indf0	equ	0xFEF
  4090                           postinc0	equ	0xFEE
  4091                           fsr0h	equ	0xFEA
  4092                           fsr0l	equ	0xFE9
  4093                           wreg	equ	0xFE8
  4094                           postdec1	equ	0xFE5
  4095                           fsr1h	equ	0xFE2
  4096                           fsr1l	equ	0xFE1
  4097                           bsr	equ	0xFE0
  4098                           indf2	equ	0xFDF
  4099                           postinc2	equ	0xFDE
  4100                           postdec2	equ	0xFDD
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    18
    Data        40
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      63
    BANK0           160     45      61
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> writeNum@numStr(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcdWriteLine@data	PTR unsigned char  size(2) Largest target is 10
		 -> STR_6(CODE[6]), STR_5(CODE[6]), STR_3(CODE[3]), STR_2(CODE[2]), 
		 -> writeNum@numStr(BANK0[10]), 

    ee_read_byte@_data	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_LCD8send
    _writeLCD->_LCD8send
    _writeLCD->_ee_read_byte
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _lcdWriteLine->_LCD8send
    _ee_read_byte->_XEERead
    _XEERead->_SPI1out
    _eeWriteChar->_XEEIsBusy
    _XEEInit->_SPI1out
    _SPI1init->_SPI1out
    _Read_KeyPad->_process_key
    _LCD8init->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in COMRAM

    None.

Critical Paths under _HighIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_writeLCD
    _writeLCD->_writeNum
    _writeNum->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdWriteLine->_LCD8send
    _eeWriteChar->_XEEIsBusy
    _LCD8init->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in BANK0

    None.

Critical Paths under _HighIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowIsr in BANK1

    None.

Critical Paths under _HighIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowIsr in BANK2

    None.

Critical Paths under _HighIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowIsr in BANK3

    None.

Critical Paths under _HighIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowIsr in BANK4

    None.

Critical Paths under _HighIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowIsr in BANK5

    None.

Critical Paths under _HighIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowIsr in BANK6

    None.

Critical Paths under _HighIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowIsr in BANK7

    None.

Critical Paths under _HighIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowIsr in BANK8

    None.

Critical Paths under _HighIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowIsr in BANK9

    None.

Critical Paths under _HighIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowIsr in BANK10

    None.

Critical Paths under _HighIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowIsr in BANK11

    None.

Critical Paths under _HighIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowIsr in BANK12

    None.

Critical Paths under _HighIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowIsr in BANK13

    None.

Critical Paths under _HighIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _LowIsr in BANK14

    None.

Critical Paths under _HighIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _LowIsr in BANK15

    None.

Critical Paths under _HighIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   29276
                                             36 BANK0      9     9      0
                         _KeyPadinit
                           _LCD8init
                           _LCD8send
                        _Read_KeyPad
                            _XEEInit
                           _delay_ms
                        _eeWriteChar
                       _lcdWriteLine
                           _writeLCD
                           _writeNum
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             3     3      0   11671
                                             33 BANK0      3     3      0
                           _LCD8send
                       _ee_read_byte
                       _lcdWriteLine
                           _writeNum
 ---------------------------------------------------------------------------------
 (1) _writeNum                                            11    11      0    5085
                                             22 BANK0     11    11      0
                       _lcdWriteLine
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    1631
                                              8 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              3 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             31 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcdWriteLine                                         6     4      2    3331
                                              3 BANK0      6     4      2
                           _LCD8send
 ---------------------------------------------------------------------------------
 (2) _ee_read_byte                                         3     1      2     315
                                             34 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                            _XEERead
 ---------------------------------------------------------------------------------
 (3) _XEERead                                              2     2      0      99
                                             32 COMRAM     2     2      0
                            _SPI1out
                               _wait
 ---------------------------------------------------------------------------------
 (1) _eeWriteChar                                          9     8      1     395
                                             33 COMRAM     1     0      1
                                              8 BANK0      8     8      0
                            _SPI1out
                          _XEEIsBusy
                               _wait
 ---------------------------------------------------------------------------------
 (2) _XEEIsBusy                                           11     9      2      71
                                             31 COMRAM     2     0      2
                                              0 BANK0      8     8      0
                               _wait
 ---------------------------------------------------------------------------------
 (4) _wait                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _XEEInit                                              0     0      0      68
                           _SPI1init
                            _SPI1out
 ---------------------------------------------------------------------------------
 (2) _SPI1init                                             0     0      0      34
                            _SPI1out
 ---------------------------------------------------------------------------------
 (4) _SPI1out                                              1     1      0      34
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Read_KeyPad                                          5     5      0     529
                                              0 BANK0      5     5      0
                        _process_key
 ---------------------------------------------------------------------------------
 (2) _process_key                                          3     3      0     161
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD8init                                             0     0      0    3577
                           _LCD8send
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _LCD8send                                             2     1      1    2816
                                             34 COMRAM     1     0      1
                                              2 BANK0      1     1      0
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             5     3      2     453
                                             31 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             5     3      2     761
                                             31 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeyPadinit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowIsr                                              17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighIsr                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeyPadinit
   _LCD8init
     _LCD8send
       _delay_ms
       _delay_us
     _delay_ms
   _LCD8send
     _delay_ms
     _delay_us
   _Read_KeyPad
     _process_key
   _XEEInit
     _SPI1init
       _SPI1out
     _SPI1out
   _delay_ms
   _eeWriteChar
     _SPI1out
     _XEEIsBusy
       _wait
     _wait
   _lcdWriteLine
     _LCD8send
       _delay_ms
       _delay_us
   _writeLCD
     _LCD8send
       _delay_ms
       _delay_us
     _ee_read_byte
       _XEERead
         _SPI1out
         _wait
     _lcdWriteLine
       _LCD8send
         _delay_ms
         _delay_us
     _writeNum
       _lcdWriteLine
         _LCD8send
           _delay_ms
           _delay_us
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _writeNum
     _lcdWriteLine
       _LCD8send
         _delay_ms
         _delay_us
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)

 _LowIsr (ROOT)

 _HighIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0       0      38        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2D      3D       5       38.1%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      3F       1       67.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7C      29        0.0%
DATA                 0      0      7C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Aug 10 14:24:11 2017

                      l16 1762                        l61 1B12                        bsr 000FE0  
              _WRITE_MODE 1011                       l143 1B1C                       l136 1A56  
                     l129 19C4                       l800 1806                       l790 1864  
                     _sec 003E           __end_of_EEDELAY 100F                       prod 000FF3  
                     wreg 000FE8                _TXSTA1bits 000FAC              __CFG_FOSC$HS 000000  
             main@address 0086      __end_of_ee_read_byte 1AEA            ??_lcdWriteLine 0065  
            __CFG_WDT$OFF 000000                      l2201 1838                      l2221 17D4  
                    l2301 143C                      l2311 14CA                      l2321 1A26  
                    l2209 1858                      l2225 17F8                      l2217 17C2  
                    l2331 1A46                      l2219 17CE                      l2307 149E  
                    l2165 19AE                      l2173 1A62                      l2317 1A1E  
                    l2501 172A                      l2253 15EA                      l2309 14AA  
                    l2327 1A42                      l2263 1370                      l2249 15A2  
                    l2281 13DA                      l2257 1352                      l2601 113A  
                    l2611 1194                      l2381 174C                      l2197 182A  
                    l2293 1416                      l2269 13A4                      l2621 11EC  
                    l2605 1164                      l2463 16D8                      l2199 1834  
                    l2279 13D4                      l2631 124C                      l2615 11BC  
                    l2625 1214                      l2641 12C0                      l2395 17A8  
                    l2299 1436                      l2635 1288                      l2389 179A  
                    l2645 12D4                      l2593 10FA                      l2577 1074  
                    l2595 1108                      l2659 1336                      l2589 10C6  
           lcdWriteLine@i 0067                      STR_1 1025                      STR_2 1028  
                    STR_3 1022                      STR_4 101F                      STR_5 1019  
                    STR_6 1013                      u1500 15E0                      u1510 1624  
                    u1415 1972                      u1416 1974                      _LATD 000F8C  
                    _LATE 000F8D                      u1507 15D6                      u1517 161A  
                    u1801 115A                      u1831 11B4                      u1937 19B4  
         __end_of_SPI1out 1B1C                      _main 102C           __end_of_XEEInit 1ABE  
         __end_of_XEERead 1AA4                      _wait 1B1C                      fsr0h 000FEA  
                    fsr1h 000FE2                      indf0 000FEF                      fsr0l 000FE9  
                    fsr2h 000FDA                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9               main@prevKey 0085                      btemp 0040  
                    pclat 000FFA              process_key@i 0022                      prodh 000FF4  
                    prodl 000FF3                      start 00A6           __end_of_HighIsr 16BE  
            ___param_bank 000010          __end_of_LCD8init 1596             ??_Read_KeyPad 0023  
        __end_of_LCD8send 19A2                     ?_main 0001      __size_of_eeWriteChar 007A  
                   ?_wait 0001           __end_of___lwdiv 186E           __end_of___lwmod 1810  
                   i2l243 1682                     _PORTD 000F83                     _PORTJ 000F88  
                   _TRISD 000F95                     _TRISE 000F96                     _TRISH 000F99  
                   _TRISJ 000F9A          __end_of_SPI1init 1AFC           __end_of_dpowers 100B  
         clr_screen@F6532 0034        __size_of_XEEIsBusy 0050                     tablat 000FF5  
              _KeyPadinit 1B22                     status 000FD8           __end_of_sprintf 14D8  
         __initialization 18C4              __end_of_main 1344              __end_of_wait 1B22  
                  ??_main 0084                    ??_wait 0020             __activetblptr 000003  
     __end_of_Read_KeyPad 17AE             eeWriteChar@sr 006F         __end_of_READ_MODE 1011  
               ??_SPI1out 0020                 ??_XEEInit 0021                 ??_XEERead 0021  
                  i2l1521 1680                    _SPBRG1 000FAF                 ??_HighIsr 0001  
                  _SSPBUF 000FC9                    _TXREG1 000FAD                    _TXSTA1 000FAC  
        __end_of_delay_ms 19DE          __end_of_delay_us 1A7C            __CFG_XINST$OFF 000000  
                  _LowIsr 0018      __end_of_lcdWriteLine 162C         __end_of_XEEIsBusy 1966  
               ??___lwdiv 0024                 ??___lwmod 0024     __size_of_ee_read_byte 0014  
            __pdataCOMRAM 0024      XEEIsBusy@SPICON1Save 0060              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
            Read_KeyPad@i 0061                 ??_sprintf 006E                 LCD8send@c 0062  
        __end_of_writeLCD 18C4                 ?_LCD8init 0001                 ?_LCD8send 0023  
            ?_process_key 0001          __end_of_writeNum 1A18               ?_KeyPadinit 0001  
              __accesstop 0060   __end_of__initialization 190C             ___rparam_used 000001  
          __pcstackCOMRAM 0001              _ee_read_byte 1AD6              __pidataBANK0 1AFC  
eeWriteChar@EEPROMAddress 006E                 ?_SPI1init 0001               _Read_KeyPad 1738  
        eeWriteChar@Dummy 0068          eeWriteChar@value 0022                ??_LCD8init 0024  
              ??_LCD8send 0024           writeLCD@address 0083    eeWriteChar@SPICON1Save 006A  
                 ?_LowIsr 0001                ??_SPI1init 0021          lcdWriteLine@data 0063  
                 _EEDELAY 100B       __size_of_KeyPadinit 0006                 ?_delay_ms 0020  
               ?_delay_us 0020                   _SSP1BUF 000FC9                   _SPI1out 1B0C  
                 _XEEInit 1AA4                   _XEERead 1A7C                   _HighIsr 0008  
   __size_of_lcdWriteLine 0096                   __Hparam 0000                   __Lparam 0000  
         __size_of_LowIsr 008E             ??_eeWriteChar 0023                   ___lwdiv 1810  
                 ___lwmod 17AE              __psmallconst 1000              writeLCD@data 0081  
                 __pcinit 18C4                   __ramtop 1000                 ?_writeLCD 0001  
                 __ptext0 102C                   __ptext1 186E                   __ptext2 19DE  
                 __ptext3 1344                   __ptext4 17AE                   __ptext5 1810  
                 __ptext6 1596                   __ptext7 1AD6                   __ptext8 1A7C  
                 __ptext9 16BE                 ?_writeNum 0001                   _counter 003C  
                 _dpowers 1001                ??_delay_ms 0022                ??_delay_us 0022  
                 _sprintf 1344                   main@key 008A            __pintcode_body 162C  
            _lcdWriteLine 1596      end_of_initialization 190C                 _READ_MODE 100F  
             SPI1out@Code 0020                   int_func 162C      __size_of_process_key 0032  
      __end_of_WRITE_MODE 1013       ee_read_byte@address 0023           process_key@code 0021  
               _RCSTAbits 000FAB                   postdec1 000FE5                   postdec2 000FDD  
                 postinc0 000FEE                   postinc2 000FDE                ??_writeLCD 0024  
              ??_writeNum 0024                 _PORTDbits 000F83                 _XEEIsBusy 1916  
     __end_of_eeWriteChar 1738                 _TRISCbits 000F94                 _TRISDbits 000F95  
          main@writeValue 0087              ??_KeyPadinit 0020         __size_of_LCD8init 00BE  
       __size_of_LCD8send 003C            __end_of_LowIsr 00A6              ?_Read_KeyPad 0001  
           __pidataCOMRAM 1ABE         __size_of_SPI1init 0012                ?_XEEIsBusy 0020  
      __end_of_KeyPadinit 1B28       start_initialization 18C4                  ??_LowIsr 000F  
             __pdataBANK0 008D               _eeWriteChar 16BE         ee_read_byte@_data 0060  
             __pbssCOMRAM 003C             __pcstackBANK0 0060                  ?_SPI1out 0001  
                ?_XEEInit 0001                  ?_XEERead 0001         __size_of_delay_ms 003C  
       __size_of_delay_us 0032               sprintf@flag 0071                  ?_HighIsr 0001  
             sprintf@prec 0072          ___lwdiv@dividend 0020                 __pintcode 0008  
                ?___lwdiv 0020                  ?___lwmod 0063               __pintcodelo 0018  
             ??_XEEIsBusy 0022               __smallconst 1000                  _BAUDCON1 000F7E  
       __size_of_writeLCD 0056         __size_of_writeNum 003A                 _keyValues 008D  
        ___lwdiv@quotient 0061                  ?_sprintf 0068                  _LCD8init 14D8  
               _scan_code 0024                  _LCD8send 1966                  _LATCbits 000F8B  
               delay_ms@i 0060                 delay_ms@x 0020                  _LATHbits 000F90  
               delay_us@i 0060                 delay_us@x 0020                  _IPR1bits 000F9F  
                _PIE1bits 000F9D                  _IPR3bits 000FA5                  _PIE3bits 000FA3  
                _PIR1bits 000F9E                  _PIR3bits 000FA4                  _RCONbits 000FD0  
                _SSP1CON1 000FC6                  _SPI1init 1AEA      __size_of_Read_KeyPad 0076  
               main@keyNo 0088                 copy_data0 18E0                 copy_data1 1900  
        __size_of_SPI1out 0010          __size_of_XEEInit 001A          __size_of_XEERead 0028  
           ??_process_key 0020          __size_of_HighIsr 16B6                  __Hrparam 0000  
                __Lrparam 0000             ?_ee_read_byte 0060          Read_KeyPad@value 0060  
        __size_of___lwdiv 005E          __size_of___lwmod 0062          cursor_home@F6537 0038  
              sprintf@val 0073                  _delay_ms 19A2                  _delay_us 1A4A  
         ___lwdiv@divisor 0022           ___lwdiv@counter 0060                  __ptext10 1916  
                __ptext11 1B1C                  __ptext20 19A2                  __ptext12 1AA4  
                __ptext21 1B22                  __ptext13 1AEA                  __ptext14 1B0C  
                __ptext15 1738                  __ptext16 1A18                  __ptext17 14D8  
                __ptext18 1966                  __ptext19 1A4A          __size_of_sprintf 0194  
           __size_of_main 0318             __size_of_wait 0006       __end_of_process_key 1A4A  
          ??_ee_read_byte 0023                  int$flags 0040              ?_eeWriteChar 0022  
            _SSP1STATbits 000FC7                  main@mode 008B                  _writeLCD 186E  
                _writeNum 19DE                _INTCONbits 000FF2           Read_KeyPad@code 0064  
                intlevel1 0000                  intlevel2 0000                 sprintf@ap 006F  
               sprintf@sp 0068          ___lwmod@dividend 0063                _RCSTA1bits 000FAB  
          XEERead@address 0021              XEEIsBusy@val 0064            Read_KeyPad@Col 0063  
            LCD8send@mode 0023                  sprintf@c 0075                  sprintf@f 006A  
         ___lwmod@divisor 0065           ___lwmod@counter 0067             XEERead@buffer 0022  
           ?_lcdWriteLine 0063               _process_key 1A18            writeNum@numStr 0076  
          writeNum@number 0080  
