

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Aug 14 14:02:59 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	idataCOMRAM
    43  001A58                     __pidataCOMRAM:
    44                           	opt stack 0
    45                           
    46                           ;initializer for _scan_code
    47  001A58  EB                 	db	235
    48  001A59  77                 	db	119
    49  001A5A  7B                 	db	123
    50  001A5B  7D                 	db	125
    51  001A5C  B7                 	db	183
    52  001A5D  BB                 	db	187
    53  001A5E  BD                 	db	189
    54  001A5F  D7                 	db	215
    55  001A60  DB                 	db	219
    56  001A61  DD                 	db	221
    57  001A62  7E                 	db	126
    58  001A63  BE                 	db	190
    59  001A64  DE                 	db	222
    60  001A65  EE                 	db	238
    61  001A66  E7                 	db	231
    62  001A67  ED                 	db	237
    63                           
    64                           ;initializer for clr_screen@F6532
    65  001A68  1B                 	db	27
    66  001A69  5B                 	db	91
    67  001A6A  32                 	db	50
    68  001A6B  4A                 	db	74
    69                           
    70                           ;initializer for cursor_home@F6537
    71  001A6C  1B                 	db	27
    72  001A6D  5B                 	db	91
    73  001A6E  32                 	db	50
    74  001A6F  48                 	db	72
    75                           
    76                           	psect	idataBANK0
    77  001A96                     __pidataBANK0:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _keyValues
    81  001A96  30                 	db	48
    82  001A97  31                 	db	49
    83  001A98  32                 	db	50
    84  001A99  33                 	db	51
    85  001A9A  34                 	db	52
    86  001A9B  35                 	db	53
    87  001A9C  36                 	db	54
    88  001A9D  37                 	db	55
    89  001A9E  38                 	db	56
    90  001A9F  39                 	db	57
    91  001AA0  41                 	db	65
    92  001AA1  42                 	db	66
    93  001AA2  43                 	db	67
    94  001AA3  44                 	db	68
    95  001AA4  2A                 	db	42
    96  001AA5  23                 	db	35
    97                           
    98                           	psect	smallconst
    99  001000                     __psmallconst:
   100                           	opt stack 0
   101  001000  00                 	db	0
   102  001001                     _dpowers:
   103                           	opt stack 0
   104  001001  0001               	dw	1
   105  001003  000A               	dw	10
   106  001005  0064               	dw	100
   107  001007  03E8               	dw	1000
   108  001009  2710               	dw	10000
   109  00100B                     __end_of_dpowers:
   110                           	opt stack 0
   111  00100B                     _EEDELAY:
   112                           	opt stack 0
   113  00100B  001E               	dw	30
   114  00100D  0000               	dw	0
   115  00100F                     __end_of_EEDELAY:
   116                           	opt stack 0
   117  00100F                     _READ_MODE:
   118                           	opt stack 0
   119  00100F  0001               	dw	1
   120  001011                     __end_of_READ_MODE:
   121                           	opt stack 0
   122  001011                     _WRITE_MODE:
   123                           	opt stack 0
   124  001011  0000               	dw	0
   125  001013                     __end_of_WRITE_MODE:
   126                           	opt stack 0
   127  0000                     _BAUDCON1	set	3966
   128  0000                     _INTCONbits	set	4082
   129  0000                     _IPR1bits	set	3999
   130  0000                     _IPR3bits	set	4005
   131  0000                     _LATCbits	set	3979
   132  0000                     _LATD	set	3980
   133  0000                     _LATE	set	3981
   134  0000                     _LATHbits	set	3984
   135  0000                     _PIE1bits	set	3997
   136  0000                     _PIE3bits	set	4003
   137  0000                     _PIR1bits	set	3998
   138  0000                     _PIR3bits	set	4004
   139  0000                     _PORTCbits	set	3970
   140  0000                     _PORTD	set	3971
   141  0000                     _PORTJ	set	3976
   142  0000                     _RCONbits	set	4048
   143  0000                     _RCSTA1bits	set	4011
   144  0000                     _RCSTAbits	set	4011
   145  0000                     _SPBRG1	set	4015
   146  0000                     _SSP1BUF	set	4041
   147  0000                     _SSP1CON1	set	4038
   148  0000                     _SSP1STATbits	set	4039
   149  0000                     _SSPBUF	set	4041
   150  0000                     _TRISCbits	set	3988
   151  0000                     _TRISD	set	3989
   152  0000                     _TRISE	set	3990
   153  0000                     _TRISH	set	3993
   154  0000                     _TRISJ	set	3994
   155  0000                     _TXREG1	set	4013
   156  0000                     _TXSTA1	set	4012
   157  0000                     _TXSTA1bits	set	4012
   158  001013                     STR_6:
   159  001013  20                 	db	32
   160  001014  76                 	db	118	;'v'
   161  001015  61                 	db	97	;'a'
   162  001016  6C                 	db	108	;'l'
   163  001017  3D                 	db	61	;'='
   164  001018  00                 	db	0
   165  001019                     STR_5:
   166  001019  20                 	db	32
   167  00101A  6B                 	db	107	;'k'
   168  00101B  65                 	db	101	;'e'
   169  00101C  79                 	db	121	;'y'
   170  00101D  3D                 	db	61	;'='
   171  00101E  00                 	db	0
   172  00101F                     STR_4:
   173  00101F  57                 	db	87	;'W'
   174  001020  52                 	db	82	;'R'
   175  001021  00                 	db	0
   176  001022                     STR_3:
   177  001022  20                 	db	32
   178  001023  56                 	db	86	;'V'
   179  001024  00                 	db	0
   180  001025                     STR_1:
   181  001025  25                 	db	37
   182  001026  69                 	db	105	;'i'
   183  001027  00                 	db	0
   184  001028                     STR_2:
   185  001028  23                 	db	35
   186  001029  00                 	db	0
   187                           
   188                           ; #config settings
   189  00102A  00                 	db	0	; dummy byte at the end
   190  0000                     
   191                           	psect	cinit
   192  0018AE                     __pcinit:
   193                           	opt stack 0
   194  0018AE                     start_initialization:
   195                           	opt stack 0
   196  0018AE                     __initialization:
   197                           	opt stack 0
   198                           
   199                           ; Clear objects allocated to COMRAM (4 bytes)
   200  0018AE  6A3F               	clrf	(__pbssCOMRAM+3)& (0+255),c
   201  0018B0  6A3E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   202  0018B2  6A3D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   203  0018B4  6A3C               	clrf	__pbssCOMRAM& (0+255),c
   204                           
   205                           ; Initialize objects allocated to BANK0 (16 bytes)
   206                           ; load TBLPTR registers with __pidataBANK0
   207  0018B6  0E96               	movlw	low __pidataBANK0
   208  0018B8  6EF6               	movwf	tblptrl,c
   209  0018BA  0E1A               	movlw	high __pidataBANK0
   210  0018BC  6EF7               	movwf	tblptrh,c
   211  0018BE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   212  0018C0  6EF8               	movwf	tblptru,c
   213  0018C2  EE00  F08D         	lfsr	0,__pdataBANK0
   214  0018C6  EE10 F010          	lfsr	1,16
   215  0018CA                     copy_data0:
   216  0018CA  0009               	tblrd		*+
   217  0018CC  CFF5 FFEE          	movff	tablat,postinc0
   218  0018D0  50E5               	movf	postdec1,w,c
   219  0018D2  50E1               	movf	fsr1l,w,c
   220  0018D4  E1FA               	bnz	copy_data0
   221                           
   222                           ; Initialize objects allocated to COMRAM (24 bytes)
   223                           ; load TBLPTR registers with __pidataCOMRAM
   224  0018D6  0E58               	movlw	low __pidataCOMRAM
   225  0018D8  6EF6               	movwf	tblptrl,c
   226  0018DA  0E1A               	movlw	high __pidataCOMRAM
   227  0018DC  6EF7               	movwf	tblptrh,c
   228  0018DE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   229  0018E0  6EF8               	movwf	tblptru,c
   230  0018E2  EE00  F024         	lfsr	0,__pdataCOMRAM
   231  0018E6  EE10 F018          	lfsr	1,24
   232  0018EA                     copy_data1:
   233  0018EA  0009               	tblrd		*+
   234  0018EC  CFF5 FFEE          	movff	tablat,postinc0
   235  0018F0  50E5               	movf	postdec1,w,c
   236  0018F2  50E1               	movf	fsr1l,w,c
   237  0018F4  E1FA               	bnz	copy_data1
   238  0018F6                     end_of_initialization:
   239                           	opt stack 0
   240  0018F6                     __end_of__initialization:
   241                           	opt stack 0
   242  0018F6  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   243  0018F8  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   244  0018FA  0100               	movlb	0
   245  0018FC  EF16  F008         	goto	_main	;jump to C main() function
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           postdec1	equ	0xFE5
   252                           fsr1l	equ	0xFE1
   253                           
   254                           	psect	bssCOMRAM
   255  00003C                     __pbssCOMRAM:
   256                           	opt stack 0
   257  00003C                     _counter:
   258                           	opt stack 0
   259  00003C                     	ds	2
   260  00003E                     _sec:
   261                           	opt stack 0
   262  00003E                     	ds	2
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           postdec1	equ	0xFE5
   269                           fsr1l	equ	0xFE1
   270                           
   271                           	psect	dataCOMRAM
   272  000024                     __pdataCOMRAM:
   273                           	opt stack 0
   274  000024                     _scan_code:
   275                           	opt stack 0
   276  000024                     	ds	16
   277  000034                     clr_screen@F6532:
   278                           	opt stack 0
   279  000034                     	ds	4
   280  000038                     cursor_home@F6537:
   281                           	opt stack 0
   282  000038                     	ds	4
   283                           tblptru	equ	0xFF8
   284                           tblptrh	equ	0xFF7
   285                           tblptrl	equ	0xFF6
   286                           tablat	equ	0xFF5
   287                           postinc0	equ	0xFEE
   288                           postdec1	equ	0xFE5
   289                           fsr1l	equ	0xFE1
   290                           
   291                           	psect	dataBANK0
   292  00008D                     __pdataBANK0:
   293                           	opt stack 0
   294  00008D                     _keyValues:
   295                           	opt stack 0
   296  00008D                     	ds	16
   297                           tblptru	equ	0xFF8
   298                           tblptrh	equ	0xFF7
   299                           tblptrl	equ	0xFF6
   300                           tablat	equ	0xFF5
   301                           postinc0	equ	0xFEE
   302                           postdec1	equ	0xFE5
   303                           fsr1l	equ	0xFE1
   304                           
   305                           	psect	cstackBANK0
   306  000060                     __pcstackBANK0:
   307                           	opt stack 0
   308  000060                     Read_KeyPad@value:
   309                           	opt stack 0
   310  000060                     ___lwdiv@counter:
   311                           	opt stack 0
   312  000060                     delay_ms@i:
   313                           	opt stack 0
   314  000060                     delay_us@i:
   315                           	opt stack 0
   316  000060                     ee_read_byte@_data:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x0
   320  000060                     	ds	1
   321  000061                     Read_KeyPad@i:
   322                           	opt stack 0
   323  000061                     ___lwdiv@quotient:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x1
   327  000061                     	ds	1
   328  000062                     LCD8send@c:
   329                           	opt stack 0
   330  000062                     eeWriteChar@address:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x2
   334  000062                     	ds	1
   335  000063                     ?___lwmod:
   336                           	opt stack 0
   337  000063                     Read_KeyPad@Col:
   338                           	opt stack 0
   339  000063                     eeWriteChar@sr:
   340                           	opt stack 0
   341  000063                     lcdWriteLine@data:
   342                           	opt stack 0
   343  000063                     ___lwmod@dividend:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x3
   347  000063                     	ds	1
   348  000064                     Read_KeyPad@code:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x4
   352  000064                     	ds	1
   353  000065                     ??_lcdWriteLine:
   354  000065                     ___lwmod@divisor:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x5
   358  000065                     	ds	2
   359  000067                     ___lwmod@counter:
   360                           	opt stack 0
   361  000067                     lcdWriteLine@i:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x7
   365  000067                     	ds	1
   366  000068                     ?_sprintf:
   367                           	opt stack 0
   368  000068                     sprintf@sp:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x8
   372  000068                     	ds	2
   373  00006A                     sprintf@f:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0xA
   377  00006A                     	ds	4
   378  00006E                     ??_sprintf:
   379                           
   380                           ; 1 bytes @ 0xE
   381  00006E                     	ds	1
   382  00006F                     sprintf@ap:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0xF
   386  00006F                     	ds	2
   387  000071                     sprintf@flag:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x11
   391  000071                     	ds	1
   392  000072                     sprintf@prec:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x12
   396  000072                     	ds	1
   397  000073                     sprintf@val:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x13
   401  000073                     	ds	2
   402  000075                     sprintf@c:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x15
   406  000075                     	ds	1
   407  000076                     writeNum@numStr:
   408                           	opt stack 0
   409                           
   410                           ; 10 bytes @ 0x16
   411  000076                     	ds	10
   412  000080                     writeNum@number:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0x20
   416  000080                     	ds	1
   417  000081                     writeLCD@data:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x21
   421  000081                     	ds	2
   422  000083                     writeLCD@address:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x23
   426  000083                     	ds	1
   427  000084                     ??_main:
   428                           
   429                           ; 1 bytes @ 0x24
   430  000084                     	ds	1
   431  000085                     main@prevKey:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x25
   435  000085                     	ds	1
   436  000086                     main@address:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x26
   440  000086                     	ds	1
   441  000087                     main@writeValue:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x27
   445  000087                     	ds	1
   446  000088                     main@keyNo:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x28
   450  000088                     	ds	2
   451  00008A                     main@key:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x2A
   455  00008A                     	ds	1
   456  00008B                     main@mode:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x2B
   460  00008B                     	ds	2
   461                           tblptru	equ	0xFF8
   462                           tblptrh	equ	0xFF7
   463                           tblptrl	equ	0xFF6
   464                           tablat	equ	0xFF5
   465                           postinc0	equ	0xFEE
   466                           postdec1	equ	0xFE5
   467                           fsr1l	equ	0xFE1
   468                           
   469                           	psect	cstackCOMRAM
   470  000001                     __pcstackCOMRAM:
   471                           	opt stack 0
   472  000001                     ??_HighIsr:
   473  000001                     
   474                           ; 1 bytes @ 0x0
   475  000001                     	ds	14
   476  00000F                     ??_LowIsr:
   477                           
   478                           ; 1 bytes @ 0xE
   479  00000F                     	ds	17
   480  000020                     ?___lwdiv:
   481                           	opt stack 0
   482  000020                     SPI1out@Code:
   483                           	opt stack 0
   484  000020                     delay_ms@x:
   485                           	opt stack 0
   486  000020                     delay_us@x:
   487                           	opt stack 0
   488  000020                     ___lwdiv@dividend:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x1F
   492  000020                     	ds	1
   493  000021                     process_key@code:
   494                           	opt stack 0
   495  000021                     XEERead@address:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x20
   499  000021                     	ds	1
   500  000022                     ??_delay_ms:
   501  000022                     ??_delay_us:
   502  000022                     process_key@i:
   503                           	opt stack 0
   504  000022                     XEERead@buffer:
   505                           	opt stack 0
   506  000022                     ___lwdiv@divisor:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x21
   510  000022                     	ds	1
   511  000023                     LCD8send@mode:
   512                           	opt stack 0
   513  000023                     eeWriteChar@value:
   514                           	opt stack 0
   515  000023                     ee_read_byte@address:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x22
   519  000023                     	ds	1
   520  000024                     tblptru	equ	0xFF8
   521                           tblptrh	equ	0xFF7
   522                           tblptrl	equ	0xFF6
   523                           tablat	equ	0xFF5
   524                           postinc0	equ	0xFEE
   525                           postdec1	equ	0xFE5
   526                           fsr1l	equ	0xFE1
   527                           
   528                           ; 1 bytes @ 0x23
   529 ;;
   530 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   531 ;;
   532 ;; *************** function _main *****************
   533 ;; Defined at:
   534 ;;		line 61 in file "test.c"
   535 ;; Parameters:    Size  Location     Type
   536 ;;		None
   537 ;; Auto vars:     Size  Location     Type
   538 ;;  keyNo           2   40[BANK0 ] int 
   539 ;;  key             1   42[BANK0 ] unsigned char 
   540 ;;  mode            2   43[BANK0 ] unsigned int 
   541 ;;  writeValue      1   39[BANK0 ] unsigned char 
   542 ;;  address         1   38[BANK0 ] unsigned char 
   543 ;;  prevKey         1   37[BANK0 ] unsigned char 
   544 ;; Return value:  Size  Location     Type
   545 ;;                  1    wreg      void 
   546 ;; Registers used:
   547 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   557 ;;Total ram usage:        9 bytes
   558 ;; Hardware stack levels required when called:    7
   559 ;; This function calls:
   560 ;;		_KeyPadinit
   561 ;;		_LCD8init
   562 ;;		_LCD8send
   563 ;;		_Read_KeyPad
   564 ;;		_XEEInit
   565 ;;		_delay_ms
   566 ;;		_eeWriteChar
   567 ;;		_lcdWriteLine
   568 ;;		_writeLCD
   569 ;;		_writeNum
   570 ;; This function is called by:
   571 ;;		Startup code after reset
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           	psect	text0
   576  00102C                     __ptext0:
   577                           	opt stack 0
   578  00102C                     _main:
   579                           	opt stack 24
   580                           
   581                           ;test.c: 62: LCD8init();
   582                           
   583                           ;incstack = 0
   584  00102C  EC6C  F00A         	call	_LCD8init	;wreg free
   585                           
   586                           ;test.c: 63: KeyPadinit();
   587  001030  EC5E  F00D         	call	_KeyPadinit	;wreg free
   588                           
   589                           ;test.c: 64: XEEInit();
   590  001034  EC1F  F00D         	call	_XEEInit	;wreg free
   591                           
   592                           ;test.c: 66: delay_ms(1000);
   593  001038  0E03               	movlw	3
   594  00103A  6E21               	movwf	delay_ms@x+1,c
   595  00103C  0EE8               	movlw	232
   596  00103E  6E20               	movwf	delay_ms@x,c
   597  001040  EC9E  F00C         	call	_delay_ms	;wreg free
   598                           
   599                           ;test.c: 68: TRISJ = 0x00;
   600  001044  0E00               	movlw	0
   601  001046  6E9A               	movwf	3994,c	;volatile
   602                           
   603                           ;test.c: 69: PORTJ = 0b0;
   604  001048  0E00               	movlw	0
   605  00104A  6E88               	movwf	3976,c	;volatile
   606                           
   607                           ;test.c: 71: unsigned char address = 0;
   608  00104C  0E00               	movlw	0
   609  00104E  0100               	movlb	0	; () banked
   610  001050  6F86               	movwf	main@address& (0+255),b
   611                           
   612                           ; BSR set to: 0
   613                           ;test.c: 72: unsigned char writeValue = 0;
   614  001052  0E00               	movlw	0
   615  001054  0100               	movlb	0	; () banked
   616  001056  6F87               	movwf	main@writeValue& (0+255),b
   617                           
   618                           ; BSR set to: 0
   619                           ;test.c: 73: unsigned int mode = READ_MODE;
   620  001058  0E0F               	movlw	low _READ_MODE
   621  00105A  6EF6               	movwf	tblptrl,c
   622  00105C                     	if	1	;There is more than 1 active tblptr byte
   623  00105C  0E10               	movlw	high _READ_MODE
   624  00105E  6EF7               	movwf	tblptrh,c
   625  001060                     	endif
   626  001060                     	if	1	;There are 3 active tblptr bytes
   627  001060  0E00               	movlw	low (_READ_MODE shr (0+16))
   628  001062  6EF8               	movwf	tblptru,c
   629  001064                     	endif
   630  001064  0009               	tblrd		*+
   631  001066  CFF5 F08B          	movff	tablat,main@mode
   632  00106A  000A               	tblrd		*-
   633  00106C  CFF5 F08C          	movff	tablat,main@mode+1
   634                           
   635                           ; BSR set to: 0
   636                           ;test.c: 74: unsigned char prevKey = 0xFF;
   637  001070  0100               	movlb	0	; () banked
   638  001072  6985               	setf	main@prevKey& (0+255),b
   639  001074                     l2449:
   640                           
   641                           ;test.c: 77: int keyNo = Read_KeyPad();
   642  001074  EC5F  F00B         	call	_Read_KeyPad	;wreg free
   643  001078  0100               	movlb	0	; () banked
   644  00107A  6F84               	movwf	??_main& (0+255),b
   645  00107C  0100               	movlb	0	; () banked
   646  00107E  5184               	movf	??_main& (0+255),w,b
   647  001080  0100               	movlb	0	; () banked
   648  001082  6F88               	movwf	main@keyNo& (0+255),b
   649  001084  6B89               	clrf	(main@keyNo+1)& (0+255),b
   650                           
   651                           ; BSR set to: 0
   652                           ;test.c: 78: unsigned char key = keyValues[keyNo];
   653  001086  0E8D               	movlw	low _keyValues
   654  001088  0100               	movlb	0	; () banked
   655  00108A  2588               	addwf	main@keyNo& (0+255),w,b
   656  00108C  6ED9               	movwf	fsr2l,c
   657  00108E  0E00               	movlw	high _keyValues
   658  001090  0100               	movlb	0	; () banked
   659  001092  2189               	addwfc	(main@keyNo+1)& (0+255),w,b
   660  001094  6EDA               	movwf	fsr2h,c
   661  001096  50DF               	movf	indf2,w,c
   662  001098  0100               	movlb	0	; () banked
   663  00109A  6F8A               	movwf	main@key& (0+255),b
   664                           
   665                           ; BSR set to: 0
   666                           ;test.c: 80: if (key != prevKey) {
   667  00109C  0100               	movlb	0	; () banked
   668  00109E  5185               	movf	main@prevKey& (0+255),w,b
   669  0010A0  0100               	movlb	0	; () banked
   670  0010A2  198A               	xorwf	main@key& (0+255),w,b
   671  0010A4  B4D8               	btfsc	status,2,c
   672  0010A6  D147               	goto	l2531
   673                           
   674                           ; BSR set to: 0
   675                           ;test.c: 81: PORTJ++;
   676  0010A8  2A88               	incf	3976,f,c	;volatile
   677                           
   678                           ; BSR set to: 0
   679                           ;test.c: 83: if (keyNo >= 0 && 10 > keyNo) {
   680  0010AA  0100               	movlb	0	; () banked
   681  0010AC  BF89               	btfsc	(main@keyNo+1)& (0+255),7,b
   682  0010AE  D02C               	goto	l2467
   683                           
   684                           ; BSR set to: 0
   685  0010B0  0100               	movlb	0	; () banked
   686  0010B2  BF89               	btfsc	(main@keyNo+1)& (0+255),7,b
   687  0010B4  D008               	goto	l2461
   688  0010B6  0100               	movlb	0	; () banked
   689  0010B8  5189               	movf	(main@keyNo+1)& (0+255),w,b
   690  0010BA  E126               	bnz	l2467
   691  0010BC  0E0A               	movlw	10
   692  0010BE  0100               	movlb	0	; () banked
   693  0010C0  5D88               	subwf	main@keyNo& (0+255),w,b
   694  0010C2  B0D8               	btfsc	status,0,c
   695  0010C4  D021               	goto	l2467
   696  0010C6                     l2461:
   697                           
   698                           ; BSR set to: 0
   699                           ;test.c: 84: if (mode == READ_MODE) {
   700  0010C6  0E0F               	movlw	low _READ_MODE
   701  0010C8  6EF6               	movwf	tblptrl,c
   702  0010CA                     	if	1	;There is more than 1 active tblptr byte
   703  0010CA  0E10               	movlw	high _READ_MODE
   704  0010CC  6EF7               	movwf	tblptrh,c
   705  0010CE                     	endif
   706  0010CE                     	if	1	;There are 3 active tblptr bytes
   707  0010CE  0E00               	movlw	low (_READ_MODE shr (0+16))
   708  0010D0  6EF8               	movwf	tblptru,c
   709  0010D2                     	endif
   710  0010D2  0100               	movlb	0	; () banked
   711  0010D4  518B               	movf	main@mode& (0+255),w,b
   712  0010D6  0009               	tblrd		*+
   713  0010D8  18F5               	xorwf	tablat,w,c
   714  0010DA  E10F               	bnz	l2465
   715  0010DC  0100               	movlb	0	; () banked
   716  0010DE  518C               	movf	(main@mode+1)& (0+255),w,b
   717  0010E0  0009               	tblrd		*+
   718  0010E2  18F5               	xorwf	tablat,w,c
   719  0010E4  A4D8               	btfss	status,2,c
   720  0010E6  D009               	goto	l2465
   721                           
   722                           ; BSR set to: 0
   723                           ;test.c: 85: address = address * 10 + keyNo;
   724  0010E8  0100               	movlb	0	; () banked
   725  0010EA  5186               	movf	main@address& (0+255),w,b
   726  0010EC  0D0A               	mullw	10
   727  0010EE  50F3               	movf	prodl,w,c
   728  0010F0  0100               	movlb	0	; () banked
   729  0010F2  2588               	addwf	main@keyNo& (0+255),w,b
   730  0010F4  0100               	movlb	0	; () banked
   731  0010F6  6F86               	movwf	main@address& (0+255),b
   732                           
   733                           ;test.c: 86: } else {
   734  0010F8  D0E3               	goto	l2513
   735  0010FA                     l2465:
   736                           
   737                           ; BSR set to: 0
   738                           ;test.c: 87: writeValue = writeValue * 10 + keyNo;
   739  0010FA  0100               	movlb	0	; () banked
   740  0010FC  5187               	movf	main@writeValue& (0+255),w,b
   741  0010FE  0D0A               	mullw	10
   742  001100  50F3               	movf	prodl,w,c
   743  001102  0100               	movlb	0	; () banked
   744  001104  2588               	addwf	main@keyNo& (0+255),w,b
   745  001106  D02B               	goto	L1
   746  001108                     l2467:
   747                           
   748                           ; BSR set to: 0
   749  001108  0E41               	movlw	65
   750  00110A  0100               	movlb	0	; () banked
   751  00110C  198A               	xorwf	main@key& (0+255),w,b
   752  00110E  A4D8               	btfss	status,2,c
   753  001110  D029               	goto	l2477
   754                           
   755                           ; BSR set to: 0
   756                           ;test.c: 91: if (mode == READ_MODE) { address = 0; }
   757  001112  0E0F               	movlw	low _READ_MODE
   758  001114  6EF6               	movwf	tblptrl,c
   759  001116                     	if	1	;There is more than 1 active tblptr byte
   760  001116  0E10               	movlw	high _READ_MODE
   761  001118  6EF7               	movwf	tblptrh,c
   762  00111A                     	endif
   763  00111A                     	if	1	;There are 3 active tblptr bytes
   764  00111A  0E00               	movlw	low (_READ_MODE shr (0+16))
   765  00111C  6EF8               	movwf	tblptru,c
   766  00111E                     	endif
   767  00111E  0100               	movlb	0	; () banked
   768  001120  518B               	movf	main@mode& (0+255),w,b
   769  001122  0009               	tblrd		*+
   770  001124  18F5               	xorwf	tablat,w,c
   771  001126  E109               	bnz	l2473
   772  001128  0100               	movlb	0	; () banked
   773  00112A  518C               	movf	(main@mode+1)& (0+255),w,b
   774  00112C  0009               	tblrd		*+
   775  00112E  18F5               	xorwf	tablat,w,c
   776  001130  A4D8               	btfss	status,2,c
   777  001132  D003               	goto	l2473
   778                           
   779                           ; BSR set to: 0
   780  001134  0E00               	movlw	0
   781  001136  0100               	movlb	0	; () banked
   782  001138  6F86               	movwf	main@address& (0+255),b
   783  00113A                     l2473:
   784                           
   785                           ; BSR set to: 0
   786                           ;test.c: 92: if (mode == WRITE_MODE) { writeValue = 0; }
   787  00113A  0E11               	movlw	low _WRITE_MODE
   788  00113C  6EF6               	movwf	tblptrl,c
   789  00113E                     	if	1	;There is more than 1 active tblptr byte
   790  00113E  0E10               	movlw	high _WRITE_MODE
   791  001140  6EF7               	movwf	tblptrh,c
   792  001142                     	endif
   793  001142                     	if	1	;There are 3 active tblptr bytes
   794  001142  0E00               	movlw	low (_WRITE_MODE shr (0+16))
   795  001144  6EF8               	movwf	tblptru,c
   796  001146                     	endif
   797  001146  0100               	movlb	0	; () banked
   798  001148  518B               	movf	main@mode& (0+255),w,b
   799  00114A  0009               	tblrd		*+
   800  00114C  18F5               	xorwf	tablat,w,c
   801  00114E  E105               	bnz	u1771
   802  001150  0100               	movlb	0	; () banked
   803  001152  518C               	movf	(main@mode+1)& (0+255),w,b
   804  001154  0009               	tblrd		*+
   805  001156  18F5               	xorwf	tablat,w,c
   806  001158  A4D8               	btfss	status,2,c
   807  00115A                     u1771:
   808  00115A  D0B2               	goto	l2513
   809                           
   810                           ; BSR set to: 0
   811  00115C  0E00               	movlw	0
   812  00115E                     L1:
   813  00115E  0100               	movlb	0	; () banked
   814  001160  6F87               	movwf	main@writeValue& (0+255),b
   815                           
   816                           ; BSR set to: 0
   817                           ;test.c: 94: } else if (key == 'B') {
   818  001162  D0AE               	goto	l2513
   819  001164                     l2477:
   820                           
   821                           ; BSR set to: 0
   822  001164  0E42               	movlw	66
   823  001166  0100               	movlb	0	; () banked
   824  001168  198A               	xorwf	main@key& (0+255),w,b
   825  00116A  A4D8               	btfss	status,2,c
   826  00116C  D027               	goto	l2487
   827                           
   828                           ; BSR set to: 0
   829                           ;test.c: 95: if (mode == READ_MODE) { address++; }
   830  00116E  0E0F               	movlw	low _READ_MODE
   831  001170  6EF6               	movwf	tblptrl,c
   832  001172                     	if	1	;There is more than 1 active tblptr byte
   833  001172  0E10               	movlw	high _READ_MODE
   834  001174  6EF7               	movwf	tblptrh,c
   835  001176                     	endif
   836  001176                     	if	1	;There are 3 active tblptr bytes
   837  001176  0E00               	movlw	low (_READ_MODE shr (0+16))
   838  001178  6EF8               	movwf	tblptru,c
   839  00117A                     	endif
   840  00117A  0100               	movlb	0	; () banked
   841  00117C  518B               	movf	main@mode& (0+255),w,b
   842  00117E  0009               	tblrd		*+
   843  001180  18F5               	xorwf	tablat,w,c
   844  001182  E108               	bnz	l2483
   845  001184  0100               	movlb	0	; () banked
   846  001186  518C               	movf	(main@mode+1)& (0+255),w,b
   847  001188  0009               	tblrd		*+
   848  00118A  18F5               	xorwf	tablat,w,c
   849  00118C  A4D8               	btfss	status,2,c
   850  00118E  D002               	goto	l2483
   851                           
   852                           ; BSR set to: 0
   853  001190  0100               	movlb	0	; () banked
   854  001192  2B86               	incf	main@address& (0+255),f,b
   855  001194                     l2483:
   856                           
   857                           ; BSR set to: 0
   858                           ;test.c: 96: if (mode == WRITE_MODE) { writeValue++; }
   859  001194  0E11               	movlw	low _WRITE_MODE
   860  001196  6EF6               	movwf	tblptrl,c
   861  001198                     	if	1	;There is more than 1 active tblptr byte
   862  001198  0E10               	movlw	high _WRITE_MODE
   863  00119A  6EF7               	movwf	tblptrh,c
   864  00119C                     	endif
   865  00119C                     	if	1	;There are 3 active tblptr bytes
   866  00119C  0E00               	movlw	low (_WRITE_MODE shr (0+16))
   867  00119E  6EF8               	movwf	tblptru,c
   868  0011A0                     	endif
   869  0011A0  0100               	movlb	0	; () banked
   870  0011A2  518B               	movf	main@mode& (0+255),w,b
   871  0011A4  0009               	tblrd		*+
   872  0011A6  18F5               	xorwf	tablat,w,c
   873  0011A8  E105               	bnz	u1801
   874  0011AA  0100               	movlb	0	; () banked
   875  0011AC  518C               	movf	(main@mode+1)& (0+255),w,b
   876  0011AE  0009               	tblrd		*+
   877  0011B0  18F5               	xorwf	tablat,w,c
   878  0011B2  A4D8               	btfss	status,2,c
   879  0011B4                     u1801:
   880  0011B4  D085               	goto	l2513
   881                           
   882                           ; BSR set to: 0
   883  0011B6  0100               	movlb	0	; () banked
   884  0011B8  2B87               	incf	main@writeValue& (0+255),f,b
   885                           
   886                           ; BSR set to: 0
   887                           ;test.c: 98: } else if (key == 'C') {
   888  0011BA  D082               	goto	l2513
   889  0011BC                     l2487:
   890                           
   891                           ; BSR set to: 0
   892  0011BC  0E43               	movlw	67
   893  0011BE  0100               	movlb	0	; () banked
   894  0011C0  198A               	xorwf	main@key& (0+255),w,b
   895  0011C2  A4D8               	btfss	status,2,c
   896  0011C4  D027               	goto	l2497
   897                           
   898                           ; BSR set to: 0
   899                           ;test.c: 99: if (mode == READ_MODE) { address--; }
   900  0011C6  0E0F               	movlw	low _READ_MODE
   901  0011C8  6EF6               	movwf	tblptrl,c
   902  0011CA                     	if	1	;There is more than 1 active tblptr byte
   903  0011CA  0E10               	movlw	high _READ_MODE
   904  0011CC  6EF7               	movwf	tblptrh,c
   905  0011CE                     	endif
   906  0011CE                     	if	1	;There are 3 active tblptr bytes
   907  0011CE  0E00               	movlw	low (_READ_MODE shr (0+16))
   908  0011D0  6EF8               	movwf	tblptru,c
   909  0011D2                     	endif
   910  0011D2  0100               	movlb	0	; () banked
   911  0011D4  518B               	movf	main@mode& (0+255),w,b
   912  0011D6  0009               	tblrd		*+
   913  0011D8  18F5               	xorwf	tablat,w,c
   914  0011DA  E108               	bnz	l2493
   915  0011DC  0100               	movlb	0	; () banked
   916  0011DE  518C               	movf	(main@mode+1)& (0+255),w,b
   917  0011E0  0009               	tblrd		*+
   918  0011E2  18F5               	xorwf	tablat,w,c
   919  0011E4  A4D8               	btfss	status,2,c
   920  0011E6  D002               	goto	l2493
   921                           
   922                           ; BSR set to: 0
   923  0011E8  0100               	movlb	0	; () banked
   924  0011EA  0786               	decf	main@address& (0+255),f,b
   925  0011EC                     l2493:
   926                           
   927                           ; BSR set to: 0
   928                           ;test.c: 100: if (mode == WRITE_MODE) { writeValue--; }
   929  0011EC  0E11               	movlw	low _WRITE_MODE
   930  0011EE  6EF6               	movwf	tblptrl,c
   931  0011F0                     	if	1	;There is more than 1 active tblptr byte
   932  0011F0  0E10               	movlw	high _WRITE_MODE
   933  0011F2  6EF7               	movwf	tblptrh,c
   934  0011F4                     	endif
   935  0011F4                     	if	1	;There are 3 active tblptr bytes
   936  0011F4  0E00               	movlw	low (_WRITE_MODE shr (0+16))
   937  0011F6  6EF8               	movwf	tblptru,c
   938  0011F8                     	endif
   939  0011F8  0100               	movlb	0	; () banked
   940  0011FA  518B               	movf	main@mode& (0+255),w,b
   941  0011FC  0009               	tblrd		*+
   942  0011FE  18F5               	xorwf	tablat,w,c
   943  001200  E15F               	bnz	l2513
   944  001202  0100               	movlb	0	; () banked
   945  001204  518C               	movf	(main@mode+1)& (0+255),w,b
   946  001206  0009               	tblrd		*+
   947  001208  18F5               	xorwf	tablat,w,c
   948  00120A  A4D8               	btfss	status,2,c
   949  00120C  D059               	goto	l2513
   950                           
   951                           ; BSR set to: 0
   952  00120E  0100               	movlb	0	; () banked
   953  001210  0787               	decf	main@writeValue& (0+255),f,b
   954                           
   955                           ; BSR set to: 0
   956                           ;test.c: 102: } else if (key == 'D') {
   957  001212  D056               	goto	l2513
   958  001214                     l2497:
   959                           
   960                           ; BSR set to: 0
   961  001214  0E44               	movlw	68
   962  001216  0100               	movlb	0	; () banked
   963  001218  198A               	xorwf	main@key& (0+255),w,b
   964  00121A  A4D8               	btfss	status,2,c
   965  00121C  D035               	goto	l2507
   966                           
   967                           ; BSR set to: 0
   968                           ;test.c: 103: if (mode == READ_MODE) { mode = WRITE_MODE; }
   969  00121E  0E0F               	movlw	low _READ_MODE
   970  001220  6EF6               	movwf	tblptrl,c
   971  001222                     	if	1	;There is more than 1 active tblptr byte
   972  001222  0E10               	movlw	high _READ_MODE
   973  001224  6EF7               	movwf	tblptrh,c
   974  001226                     	endif
   975  001226                     	if	1	;There are 3 active tblptr bytes
   976  001226  0E00               	movlw	low (_READ_MODE shr (0+16))
   977  001228  6EF8               	movwf	tblptru,c
   978  00122A                     	endif
   979  00122A  0100               	movlb	0	; () banked
   980  00122C  518B               	movf	main@mode& (0+255),w,b
   981  00122E  0009               	tblrd		*+
   982  001230  18F5               	xorwf	tablat,w,c
   983  001232  E10C               	bnz	l2503
   984  001234  0100               	movlb	0	; () banked
   985  001236  518C               	movf	(main@mode+1)& (0+255),w,b
   986  001238  0009               	tblrd		*+
   987  00123A  18F5               	xorwf	tablat,w,c
   988  00123C  A4D8               	btfss	status,2,c
   989  00123E  D006               	goto	l2503
   990                           
   991                           ; BSR set to: 0
   992  001240  0E11               	movlw	low _WRITE_MODE
   993  001242  6EF6               	movwf	tblptrl,c
   994  001244                     	if	1	;There is more than 1 active tblptr byte
   995  001244  0E10               	movlw	high _WRITE_MODE
   996  001246  6EF7               	movwf	tblptrh,c
   997  001248                     	endif
   998  001248                     	if	1	;There are 3 active tblptr bytes
   999  001248  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1000  00124A  D016               	goto	L2
  1001  00124C                     l2503:
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;test.c: 104: else if (mode == WRITE_MODE) { mode = READ_MODE; }
  1005  00124C  0E11               	movlw	low _WRITE_MODE
  1006  00124E  6EF6               	movwf	tblptrl,c
  1007  001250                     	if	1	;There is more than 1 active tblptr byte
  1008  001250  0E10               	movlw	high _WRITE_MODE
  1009  001252  6EF7               	movwf	tblptrh,c
  1010  001254                     	endif
  1011  001254                     	if	1	;There are 3 active tblptr bytes
  1012  001254  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1013  001256  6EF8               	movwf	tblptru,c
  1014  001258                     	endif
  1015  001258  0100               	movlb	0	; () banked
  1016  00125A  518B               	movf	main@mode& (0+255),w,b
  1017  00125C  0009               	tblrd		*+
  1018  00125E  18F5               	xorwf	tablat,w,c
  1019  001260  E12F               	bnz	l2513
  1020  001262  0100               	movlb	0	; () banked
  1021  001264  518C               	movf	(main@mode+1)& (0+255),w,b
  1022  001266  0009               	tblrd		*+
  1023  001268  18F5               	xorwf	tablat,w,c
  1024  00126A  A4D8               	btfss	status,2,c
  1025  00126C  D029               	goto	l2513
  1026                           
  1027                           ; BSR set to: 0
  1028  00126E  0E0F               	movlw	low _READ_MODE
  1029  001270  6EF6               	movwf	tblptrl,c
  1030  001272                     	if	1	;There is more than 1 active tblptr byte
  1031  001272  0E10               	movlw	high _READ_MODE
  1032  001274  6EF7               	movwf	tblptrh,c
  1033  001276                     	endif
  1034  001276                     	if	1	;There are 3 active tblptr bytes
  1035  001276  0E00               	movlw	low (_READ_MODE shr (0+16))
  1036  001278                     L2:
  1037  001278  6EF8               	movwf	tblptru,c
  1038  00127A                     	endif
  1039  00127A  0009               	tblrd		*+
  1040  00127C  CFF5 F08B          	movff	tablat,main@mode
  1041  001280  000A               	tblrd		*-
  1042  001282  CFF5 F08C          	movff	tablat,main@mode+1
  1043                           
  1044                           ; BSR set to: 0
  1045                           ;test.c: 106: } else if (key == '*' && mode == WRITE_MODE) {
  1046                           
  1047                           ; BSR set to: 0
  1048  001286  D01C               	goto	l2513
  1049  001288                     l2507:
  1050                           
  1051                           ; BSR set to: 0
  1052  001288  0E2A               	movlw	42
  1053  00128A  0100               	movlb	0	; () banked
  1054  00128C  198A               	xorwf	main@key& (0+255),w,b
  1055  00128E  A4D8               	btfss	status,2,c
  1056  001290  D017               	goto	l2513
  1057                           
  1058                           ; BSR set to: 0
  1059  001292  0E11               	movlw	low _WRITE_MODE
  1060  001294  6EF6               	movwf	tblptrl,c
  1061  001296                     	if	1	;There is more than 1 active tblptr byte
  1062  001296  0E10               	movlw	high _WRITE_MODE
  1063  001298  6EF7               	movwf	tblptrh,c
  1064  00129A                     	endif
  1065  00129A                     	if	1	;There are 3 active tblptr bytes
  1066  00129A  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1067  00129C  6EF8               	movwf	tblptru,c
  1068  00129E                     	endif
  1069  00129E  0100               	movlb	0	; () banked
  1070  0012A0  518B               	movf	main@mode& (0+255),w,b
  1071  0012A2  0009               	tblrd		*+
  1072  0012A4  18F5               	xorwf	tablat,w,c
  1073  0012A6  E10C               	bnz	l2513
  1074  0012A8  0100               	movlb	0	; () banked
  1075  0012AA  518C               	movf	(main@mode+1)& (0+255),w,b
  1076  0012AC  0009               	tblrd		*+
  1077  0012AE  18F5               	xorwf	tablat,w,c
  1078  0012B0  A4D8               	btfss	status,2,c
  1079  0012B2  D006               	goto	l2513
  1080                           
  1081                           ; BSR set to: 0
  1082                           ;test.c: 107: eeWriteChar(address, writeValue);
  1083  0012B4  C087  F023         	movff	main@writeValue,eeWriteChar@value
  1084  0012B8  0100               	movlb	0	; () banked
  1085  0012BA  5186               	movf	main@address& (0+255),w,b
  1086  0012BC  EC9A  F00B         	call	_eeWriteChar
  1087  0012C0                     l2513:
  1088                           
  1089                           ;test.c: 108: }
  1090                           ;test.c: 110: if (keyNo != 0xFF) {
  1091  0012C0  0100               	movlb	0	; () banked
  1092  0012C2  2988               	incf	main@keyNo& (0+255),w,b
  1093  0012C4  0100               	movlb	0	; () banked
  1094  0012C6  1189               	iorwf	(main@keyNo+1)& (0+255),w,b
  1095  0012C8  B4D8               	btfsc	status,2,c
  1096  0012CA  D004               	goto	l2517
  1097                           
  1098                           ; BSR set to: 0
  1099                           ;test.c: 111: writeLCD(address);
  1100  0012CC  0100               	movlb	0	; () banked
  1101  0012CE  5186               	movf	main@address& (0+255),w,b
  1102  0012D0  EC2C  F00C         	call	_writeLCD
  1103  0012D4                     l2517:
  1104                           
  1105                           ;test.c: 112: }
  1106                           ;test.c: 114: LCD8send(0xC0, 0);
  1107  0012D4  0E00               	movlw	0
  1108  0012D6  6E23               	movwf	LCD8send@mode,c
  1109  0012D8  0EC0               	movlw	192
  1110  0012DA  EC80  F00C         	call	_LCD8send
  1111                           
  1112                           ;test.c: 115: LCD8send("WR"[mode], 1);
  1113  0012DE  0E01               	movlw	1
  1114  0012E0  6E23               	movwf	LCD8send@mode,c
  1115  0012E2  0E1F               	movlw	low STR_4
  1116  0012E4  0100               	movlb	0	; () banked
  1117  0012E6  258B               	addwf	main@mode& (0+255),w,b
  1118  0012E8  6EF6               	movwf	tblptrl,c
  1119  0012EA  0E10               	movlw	high STR_4
  1120  0012EC  218C               	addwfc	(main@mode+1)& (0+255),w,b
  1121  0012EE  6EF7               	movwf	tblptrh,c
  1122  0012F0                     	if	1	;There are 3 active tblptr bytes
  1123  0012F0  6AF8               	clrf	tblptru,c
  1124  0012F2  0E00               	movlw	low (__mediumconst shr (0+16))
  1125  0012F4  22F8               	addwfc	tblptru,f,c
  1126  0012F6                     	endif
  1127  0012F6  0008               	tblrd		*
  1128  0012F8  50F5               	movf	tablat,w,c
  1129  0012FA  EC80  F00C         	call	_LCD8send
  1130                           
  1131                           ;test.c: 116: lcdWriteLine(" key=");
  1132  0012FE  0E19               	movlw	low STR_5
  1133  001300  0100               	movlb	0	; () banked
  1134  001302  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1135  001304  0E10               	movlw	high STR_5
  1136  001306  0100               	movlb	0	; () banked
  1137  001308  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1138  00130A  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1139                           
  1140                           ;test.c: 118: LCD8send(key, 1);
  1141  00130E  0E01               	movlw	1
  1142  001310  6E23               	movwf	LCD8send@mode,c
  1143  001312  0100               	movlb	0	; () banked
  1144  001314  518A               	movf	main@key& (0+255),w,b
  1145  001316  EC80  F00C         	call	_LCD8send
  1146                           
  1147                           ;test.c: 119: lcdWriteLine(" val=");
  1148  00131A  0E13               	movlw	low STR_6
  1149  00131C  0100               	movlb	0	; () banked
  1150  00131E  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1151  001320  0E10               	movlw	high STR_6
  1152  001322  0100               	movlb	0	; () banked
  1153  001324  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1154  001326  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1155                           
  1156                           ;test.c: 120: writeNum(writeValue);
  1157  00132A  0100               	movlb	0	; () banked
  1158  00132C  5187               	movf	main@writeValue& (0+255),w,b
  1159  00132E  ECBC  F00C         	call	_writeNum
  1160                           
  1161                           ;test.c: 122: prevKey = key;
  1162  001332  C08A  F085         	movff	main@key,main@prevKey
  1163  001336                     l2531:
  1164                           
  1165                           ;test.c: 123: }
  1166                           ;test.c: 125: delay_ms(100);
  1167  001336  0E00               	movlw	0
  1168  001338  6E21               	movwf	delay_ms@x+1,c
  1169  00133A  0E64               	movlw	100
  1170  00133C  6E20               	movwf	delay_ms@x,c
  1171  00133E  EC9E  F00C         	call	_delay_ms	;wreg free
  1172  001342  D698               	goto	l2449
  1173  001344                     __end_of_main:
  1174                           	opt stack 0
  1175                           tblptru	equ	0xFF8
  1176                           tblptrh	equ	0xFF7
  1177                           tblptrl	equ	0xFF6
  1178                           tablat	equ	0xFF5
  1179                           prodl	equ	0xFF3
  1180                           postinc0	equ	0xFEE
  1181                           postdec1	equ	0xFE5
  1182                           fsr1l	equ	0xFE1
  1183                           indf2	equ	0xFDF
  1184                           fsr2h	equ	0xFDA
  1185                           fsr2l	equ	0xFD9
  1186                           status	equ	0xFD8
  1187                           
  1188 ;; *************** function _writeLCD *****************
  1189 ;; Defined at:
  1190 ;;		line 49 in file "test.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  address         1    wreg     unsigned char 
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;  address         1   35[BANK0 ] unsigned char 
  1195 ;;  data            2   33[BANK0 ] PTR unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;Total ram usage:        3 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; Hardware stack levels required when called:    6
  1212 ;; This function calls:
  1213 ;;		_LCD8send
  1214 ;;		_ee_read_byte
  1215 ;;		_lcdWriteLine
  1216 ;;		_writeNum
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text1
  1223  001858                     __ptext1:
  1224                           	opt stack 0
  1225  001858                     _writeLCD:
  1226                           	opt stack 24
  1227                           
  1228                           ;incstack = 0
  1229                           ;writeLCD@address stored from wreg
  1230  001858  0100               	movlb	0	; () banked
  1231  00185A  6F83               	movwf	writeLCD@address& (0+255),b
  1232                           
  1233                           ;test.c: 50: unsigned char *data;
  1234                           ;test.c: 51: LCD8send(0x01, 0);
  1235  00185C  0E00               	movlw	0
  1236  00185E  6E23               	movwf	LCD8send@mode,c
  1237  001860  0E01               	movlw	1
  1238  001862  EC80  F00C         	call	_LCD8send
  1239                           
  1240                           ;test.c: 52: ee_read_byte(address, data);
  1241  001866  C081  F060         	movff	writeLCD@data,ee_read_byte@_data
  1242  00186A  C082  F061         	movff	writeLCD@data+1,ee_read_byte@_data+1
  1243  00186E  0100               	movlb	0	; () banked
  1244  001870  5183               	movf	writeLCD@address& (0+255),w,b
  1245  001872  EC38  F00D         	call	_ee_read_byte
  1246                           
  1247                           ;test.c: 54: lcdWriteLine("#");
  1248  001876  0E28               	movlw	low STR_2
  1249  001878  0100               	movlb	0	; () banked
  1250  00187A  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1251  00187C  0E10               	movlw	high STR_2
  1252  00187E  0100               	movlb	0	; () banked
  1253  001880  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1254  001882  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1255                           
  1256                           ;test.c: 55: writeNum(address);
  1257  001886  0100               	movlb	0	; () banked
  1258  001888  5183               	movf	writeLCD@address& (0+255),w,b
  1259  00188A  ECBC  F00C         	call	_writeNum
  1260                           
  1261                           ;test.c: 57: lcdWriteLine(" V");
  1262  00188E  0E22               	movlw	low STR_3
  1263  001890  0100               	movlb	0	; () banked
  1264  001892  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1265  001894  0E10               	movlw	high STR_3
  1266  001896  0100               	movlb	0	; () banked
  1267  001898  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1268  00189A  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1269                           
  1270                           ;test.c: 58: writeNum(*data);
  1271  00189E  C081  FFD9         	movff	writeLCD@data,fsr2l
  1272  0018A2  C082  FFDA         	movff	writeLCD@data+1,fsr2h
  1273  0018A6  50DF               	movf	indf2,w,c
  1274  0018A8  ECBC  F00C         	call	_writeNum
  1275  0018AC  0012               	return		;funcret
  1276  0018AE                     __end_of_writeLCD:
  1277                           	opt stack 0
  1278                           tblptru	equ	0xFF8
  1279                           tblptrh	equ	0xFF7
  1280                           tblptrl	equ	0xFF6
  1281                           tablat	equ	0xFF5
  1282                           prodl	equ	0xFF3
  1283                           postinc0	equ	0xFEE
  1284                           postdec1	equ	0xFE5
  1285                           fsr1l	equ	0xFE1
  1286                           indf2	equ	0xFDF
  1287                           fsr2h	equ	0xFDA
  1288                           fsr2l	equ	0xFD9
  1289                           status	equ	0xFD8
  1290                           
  1291 ;; *************** function _writeNum *****************
  1292 ;; Defined at:
  1293 ;;		line 43 in file "test.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;  number          1    wreg     unsigned char 
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;  number          1   32[BANK0 ] unsigned char 
  1298 ;;  numStr         10   22[BANK0 ] unsigned char [10]
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1309 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1312 ;;Total ram usage:       11 bytes
  1313 ;; Hardware stack levels used:    1
  1314 ;; Hardware stack levels required when called:    5
  1315 ;; This function calls:
  1316 ;;		_lcdWriteLine
  1317 ;;		_sprintf
  1318 ;; This function is called by:
  1319 ;;		_writeLCD
  1320 ;;		_main
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	text2
  1325  001978                     __ptext2:
  1326                           	opt stack 0
  1327  001978                     _writeNum:
  1328                           	opt stack 25
  1329                           
  1330                           ;incstack = 0
  1331                           ;writeNum@number stored from wreg
  1332  001978  0100               	movlb	0	; () banked
  1333  00197A  6F80               	movwf	writeNum@number& (0+255),b
  1334                           
  1335                           ;test.c: 44: char numStr[10];
  1336                           ;test.c: 45: sprintf(numStr, "%i", number);
  1337  00197C  0E76               	movlw	low writeNum@numStr
  1338  00197E  0100               	movlb	0	; () banked
  1339  001980  6F68               	movwf	sprintf@sp& (0+255),b
  1340  001982  0E00               	movlw	high writeNum@numStr
  1341  001984  0100               	movlb	0	; () banked
  1342  001986  6F69               	movwf	(sprintf@sp+1)& (0+255),b
  1343  001988  0E25               	movlw	low STR_1
  1344  00198A  0100               	movlb	0	; () banked
  1345  00198C  6F6A               	movwf	sprintf@f& (0+255),b
  1346  00198E  0E10               	movlw	high STR_1
  1347  001990  0100               	movlb	0	; () banked
  1348  001992  6F6B               	movwf	(sprintf@f+1)& (0+255),b
  1349  001994  C080  F06C         	movff	writeNum@number,?_sprintf+4
  1350  001998  0100               	movlb	0	; () banked
  1351  00199A  6B6D               	clrf	(?_sprintf+5)& (0+255),b
  1352  00199C  ECA2  F009         	call	_sprintf	;wreg free
  1353                           
  1354                           ;test.c: 46: lcdWriteLine(numStr);
  1355  0019A0  0E76               	movlw	low writeNum@numStr
  1356  0019A2  0100               	movlb	0	; () banked
  1357  0019A4  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1358  0019A6  0E00               	movlw	high writeNum@numStr
  1359  0019A8  0100               	movlb	0	; () banked
  1360  0019AA  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1361  0019AC  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1362  0019B0  0012               	return		;funcret
  1363  0019B2                     __end_of_writeNum:
  1364                           	opt stack 0
  1365                           tblptru	equ	0xFF8
  1366                           tblptrh	equ	0xFF7
  1367                           tblptrl	equ	0xFF6
  1368                           tablat	equ	0xFF5
  1369                           prodl	equ	0xFF3
  1370                           postinc0	equ	0xFEE
  1371                           postdec1	equ	0xFE5
  1372                           fsr1l	equ	0xFE1
  1373                           indf2	equ	0xFDF
  1374                           fsr2h	equ	0xFDA
  1375                           fsr2l	equ	0xFD9
  1376                           status	equ	0xFD8
  1377                           
  1378 ;; *************** function _sprintf *****************
  1379 ;; Defined at:
  1380 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  sp              2    8[BANK0 ] PTR unsigned char 
  1383 ;;		 -> writeNum@numStr(10), 
  1384 ;;  f               2   10[BANK0 ] PTR const unsigned char 
  1385 ;;		 -> STR_1(3), 
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  tmpval          4    0        struct .
  1388 ;;  cp              3    0        PTR const unsigned char 
  1389 ;;  val             2   19[BANK0 ] unsigned int 
  1390 ;;  ap              2   15[BANK0 ] PTR void [1]
  1391 ;;		 -> ?_sprintf(2), 
  1392 ;;  len             2    0        unsigned int 
  1393 ;;  c               1   21[BANK0 ] char 
  1394 ;;  prec            1   18[BANK0 ] char 
  1395 ;;  flag            1   17[BANK0 ] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  2    8[BANK0 ] int 
  1398 ;; Registers used:
  1399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1405 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1406 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1408 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1409 ;;Total ram usage:       14 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    3
  1412 ;; This function calls:
  1413 ;;		___lwdiv
  1414 ;;		___lwmod
  1415 ;; This function is called by:
  1416 ;;		_writeNum
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text3
  1421  001344                     __ptext3:
  1422                           	opt stack 0
  1423  001344                     _sprintf:
  1424                           	opt stack 26
  1425                           
  1426                           ;doprnt.c: 494: va_list ap;
  1427                           ;doprnt.c: 499: signed char c;
  1428                           ;doprnt.c: 506: signed char prec;
  1429                           ;doprnt.c: 508: unsigned char flag;
  1430                           ;doprnt.c: 523: union {
  1431                           ;doprnt.c: 524: unsigned long vd;
  1432                           ;doprnt.c: 525: double integ;
  1433                           ;doprnt.c: 526: } tmpval;
  1434                           ;doprnt.c: 528: unsigned int val;
  1435                           ;doprnt.c: 529: unsigned len;
  1436                           ;doprnt.c: 530: const char * cp;
  1437                           ;doprnt.c: 533: *ap = __va_start();
  1438                           
  1439                           ;incstack = 0
  1440  001344  0E6C               	movlw	low (?_sprintf+4)
  1441  001346  0100               	movlb	0	; () banked
  1442  001348  6F6F               	movwf	sprintf@ap& (0+255),b
  1443  00134A  0E00               	movlw	high (?_sprintf+4)
  1444  00134C  0100               	movlb	0	; () banked
  1445  00134E  6F70               	movwf	(sprintf@ap+1)& (0+255),b
  1446                           
  1447                           ;doprnt.c: 536: while(c = *f++) {
  1448  001350  D0AC               	goto	l2219
  1449  001352                     l2167:
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;doprnt.c: 538: if(c != '%')
  1453  001352  0E25               	movlw	37
  1454  001354  0100               	movlb	0	; () banked
  1455  001356  1975               	xorwf	sprintf@c& (0+255),w,b
  1456  001358  B4D8               	btfsc	status,2,c
  1457  00135A  D00A               	goto	l2173
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;doprnt.c: 540: {
  1461                           ;doprnt.c: 541: ((*sp++ = (c)));
  1462  00135C  C068  FFD9         	movff	sprintf@sp,fsr2l
  1463  001360  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1464  001364  C075  FFDF         	movff	sprintf@c,indf2
  1465                           
  1466                           ; BSR set to: 0
  1467  001368  0100               	movlb	0	; () banked
  1468  00136A  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1469  00136C  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1470                           
  1471                           ;doprnt.c: 542: continue;
  1472  00136E  D09D               	goto	l2219
  1473  001370                     l2173:
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;doprnt.c: 543: }
  1477                           ;doprnt.c: 548: flag = 0;
  1478  001370  0E00               	movlw	0
  1479  001372  0100               	movlb	0	; () banked
  1480  001374  6F71               	movwf	sprintf@flag& (0+255),b
  1481                           
  1482                           ; BSR set to: 0
  1483                           
  1484                           ; BSR set to: 0
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;doprnt.c: 822: }
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;doprnt.c: 813: continue;
  1491                           
  1492                           ;doprnt.c: 802: default:
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;doprnt.c: 698: case 'i':
  1496                           ;doprnt.c: 699: break;
  1497                           
  1498                           ; BSR set to: 0
  1499                           
  1500                           ;doprnt.c: 697: case 'd':
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;doprnt.c: 638: goto alldone;
  1504                           
  1505                           ;doprnt.c: 637: case 0:
  1506                           
  1507                           ;doprnt.c: 635: switch(c = *f++) {
  1508  001376  C06A  FFF6         	movff	sprintf@f,tblptrl
  1509  00137A  C06B  FFF7         	movff	sprintf@f+1,tblptrh
  1510  00137E  0100               	movlb	0	; () banked
  1511  001380  4B6A               	infsnz	sprintf@f& (0+255),f,b
  1512  001382  2B6B               	incf	(sprintf@f+1)& (0+255),f,b
  1513  001384                     	if	0	;tblptru may be non-zero
  1514  001384                     	endif
  1515  001384                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1516  001384  0E00               	movlw	low (__mediumconst shr (0+16))
  1517  001386  6EF8               	movwf	tblptru,c
  1518  001388                     	endif
  1519  001388  0008               	tblrd		*
  1520  00138A  CFF5 F075          	movff	tablat,sprintf@c
  1521  00138E  0100               	movlb	0	; () banked
  1522  001390  5175               	movf	sprintf@c& (0+255),w,b
  1523                           
  1524                           ; Switch size 1, requested type "space"
  1525                           ; Number of cases is 3, Range of values is 0 to 105
  1526                           ; switch strategies available:
  1527                           ; Name         Instructions Cycles
  1528                           ; simple_byte           10     6 (average)
  1529                           ;	Chosen strategy is simple_byte
  1530  001392  0A00               	xorlw	0	; case 0
  1531  001394  B4D8               	btfsc	status,2,c
  1532  001396  D099               	goto	l2221
  1533  001398  0A64               	xorlw	100	; case 100
  1534  00139A  B4D8               	btfsc	status,2,c
  1535  00139C  D003               	goto	l2179
  1536  00139E  0A0D               	xorlw	13	; case 105
  1537  0013A0  A4D8               	btfss	status,2,c
  1538  0013A2  D083               	goto	l2219
  1539  0013A4                     l2179:
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;doprnt.c: 1253: {
  1543                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1544  0013A4  C06F  FFD9         	movff	sprintf@ap,fsr2l
  1545  0013A8  C070  FFDA         	movff	sprintf@ap+1,fsr2h
  1546  0013AC  CFDE F073          	movff	postinc2,sprintf@val
  1547  0013B0  CFDD F074          	movff	postdec2,sprintf@val+1
  1548                           
  1549                           ; BSR set to: 0
  1550  0013B4  0E02               	movlw	2
  1551  0013B6  0100               	movlb	0	; () banked
  1552  0013B8  276F               	addwf	sprintf@ap& (0+255),f,b
  1553  0013BA  0E00               	movlw	0
  1554  0013BC  2370               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;doprnt.c: 1261: if((int)val < 0) {
  1558  0013BE  0100               	movlb	0	; () banked
  1559  0013C0  AF74               	btfss	(sprintf@val+1)& (0+255),7,b
  1560  0013C2  D008               	goto	l2189
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;doprnt.c: 1262: flag |= 0x03;
  1564  0013C4  0E03               	movlw	3
  1565  0013C6  0100               	movlb	0	; () banked
  1566  0013C8  1371               	iorwf	sprintf@flag& (0+255),f,b
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;doprnt.c: 1263: val = -val;
  1570  0013CA  0100               	movlb	0	; () banked
  1571  0013CC  6D73               	negf	sprintf@val& (0+255),b
  1572  0013CE  1F74               	comf	(sprintf@val+1)& (0+255),f,b
  1573  0013D0  B0D8               	btfsc	status,0,c
  1574  0013D2  2B74               	incf	(sprintf@val+1)& (0+255),f,b
  1575  0013D4                     l2189:
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;doprnt.c: 1264: }
  1579                           ;doprnt.c: 1266: }
  1580                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1581  0013D4  0E01               	movlw	1
  1582  0013D6  0100               	movlb	0	; () banked
  1583  0013D8  6F75               	movwf	sprintf@c& (0+255),b
  1584  0013DA                     l2191:
  1585                           
  1586                           ; BSR set to: 0
  1587  0013DA  0E05               	movlw	5
  1588  0013DC  0100               	movlb	0	; () banked
  1589  0013DE  1975               	xorwf	sprintf@c& (0+255),w,b
  1590  0013E0  B4D8               	btfsc	status,2,c
  1591  0013E2  D019               	goto	l2203
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;doprnt.c: 1306: if(val < dpowers[c])
  1595                           
  1596                           ; BSR set to: 0
  1597                           
  1598                           ; BSR set to: 0
  1599  0013E4  0100               	movlb	0	; () banked
  1600  0013E6  5175               	movf	sprintf@c& (0+255),w,b
  1601  0013E8  0D02               	mullw	2
  1602  0013EA  0E01               	movlw	low _dpowers
  1603  0013EC  24F3               	addwf	prodl,w,c
  1604  0013EE  6EF6               	movwf	tblptrl,c
  1605  0013F0  0E10               	movlw	high _dpowers
  1606  0013F2  20F4               	addwfc	prodh,w,c
  1607  0013F4  6EF7               	movwf	tblptrh,c
  1608  0013F6                     	if	1	;There are 3 active tblptr bytes
  1609  0013F6  6AF8               	clrf	tblptru,c
  1610  0013F8  0E00               	movlw	low (__mediumconst shr (0+16))
  1611  0013FA  22F8               	addwfc	tblptru,f,c
  1612  0013FC                     	endif
  1613  0013FC  0009               	tblrd		*+
  1614  0013FE  50F5               	movf	tablat,w,c
  1615  001400  0100               	movlb	0	; () banked
  1616  001402  5D73               	subwf	sprintf@val& (0+255),w,b
  1617  001404  0009               	tblrd		*+
  1618  001406  50F5               	movf	tablat,w,c
  1619  001408  0100               	movlb	0	; () banked
  1620  00140A  5974               	subwfb	(sprintf@val+1)& (0+255),w,b
  1621  00140C  A0D8               	btfss	status,0,c
  1622  00140E  D003               	goto	l2203
  1623                           
  1624                           ; BSR set to: 0
  1625                           
  1626                           ; BSR set to: 0
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;doprnt.c: 1307: break;
  1630  001410  0100               	movlb	0	; () banked
  1631  001412  2B75               	incf	sprintf@c& (0+255),f,b
  1632  001414  D7E2               	goto	l2191
  1633  001416                     l2203:
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;doprnt.c: 1422: {
  1637                           ;doprnt.c: 1438: if(flag & 0x03)
  1638  001416  C071  F06E         	movff	sprintf@flag,??_sprintf
  1639  00141A  0E03               	movlw	3
  1640  00141C  0100               	movlb	0	; () banked
  1641  00141E  176E               	andwf	??_sprintf& (0+255),f,b
  1642  001420  B4D8               	btfsc	status,2,c
  1643  001422  D009               	goto	l2209
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1647  001424  C068  FFD9         	movff	sprintf@sp,fsr2l
  1648  001428  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1649  00142C  0E2D               	movlw	45
  1650  00142E  6EDF               	movwf	indf2,c
  1651                           
  1652                           ; BSR set to: 0
  1653  001430  0100               	movlb	0	; () banked
  1654  001432  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1655  001434  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1656  001436                     l2209:
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;doprnt.c: 1469: }
  1660                           ;doprnt.c: 1472: prec = c;
  1661  001436  C075  F072         	movff	sprintf@c,sprintf@prec
  1662                           
  1663                           ;doprnt.c: 1474: while(prec--) {
  1664  00143A  D031               	goto	l2217
  1665  00143C                     l2211:
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;doprnt.c: 1478: {
  1669                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1670  00143C  0100               	movlb	0	; () banked
  1671  00143E  5172               	movf	sprintf@prec& (0+255),w,b
  1672  001440  0D02               	mullw	2
  1673  001442  0E01               	movlw	low _dpowers
  1674  001444  24F3               	addwf	prodl,w,c
  1675  001446  6EF6               	movwf	tblptrl,c
  1676  001448  0E10               	movlw	high _dpowers
  1677  00144A  20F4               	addwfc	prodh,w,c
  1678  00144C  6EF7               	movwf	tblptrh,c
  1679  00144E                     	if	1	;There are 3 active tblptr bytes
  1680  00144E  6AF8               	clrf	tblptru,c
  1681  001450  0E00               	movlw	low (__mediumconst shr (0+16))
  1682  001452  22F8               	addwfc	tblptru,f,c
  1683  001454                     	endif
  1684  001454  0009               	tblrd		*+
  1685  001456  CFF5 F022          	movff	tablat,___lwdiv@divisor
  1686  00145A  000A               	tblrd		*-
  1687  00145C  CFF5 F023          	movff	tablat,___lwdiv@divisor+1
  1688  001460  C073  F020         	movff	sprintf@val,___lwdiv@dividend
  1689  001464  C074  F021         	movff	sprintf@val+1,___lwdiv@dividend+1
  1690  001468  ECFD  F00B         	call	___lwdiv	;wreg free
  1691  00146C  C020  F063         	movff	?___lwdiv,___lwmod@dividend
  1692  001470  C021  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  1693  001474  0E00               	movlw	0
  1694  001476  0100               	movlb	0	; () banked
  1695  001478  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  1696  00147A  0E0A               	movlw	10
  1697  00147C  6F65               	movwf	___lwmod@divisor& (0+255),b
  1698  00147E  ECCC  F00B         	call	___lwmod	;wreg free
  1699  001482  0100               	movlb	0	; () banked
  1700  001484  5163               	movf	?___lwmod& (0+255),w,b
  1701  001486  0F30               	addlw	48
  1702  001488  0100               	movlb	0	; () banked
  1703  00148A  6F75               	movwf	sprintf@c& (0+255),b
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;doprnt.c: 1523: }
  1707                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1708  00148C  C068  FFD9         	movff	sprintf@sp,fsr2l
  1709  001490  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1710  001494  C075  FFDF         	movff	sprintf@c,indf2
  1711                           
  1712                           ; BSR set to: 0
  1713  001498  0100               	movlb	0	; () banked
  1714  00149A  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1715  00149C  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1716  00149E                     l2217:
  1717                           
  1718                           ; BSR set to: 0
  1719  00149E  0100               	movlb	0	; () banked
  1720  0014A0  0772               	decf	sprintf@prec& (0+255),f,b
  1721  0014A2  0100               	movlb	0	; () banked
  1722  0014A4  2972               	incf	sprintf@prec& (0+255),w,b
  1723  0014A6  A4D8               	btfss	status,2,c
  1724  0014A8  D7C9               	goto	l2211
  1725  0014AA                     l2219:
  1726                           
  1727                           ; BSR set to: 0
  1728  0014AA  C06A  FFF6         	movff	sprintf@f,tblptrl
  1729  0014AE  C06B  FFF7         	movff	sprintf@f+1,tblptrh
  1730  0014B2  0100               	movlb	0	; () banked
  1731  0014B4  4B6A               	infsnz	sprintf@f& (0+255),f,b
  1732  0014B6  2B6B               	incf	(sprintf@f+1)& (0+255),f,b
  1733  0014B8                     	if	0	;tblptru may be non-zero
  1734  0014B8                     	endif
  1735  0014B8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1736  0014B8  0E00               	movlw	low (__mediumconst shr (0+16))
  1737  0014BA  6EF8               	movwf	tblptru,c
  1738  0014BC                     	endif
  1739  0014BC  0008               	tblrd		*
  1740  0014BE  CFF5 F075          	movff	tablat,sprintf@c
  1741  0014C2  0100               	movlb	0	; () banked
  1742  0014C4  5175               	movf	sprintf@c& (0+255),w,b
  1743  0014C6  A4D8               	btfss	status,2,c
  1744  0014C8  D744               	goto	l2167
  1745  0014CA                     l2221:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;doprnt.c: 1538: *sp = 0;
  1749  0014CA  C068  FFD9         	movff	sprintf@sp,fsr2l
  1750  0014CE  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1751  0014D2  0E00               	movlw	0
  1752  0014D4  6EDF               	movwf	indf2,c
  1753  0014D6  0012               	return	
  1754  0014D8                     __end_of_sprintf:
  1755                           	opt stack 0
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           prodh	equ	0xFF4
  1761                           prodl	equ	0xFF3
  1762                           postinc0	equ	0xFEE
  1763                           postdec1	equ	0xFE5
  1764                           fsr1l	equ	0xFE1
  1765                           indf2	equ	0xFDF
  1766                           postinc2	equ	0xFDE
  1767                           postdec2	equ	0xFDD
  1768                           fsr2h	equ	0xFDA
  1769                           fsr2l	equ	0xFD9
  1770                           status	equ	0xFD8
  1771                           
  1772 ;; *************** function ___lwmod *****************
  1773 ;; Defined at:
  1774 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  dividend        2    3[BANK0 ] unsigned int 
  1777 ;;  divisor         2    5[BANK0 ] unsigned int 
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  counter         1    7[BANK0 ] unsigned char 
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  2    3[BANK0 ] unsigned int 
  1782 ;; Registers used:
  1783 ;;		wreg, status,2, status,0
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1789 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;Total ram usage:        5 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; Hardware stack levels required when called:    2
  1796 ;; This function calls:
  1797 ;;		Nothing
  1798 ;; This function is called by:
  1799 ;;		_sprintf
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           	psect	text4
  1804  001798                     __ptext4:
  1805                           	opt stack 0
  1806  001798                     ___lwmod:
  1807                           	opt stack 26
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;incstack = 0
  1811  001798  0100               	movlb	0	; () banked
  1812  00179A  5165               	movf	___lwmod@divisor& (0+255),w,b
  1813  00179C  0100               	movlb	0	; () banked
  1814  00179E  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1815  0017A0  B4D8               	btfsc	status,2,c
  1816  0017A2  D026               	goto	l786
  1817                           
  1818                           ; BSR set to: 0
  1819  0017A4  0E01               	movlw	1
  1820  0017A6  0100               	movlb	0	; () banked
  1821  0017A8  6F67               	movwf	___lwmod@counter& (0+255),b
  1822  0017AA  D006               	goto	l2129
  1823  0017AC                     l2127:
  1824                           
  1825                           ; BSR set to: 0
  1826  0017AC  0100               	movlb	0	; () banked
  1827  0017AE  90D8               	bcf	status,0,c
  1828  0017B0  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  1829  0017B2  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1830  0017B4  0100               	movlb	0	; () banked
  1831  0017B6  2B67               	incf	___lwmod@counter& (0+255),f,b
  1832  0017B8                     l2129:
  1833                           
  1834                           ; BSR set to: 0
  1835  0017B8  0100               	movlb	0	; () banked
  1836  0017BA  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1837  0017BC  D7F7               	goto	l2127
  1838  0017BE                     l2131:
  1839                           
  1840                           ; BSR set to: 0
  1841  0017BE  0100               	movlb	0	; () banked
  1842  0017C0  5165               	movf	___lwmod@divisor& (0+255),w,b
  1843  0017C2  0100               	movlb	0	; () banked
  1844  0017C4  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  1845  0017C6  0100               	movlb	0	; () banked
  1846  0017C8  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1847  0017CA  0100               	movlb	0	; () banked
  1848  0017CC  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1849  0017CE  A0D8               	btfss	status,0,c
  1850  0017D0  D008               	goto	l2135
  1851                           
  1852                           ; BSR set to: 0
  1853  0017D2  0100               	movlb	0	; () banked
  1854  0017D4  5165               	movf	___lwmod@divisor& (0+255),w,b
  1855  0017D6  0100               	movlb	0	; () banked
  1856  0017D8  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  1857  0017DA  0100               	movlb	0	; () banked
  1858  0017DC  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1859  0017DE  0100               	movlb	0	; () banked
  1860  0017E0  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1861  0017E2                     l2135:
  1862                           
  1863                           ; BSR set to: 0
  1864  0017E2  0100               	movlb	0	; () banked
  1865  0017E4  90D8               	bcf	status,0,c
  1866  0017E6  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1867  0017E8  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  1868                           
  1869                           ; BSR set to: 0
  1870  0017EA  0100               	movlb	0	; () banked
  1871  0017EC  2F67               	decfsz	___lwmod@counter& (0+255),f,b
  1872  0017EE  D7E7               	goto	l2131
  1873  0017F0                     l786:
  1874                           
  1875                           ; BSR set to: 0
  1876  0017F0  C063  F063         	movff	___lwmod@dividend,?___lwmod
  1877  0017F4  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  1878                           
  1879                           ; BSR set to: 0
  1880  0017F8  0012               	return		;funcret
  1881  0017FA                     __end_of___lwmod:
  1882                           	opt stack 0
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           prodh	equ	0xFF4
  1888                           prodl	equ	0xFF3
  1889                           postinc0	equ	0xFEE
  1890                           postdec1	equ	0xFE5
  1891                           fsr1l	equ	0xFE1
  1892                           indf2	equ	0xFDF
  1893                           postinc2	equ	0xFDE
  1894                           postdec2	equ	0xFDD
  1895                           fsr2h	equ	0xFDA
  1896                           fsr2l	equ	0xFD9
  1897                           status	equ	0xFD8
  1898                           
  1899 ;; *************** function ___lwdiv *****************
  1900 ;; Defined at:
  1901 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;  dividend        2   31[COMRAM] unsigned int 
  1904 ;;  divisor         2   33[COMRAM] unsigned int 
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;  quotient        2    1[BANK0 ] unsigned int 
  1907 ;;  counter         1    0[BANK0 ] unsigned char 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  2   31[COMRAM] unsigned int 
  1910 ;; Registers used:
  1911 ;;		wreg, status,2, status,0
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1917 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;Total ram usage:        7 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    2
  1924 ;; This function calls:
  1925 ;;		Nothing
  1926 ;; This function is called by:
  1927 ;;		_sprintf
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text5
  1932  0017FA                     __ptext5:
  1933                           	opt stack 0
  1934  0017FA                     ___lwdiv:
  1935                           	opt stack 26
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;incstack = 0
  1939  0017FA  0E00               	movlw	0
  1940  0017FC  0100               	movlb	0	; () banked
  1941  0017FE  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1942  001800  0E00               	movlw	0
  1943  001802  6F61               	movwf	___lwdiv@quotient& (0+255),b
  1944                           
  1945                           ; BSR set to: 0
  1946  001804  5022               	movf	___lwdiv@divisor,w,c
  1947  001806  1023               	iorwf	___lwdiv@divisor+1,w,c
  1948  001808  B4D8               	btfsc	status,2,c
  1949  00180A  D021               	goto	l776
  1950                           
  1951                           ; BSR set to: 0
  1952  00180C  0E01               	movlw	1
  1953  00180E  0100               	movlb	0	; () banked
  1954  001810  6F60               	movwf	___lwdiv@counter& (0+255),b
  1955  001812  D005               	goto	l2109
  1956  001814                     l2107:
  1957                           
  1958                           ; BSR set to: 0
  1959  001814  90D8               	bcf	status,0,c
  1960  001816  3622               	rlcf	___lwdiv@divisor,f,c
  1961  001818  3623               	rlcf	___lwdiv@divisor+1,f,c
  1962  00181A  0100               	movlb	0	; () banked
  1963  00181C  2B60               	incf	___lwdiv@counter& (0+255),f,b
  1964  00181E                     l2109:
  1965                           
  1966                           ; BSR set to: 0
  1967  00181E  AE23               	btfss	___lwdiv@divisor+1,7,c
  1968  001820  D7F9               	goto	l2107
  1969  001822                     l2111:
  1970                           
  1971                           ; BSR set to: 0
  1972  001822  0100               	movlb	0	; () banked
  1973  001824  90D8               	bcf	status,0,c
  1974  001826  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  1975  001828  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1976                           
  1977                           ; BSR set to: 0
  1978  00182A  5022               	movf	___lwdiv@divisor,w,c
  1979  00182C  5C20               	subwf	___lwdiv@dividend,w,c
  1980  00182E  5023               	movf	___lwdiv@divisor+1,w,c
  1981  001830  5821               	subwfb	___lwdiv@dividend+1,w,c
  1982  001832  A0D8               	btfss	status,0,c
  1983  001834  D006               	goto	l2119
  1984                           
  1985                           ; BSR set to: 0
  1986  001836  5022               	movf	___lwdiv@divisor,w,c
  1987  001838  5E20               	subwf	___lwdiv@dividend,f,c
  1988  00183A  5023               	movf	___lwdiv@divisor+1,w,c
  1989  00183C  5A21               	subwfb	___lwdiv@dividend+1,f,c
  1990                           
  1991                           ; BSR set to: 0
  1992  00183E  0100               	movlb	0	; () banked
  1993  001840  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  1994  001842                     l2119:
  1995                           
  1996                           ; BSR set to: 0
  1997  001842  90D8               	bcf	status,0,c
  1998  001844  3223               	rrcf	___lwdiv@divisor+1,f,c
  1999  001846  3222               	rrcf	___lwdiv@divisor,f,c
  2000                           
  2001                           ; BSR set to: 0
  2002  001848  0100               	movlb	0	; () banked
  2003  00184A  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  2004  00184C  D7EA               	goto	l2111
  2005  00184E                     l776:
  2006                           
  2007                           ; BSR set to: 0
  2008  00184E  C061  F020         	movff	___lwdiv@quotient,?___lwdiv
  2009  001852  C062  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2010                           
  2011                           ; BSR set to: 0
  2012  001856  0012               	return		;funcret
  2013  001858                     __end_of___lwdiv:
  2014                           	opt stack 0
  2015                           tblptru	equ	0xFF8
  2016                           tblptrh	equ	0xFF7
  2017                           tblptrl	equ	0xFF6
  2018                           tablat	equ	0xFF5
  2019                           prodh	equ	0xFF4
  2020                           prodl	equ	0xFF3
  2021                           postinc0	equ	0xFEE
  2022                           postdec1	equ	0xFE5
  2023                           fsr1l	equ	0xFE1
  2024                           indf2	equ	0xFDF
  2025                           postinc2	equ	0xFDE
  2026                           postdec2	equ	0xFDD
  2027                           fsr2h	equ	0xFDA
  2028                           fsr2l	equ	0xFD9
  2029                           status	equ	0xFD8
  2030                           
  2031 ;; *************** function _lcdWriteLine *****************
  2032 ;; Defined at:
  2033 ;;		line 37 in file "test.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;  data            2    3[BANK0 ] PTR unsigned char 
  2036 ;;		 -> STR_6(6), STR_5(6), STR_3(3), STR_2(2), 
  2037 ;;		 -> writeNum@numStr(10), 
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  i               2    7[BANK0 ] int 
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  1    wreg      void 
  2042 ;; Registers used:
  2043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2044 ;; Tracked objects:
  2045 ;;		On entry : 0/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2049 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2050 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2052 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2053 ;;Total ram usage:        6 bytes
  2054 ;; Hardware stack levels used:    1
  2055 ;; Hardware stack levels required when called:    4
  2056 ;; This function calls:
  2057 ;;		_LCD8send
  2058 ;; This function is called by:
  2059 ;;		_writeNum
  2060 ;;		_writeLCD
  2061 ;;		_main
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           	psect	text6
  2066  001596                     __ptext6:
  2067                           	opt stack 0
  2068  001596                     _lcdWriteLine:
  2069                           	opt stack 25
  2070                           
  2071                           ;test.c: 38: for (int i = 0; data[i] != 0; i++) {
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;incstack = 0
  2075  001596  0E00               	movlw	0
  2076  001598  0100               	movlb	0	; () banked
  2077  00159A  6F68               	movwf	(lcdWriteLine@i+1)& (0+255),b
  2078  00159C  0E00               	movlw	0
  2079  00159E  6F67               	movwf	lcdWriteLine@i& (0+255),b
  2080  0015A0  D024               	goto	l2163
  2081  0015A2                     l2159:
  2082                           
  2083                           ;test.c: 39: LCD8send(data[i], 1);
  2084  0015A2  0E01               	movlw	1
  2085  0015A4  6E23               	movwf	LCD8send@mode,c
  2086  0015A6  0100               	movlb	0	; () banked
  2087  0015A8  5167               	movf	lcdWriteLine@i& (0+255),w,b
  2088  0015AA  0100               	movlb	0	; () banked
  2089  0015AC  2563               	addwf	lcdWriteLine@data& (0+255),w,b
  2090  0015AE  0100               	movlb	0	; () banked
  2091  0015B0  6F65               	movwf	??_lcdWriteLine& (0+255),b
  2092  0015B2  0100               	movlb	0	; () banked
  2093  0015B4  5168               	movf	(lcdWriteLine@i+1)& (0+255),w,b
  2094  0015B6  0100               	movlb	0	; () banked
  2095  0015B8  2164               	addwfc	(lcdWriteLine@data+1)& (0+255),w,b
  2096  0015BA  0100               	movlb	0	; () banked
  2097  0015BC  6F66               	movwf	(??_lcdWriteLine+1)& (0+255),b
  2098  0015BE  C065  FFF6         	movff	??_lcdWriteLine,tblptrl
  2099  0015C2  C066  FFF7         	movff	??_lcdWriteLine+1,tblptrh
  2100  0015C6  0E00               	movlw	low (__smallconst shr (0+16))
  2101  0015C8  6EF8               	movwf	tblptru,c
  2102  0015CA  0E0F               	movlw	(high __ramtop+-1)
  2103  0015CC  64F7               	cpfsgt	tblptrh,c
  2104  0015CE  D003               	bra	u1487
  2105  0015D0  0008               	tblrd		*
  2106  0015D2  50F5               	movf	tablat,w,c
  2107  0015D4  D005               	bra	u1480
  2108  0015D6                     u1487:
  2109  0015D6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2110  0015DA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2111  0015DE  50EF               	movf	indf0,w,c
  2112  0015E0                     u1480:
  2113  0015E0  EC80  F00C         	call	_LCD8send
  2114  0015E4  0100               	movlb	0	; () banked
  2115  0015E6  4B67               	infsnz	lcdWriteLine@i& (0+255),f,b
  2116  0015E8  2B68               	incf	(lcdWriteLine@i+1)& (0+255),f,b
  2117  0015EA                     l2163:
  2118                           
  2119                           ; BSR set to: 0
  2120  0015EA  0100               	movlb	0	; () banked
  2121  0015EC  5167               	movf	lcdWriteLine@i& (0+255),w,b
  2122  0015EE  0100               	movlb	0	; () banked
  2123  0015F0  2563               	addwf	lcdWriteLine@data& (0+255),w,b
  2124  0015F2  0100               	movlb	0	; () banked
  2125  0015F4  6F65               	movwf	??_lcdWriteLine& (0+255),b
  2126  0015F6  0100               	movlb	0	; () banked
  2127  0015F8  5168               	movf	(lcdWriteLine@i+1)& (0+255),w,b
  2128  0015FA  0100               	movlb	0	; () banked
  2129  0015FC  2164               	addwfc	(lcdWriteLine@data+1)& (0+255),w,b
  2130  0015FE  0100               	movlb	0	; () banked
  2131  001600  6F66               	movwf	(??_lcdWriteLine+1)& (0+255),b
  2132  001602  C065  FFF6         	movff	??_lcdWriteLine,tblptrl
  2133  001606  C066  FFF7         	movff	??_lcdWriteLine+1,tblptrh
  2134  00160A  0E00               	movlw	low (__smallconst shr (0+16))
  2135  00160C  6EF8               	movwf	tblptru,c
  2136  00160E  0E0F               	movlw	(high __ramtop+-1)
  2137  001610  64F7               	cpfsgt	tblptrh,c
  2138  001612  D003               	bra	u1497
  2139  001614  0008               	tblrd		*
  2140  001616  50F5               	movf	tablat,w,c
  2141  001618  D005               	bra	u1490
  2142  00161A                     u1497:
  2143  00161A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2144  00161E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2145  001622  50EF               	movf	indf0,w,c
  2146  001624                     u1490:
  2147  001624  0900               	iorlw	0
  2148  001626  B4D8               	btfsc	status,2,c
  2149  001628  0012               	return	
  2150  00162A  D7BB               	goto	l2159
  2151  00162C                     __end_of_lcdWriteLine:
  2152                           	opt stack 0
  2153                           tblptru	equ	0xFF8
  2154                           tblptrh	equ	0xFF7
  2155                           tblptrl	equ	0xFF6
  2156                           tablat	equ	0xFF5
  2157                           prodh	equ	0xFF4
  2158                           prodl	equ	0xFF3
  2159                           indf0	equ	0xFEF
  2160                           postinc0	equ	0xFEE
  2161                           fsr0h	equ	0xFEA
  2162                           fsr0l	equ	0xFE9
  2163                           postdec1	equ	0xFE5
  2164                           fsr1l	equ	0xFE1
  2165                           indf2	equ	0xFDF
  2166                           postinc2	equ	0xFDE
  2167                           postdec2	equ	0xFDD
  2168                           fsr2h	equ	0xFDA
  2169                           fsr2l	equ	0xFD9
  2170                           status	equ	0xFD8
  2171                           
  2172 ;; *************** function _ee_read_byte *****************
  2173 ;; Defined at:
  2174 ;;		line 108 in file "EEPROM.h"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;  address         1    wreg     unsigned char 
  2177 ;;  _data           2    0[BANK0 ] PTR unsigned char 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  address         1   34[COMRAM] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2189 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;Total ram usage:        3 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    4
  2196 ;; This function calls:
  2197 ;;		_XEERead
  2198 ;; This function is called by:
  2199 ;;		_writeLCD
  2200 ;;		_readEEPROM
  2201 ;; This function uses a non-reentrant model
  2202 ;;
  2203                           
  2204                           	psect	text7
  2205  001A70                     __ptext7:
  2206                           	opt stack 0
  2207  001A70                     _ee_read_byte:
  2208                           	opt stack 25
  2209                           
  2210                           ;incstack = 0
  2211                           ;ee_read_byte@address stored from wreg
  2212  001A70  6E23               	movwf	ee_read_byte@address,c
  2213                           
  2214                           ;EEPROM.h: 117: *_data = XEERead(address);
  2215  001A72  5023               	movf	ee_read_byte@address,w,c
  2216  001A74  EC0B  F00D         	call	_XEERead
  2217  001A78  C060  FFD9         	movff	ee_read_byte@_data,fsr2l
  2218  001A7C  C061  FFDA         	movff	ee_read_byte@_data+1,fsr2h
  2219  001A80  6EDF               	movwf	indf2,c
  2220  001A82  0012               	return		;funcret
  2221  001A84                     __end_of_ee_read_byte:
  2222                           	opt stack 0
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           tblptrl	equ	0xFF6
  2226                           tablat	equ	0xFF5
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           indf0	equ	0xFEF
  2230                           postinc0	equ	0xFEE
  2231                           fsr0h	equ	0xFEA
  2232                           fsr0l	equ	0xFE9
  2233                           postdec1	equ	0xFE5
  2234                           fsr1l	equ	0xFE1
  2235                           indf2	equ	0xFDF
  2236                           postinc2	equ	0xFDE
  2237                           postdec2	equ	0xFDD
  2238                           fsr2h	equ	0xFDA
  2239                           fsr2l	equ	0xFD9
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _XEERead *****************
  2243 ;; Defined at:
  2244 ;;		line 65 in file "exprom.h"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  address         1    wreg     unsigned char 
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  address         1   32[COMRAM] unsigned char 
  2249 ;;  buffer          1   33[COMRAM] unsigned char 
  2250 ;; Return value:  Size  Location     Type
  2251 ;;                  1    wreg      unsigned char 
  2252 ;; Registers used:
  2253 ;;		wreg, status,2, cstack
  2254 ;; Tracked objects:
  2255 ;;		On entry : 0/0
  2256 ;;		On exit  : 0/0
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;Total ram usage:        2 bytes
  2264 ;; Hardware stack levels used:    1
  2265 ;; Hardware stack levels required when called:    3
  2266 ;; This function calls:
  2267 ;;		_SPI1out
  2268 ;;		_wait
  2269 ;; This function is called by:
  2270 ;;		_ee_read_byte
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           	psect	text8
  2275  001A16                     __ptext8:
  2276                           	opt stack 0
  2277  001A16                     _XEERead:
  2278                           	opt stack 25
  2279                           
  2280                           ;incstack = 0
  2281                           ;XEERead@address stored from wreg
  2282  001A16  6E21               	movwf	XEERead@address,c
  2283                           
  2284                           ;exprom.h: 68: (PORTCbits.RC6) = 0;
  2285  001A18  9C82               	bcf	3970,6,c	;volatile
  2286                           
  2287                           ;exprom.h: 70: SPI1out(0x03);
  2288  001A1A  0E03               	movlw	3
  2289  001A1C  EC53  F00D         	call	_SPI1out
  2290                           
  2291                           ;exprom.h: 71: SPI1out(((address)>>8)&0xFF);
  2292  001A20  0E00               	movlw	0
  2293  001A22  EC53  F00D         	call	_SPI1out
  2294                           
  2295                           ;exprom.h: 72: SPI1out(address&0xFF);
  2296  001A26  5021               	movf	XEERead@address,w,c
  2297  001A28  EC53  F00D         	call	_SPI1out
  2298                           
  2299                           ;exprom.h: 74: (SSP1BUF) = 0x00;
  2300  001A2C  0E00               	movlw	0
  2301  001A2E  6EC9               	movwf	4041,c	;volatile
  2302                           
  2303                           ;exprom.h: 75: wait();
  2304  001A30  EC5B  F00D         	call	_wait	;wreg free
  2305                           
  2306                           ;exprom.h: 77: unsigned char buffer = (SSP1BUF);
  2307  001A34  CFC9 F022          	movff	4041,XEERead@buffer	;volatile
  2308                           
  2309                           ;exprom.h: 79: (PORTCbits.RC6) = 1;
  2310  001A38  8C82               	bsf	3970,6,c	;volatile
  2311                           
  2312                           ;exprom.h: 80: return buffer;
  2313  001A3A  5022               	movf	XEERead@buffer,w,c
  2314  001A3C  0012               	return	
  2315  001A3E                     __end_of_XEERead:
  2316                           	opt stack 0
  2317                           tblptru	equ	0xFF8
  2318                           tblptrh	equ	0xFF7
  2319                           tblptrl	equ	0xFF6
  2320                           tablat	equ	0xFF5
  2321                           prodh	equ	0xFF4
  2322                           prodl	equ	0xFF3
  2323                           indf0	equ	0xFEF
  2324                           postinc0	equ	0xFEE
  2325                           fsr0h	equ	0xFEA
  2326                           fsr0l	equ	0xFE9
  2327                           postdec1	equ	0xFE5
  2328                           fsr1l	equ	0xFE1
  2329                           indf2	equ	0xFDF
  2330                           postinc2	equ	0xFDE
  2331                           postdec2	equ	0xFDD
  2332                           fsr2h	equ	0xFDA
  2333                           fsr2l	equ	0xFD9
  2334                           status	equ	0xFD8
  2335                           
  2336 ;; *************** function _eeWriteChar *****************
  2337 ;; Defined at:
  2338 ;;		line 83 in file "exprom.h"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;  address         1    wreg     unsigned char 
  2341 ;;  value           1   34[COMRAM] unsigned char 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;  address         1    2[BANK0 ] unsigned char 
  2344 ;;  sr              1    3[BANK0 ] unsigned char 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, status,0, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2354 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;Total ram usage:        3 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    3
  2361 ;; This function calls:
  2362 ;;		_SPI1out
  2363 ;;		_delay_ms
  2364 ;;		_wait
  2365 ;; This function is called by:
  2366 ;;		_main
  2367 ;;		_ee_write_char
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           	psect	text9
  2372  001734                     __ptext9:
  2373                           	opt stack 0
  2374  001734                     _eeWriteChar:
  2375                           	opt stack 27
  2376                           
  2377                           ;incstack = 0
  2378                           ;eeWriteChar@address stored from wreg
  2379  001734  0100               	movlb	0	; () banked
  2380  001736  6F62               	movwf	eeWriteChar@address& (0+255),b
  2381                           
  2382                           ;exprom.h: 89: unsigned char sr = 0x00;
  2383  001738  0E00               	movlw	0
  2384  00173A  0100               	movlb	0	; () banked
  2385  00173C  6F63               	movwf	eeWriteChar@sr& (0+255),b
  2386  00173E                     l2345:
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;exprom.h: 101: (PORTCbits.RC6) = 0;
  2390  00173E  9C82               	bcf	3970,6,c	;volatile
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;exprom.h: 102: SPI1out(0x06);
  2394  001740  0E06               	movlw	6
  2395  001742  EC53  F00D         	call	_SPI1out
  2396                           
  2397                           ;exprom.h: 103: delay_ms(30);
  2398  001746  0E00               	movlw	0
  2399  001748  6E21               	movwf	delay_ms@x+1,c
  2400  00174A  0E1E               	movlw	30
  2401  00174C  6E20               	movwf	delay_ms@x,c
  2402  00174E  EC9E  F00C         	call	_delay_ms	;wreg free
  2403                           
  2404                           ;exprom.h: 104: SPI1out(0x05);
  2405  001752  0E05               	movlw	5
  2406  001754  EC53  F00D         	call	_SPI1out
  2407                           
  2408                           ;exprom.h: 107: (PORTCbits.RC6) = 1;
  2409  001758  8C82               	bsf	3970,6,c	;volatile
  2410                           
  2411                           ;exprom.h: 108: (SSP1BUF) = 0x00;
  2412  00175A  0E00               	movlw	0
  2413  00175C  6EC9               	movwf	4041,c	;volatile
  2414                           
  2415                           ;exprom.h: 110: wait();
  2416  00175E  EC5B  F00D         	call	_wait	;wreg free
  2417                           
  2418                           ;exprom.h: 113: sr = (SSP1BUF);
  2419  001762  CFC9 F063          	movff	4041,eeWriteChar@sr	;volatile
  2420                           
  2421                           ;exprom.h: 115: if (sr & 0x02 == 0x02) { break; }
  2422  001766  0100               	movlb	0	; () banked
  2423  001768  A163               	btfss	eeWriteChar@sr& (0+255),0,b
  2424  00176A  D7E9               	goto	l2345
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;exprom.h: 116: }
  2428                           ;exprom.h: 120: (PORTCbits.RC6) = 0;
  2429                           
  2430                           ; BSR set to: 0
  2431                           
  2432                           ; BSR set to: 0
  2433                           
  2434                           ; BSR set to: 0
  2435  00176C  9C82               	bcf	3970,6,c	;volatile
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;exprom.h: 121: SPI1out(0x02);
  2439  00176E  0E02               	movlw	2
  2440  001770  EC53  F00D         	call	_SPI1out
  2441                           
  2442                           ;exprom.h: 122: SPI1out(((address)>>8)&0xFF);
  2443  001774  0E00               	movlw	0
  2444  001776  EC53  F00D         	call	_SPI1out
  2445                           
  2446                           ;exprom.h: 123: SPI1out(address&0xFF);
  2447  00177A  0100               	movlb	0	; () banked
  2448  00177C  5162               	movf	eeWriteChar@address& (0+255),w,b
  2449  00177E  EC53  F00D         	call	_SPI1out
  2450                           
  2451                           ;exprom.h: 124: SPI1out(value);
  2452  001782  5023               	movf	eeWriteChar@value,w,c
  2453  001784  EC53  F00D         	call	_SPI1out
  2454                           
  2455                           ;exprom.h: 126: delay_ms(100);
  2456  001788  0E00               	movlw	0
  2457  00178A  6E21               	movwf	delay_ms@x+1,c
  2458  00178C  0E64               	movlw	100
  2459  00178E  6E20               	movwf	delay_ms@x,c
  2460  001790  EC9E  F00C         	call	_delay_ms	;wreg free
  2461                           
  2462                           ;exprom.h: 127: (PORTCbits.RC6) = 1;
  2463  001794  8C82               	bsf	3970,6,c	;volatile
  2464  001796  0012               	return		;funcret
  2465  001798                     __end_of_eeWriteChar:
  2466                           	opt stack 0
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           prodh	equ	0xFF4
  2472                           prodl	equ	0xFF3
  2473                           indf0	equ	0xFEF
  2474                           postinc0	equ	0xFEE
  2475                           fsr0h	equ	0xFEA
  2476                           fsr0l	equ	0xFE9
  2477                           postdec1	equ	0xFE5
  2478                           fsr1l	equ	0xFE1
  2479                           indf2	equ	0xFDF
  2480                           postinc2	equ	0xFDE
  2481                           postdec2	equ	0xFDD
  2482                           fsr2h	equ	0xFDA
  2483                           fsr2l	equ	0xFD9
  2484                           status	equ	0xFD8
  2485                           
  2486 ;; *************** function _wait *****************
  2487 ;; Defined at:
  2488 ;;		line 38 in file "exprom.h"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;		None
  2493 ;; Return value:  Size  Location     Type
  2494 ;;                  1    wreg      void 
  2495 ;; Registers used:
  2496 ;;		None
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;Total ram usage:        0 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    2
  2509 ;; This function calls:
  2510 ;;		Nothing
  2511 ;; This function is called by:
  2512 ;;		_XEERead
  2513 ;;		_eeWriteChar
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text10
  2518  001AB6                     __ptext10:
  2519                           	opt stack 0
  2520  001AB6                     _wait:
  2521                           	opt stack 25
  2522  001AB6                     l135:
  2523  001AB6  B0C7               	btfsc	4039,0,c	;volatile
  2524  001AB8  0012               	return	
  2525  001ABA  D7FD               	goto	l135
  2526  001ABC                     __end_of_wait:
  2527                           	opt stack 0
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           prodh	equ	0xFF4
  2533                           prodl	equ	0xFF3
  2534                           indf0	equ	0xFEF
  2535                           postinc0	equ	0xFEE
  2536                           fsr0h	equ	0xFEA
  2537                           fsr0l	equ	0xFE9
  2538                           postdec1	equ	0xFE5
  2539                           fsr1l	equ	0xFE1
  2540                           indf2	equ	0xFDF
  2541                           postinc2	equ	0xFDE
  2542                           postdec2	equ	0xFDD
  2543                           fsr2h	equ	0xFDA
  2544                           fsr2l	equ	0xFD9
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _XEEInit *****************
  2548 ;; Defined at:
  2549 ;;		line 44 in file "exprom.h"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, status,2, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;Total ram usage:        0 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    4
  2570 ;; This function calls:
  2571 ;;		_SPI1init
  2572 ;;		_SPI1out
  2573 ;; This function is called by:
  2574 ;;		_main
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text11
  2579  001A3E                     __ptext11:
  2580                           	opt stack 0
  2581  001A3E                     _XEEInit:
  2582                           	opt stack 26
  2583                           
  2584                           ;exprom.h: 45: (PORTCbits.RC6) = 1;
  2585                           
  2586                           ;incstack = 0
  2587  001A3E  8C82               	bsf	3970,6,c	;volatile
  2588                           
  2589                           ;exprom.h: 46: (TRISCbits.TRISC6) = 0;
  2590  001A40  9C94               	bcf	3988,6,c	;volatile
  2591                           
  2592                           ;exprom.h: 48: (TRISCbits.TRISC3) = 0;
  2593  001A42  9694               	bcf	3988,3,c	;volatile
  2594                           
  2595                           ;exprom.h: 49: (TRISCbits.TRISC4) = 1;
  2596  001A44  8894               	bsf	3988,4,c	;volatile
  2597                           
  2598                           ;exprom.h: 50: (TRISCbits.TRISC5) = 0;
  2599  001A46  9A94               	bcf	3988,5,c	;volatile
  2600                           
  2601                           ;exprom.h: 52: BAUDCON1 = 0x00;
  2602  001A48  0E00               	movlw	0
  2603  001A4A  6E7E               	movwf	3966,c	;volatile
  2604                           
  2605                           ;exprom.h: 60: SPI1init();
  2606  001A4C  EC42  F00D         	call	_SPI1init	;wreg free
  2607                           
  2608                           ;exprom.h: 61: SPI1out(0x00);
  2609  001A50  0E00               	movlw	0
  2610  001A52  EC53  F00D         	call	_SPI1out
  2611  001A56  0012               	return		;funcret
  2612  001A58                     __end_of_XEEInit:
  2613                           	opt stack 0
  2614                           tblptru	equ	0xFF8
  2615                           tblptrh	equ	0xFF7
  2616                           tblptrl	equ	0xFF6
  2617                           tablat	equ	0xFF5
  2618                           prodh	equ	0xFF4
  2619                           prodl	equ	0xFF3
  2620                           indf0	equ	0xFEF
  2621                           postinc0	equ	0xFEE
  2622                           fsr0h	equ	0xFEA
  2623                           fsr0l	equ	0xFE9
  2624                           postdec1	equ	0xFE5
  2625                           fsr1l	equ	0xFE1
  2626                           indf2	equ	0xFDF
  2627                           postinc2	equ	0xFDE
  2628                           postdec2	equ	0xFDD
  2629                           fsr2h	equ	0xFDA
  2630                           fsr2l	equ	0xFD9
  2631                           status	equ	0xFD8
  2632                           
  2633 ;; *************** function _SPI1init *****************
  2634 ;; Defined at:
  2635 ;;		line 6 in file "SPI.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;		None
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;		None
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2, cstack
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;Total ram usage:        0 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    3
  2656 ;; This function calls:
  2657 ;;		_SPI1out
  2658 ;; This function is called by:
  2659 ;;		_XEEInit
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text12
  2664  001A84                     __ptext12:
  2665                           	opt stack 0
  2666  001A84                     _SPI1init:
  2667                           	opt stack 26
  2668                           
  2669                           ;SPI.c: 8: SSP1CON1 = 0b00100010;
  2670                           
  2671                           ;incstack = 0
  2672  001A84  0E22               	movlw	34
  2673  001A86  6EC6               	movwf	4038,c	;volatile
  2674                           
  2675                           ;SPI.c: 9: SSP1STATbits.CKE = 1;
  2676  001A88  8CC7               	bsf	4039,6,c	;volatile
  2677                           
  2678                           ;SPI.c: 10: TRISCbits.TRISC3 = 0;
  2679  001A8A  9694               	bcf	3988,3,c	;volatile
  2680                           
  2681                           ;SPI.c: 11: TRISCbits.TRISC5 = 0;
  2682  001A8C  9A94               	bcf	3988,5,c	;volatile
  2683                           
  2684                           ;SPI.c: 12: SPI1out(0x00);
  2685  001A8E  0E00               	movlw	0
  2686  001A90  EC53  F00D         	call	_SPI1out
  2687  001A94  0012               	return		;funcret
  2688  001A96                     __end_of_SPI1init:
  2689                           	opt stack 0
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           prodh	equ	0xFF4
  2695                           prodl	equ	0xFF3
  2696                           indf0	equ	0xFEF
  2697                           postinc0	equ	0xFEE
  2698                           fsr0h	equ	0xFEA
  2699                           fsr0l	equ	0xFE9
  2700                           postdec1	equ	0xFE5
  2701                           fsr1l	equ	0xFE1
  2702                           indf2	equ	0xFDF
  2703                           postinc2	equ	0xFDE
  2704                           postdec2	equ	0xFDD
  2705                           fsr2h	equ	0xFDA
  2706                           fsr2l	equ	0xFD9
  2707                           status	equ	0xFD8
  2708                           
  2709 ;; *************** function _SPI1out *****************
  2710 ;; Defined at:
  2711 ;;		line 15 in file "SPI.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  Code            1    wreg     unsigned char 
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;  Code            1   31[COMRAM] unsigned char 
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      void 
  2718 ;; Registers used:
  2719 ;;		wreg
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;Total ram usage:        1 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    2
  2732 ;; This function calls:
  2733 ;;		Nothing
  2734 ;; This function is called by:
  2735 ;;		_SPI1init
  2736 ;;		_XEEInit
  2737 ;;		_XEERead
  2738 ;;		_eeWriteChar
  2739 ;;		_SPI_LCD4send
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text13
  2744  001AA6                     __ptext13:
  2745                           	opt stack 0
  2746  001AA6                     _SPI1out:
  2747                           	opt stack 25
  2748                           
  2749                           ;incstack = 0
  2750                           ;SPI1out@Code stored from wreg
  2751  001AA6  6E20               	movwf	SPI1out@Code,c
  2752                           
  2753                           ;SPI.c: 17: SSP1BUF = Code;
  2754  001AA8  C020  FFC9         	movff	SPI1out@Code,4041	;volatile
  2755  001AAC                     l61:
  2756  001AAC  A0C7               	btfss	4039,0,c	;volatile
  2757  001AAE  D7FE               	goto	l61
  2758                           
  2759                           ;SPI.c: 19: Code = SSP1BUF;
  2760  001AB0  CFC9 F020          	movff	4041,SPI1out@Code	;volatile
  2761  001AB4  0012               	return		;funcret
  2762  001AB6                     __end_of_SPI1out:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           prodh	equ	0xFF4
  2769                           prodl	equ	0xFF3
  2770                           indf0	equ	0xFEF
  2771                           postinc0	equ	0xFEE
  2772                           fsr0h	equ	0xFEA
  2773                           fsr0l	equ	0xFE9
  2774                           postdec1	equ	0xFE5
  2775                           fsr1l	equ	0xFE1
  2776                           indf2	equ	0xFDF
  2777                           postinc2	equ	0xFDE
  2778                           postdec2	equ	0xFDD
  2779                           fsr2h	equ	0xFDA
  2780                           fsr2l	equ	0xFD9
  2781                           status	equ	0xFD8
  2782                           
  2783 ;; *************** function _Read_KeyPad *****************
  2784 ;; Defined at:
  2785 ;;		line 14 in file "Keypad.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  i               2    1[BANK0 ] int 
  2790 ;;  code            1    4[BANK0 ] unsigned char 
  2791 ;;  Col             1    3[BANK0 ] unsigned char 
  2792 ;;  value           1    0[BANK0 ] unsigned char 
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      unsigned char 
  2795 ;; Registers used:
  2796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;Total ram usage:        5 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    3
  2809 ;; This function calls:
  2810 ;;		_process_key
  2811 ;; This function is called by:
  2812 ;;		_main
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           	psect	text14
  2817  0016BE                     __ptext14:
  2818                           	opt stack 0
  2819  0016BE                     _Read_KeyPad:
  2820                           	opt stack 27
  2821                           
  2822                           ;Keypad.c: 16: unsigned char code,Col,value;
  2823                           ;Keypad.c: 17: int i;
  2824                           ;Keypad.c: 18: value = 0xFF;
  2825                           
  2826                           ;incstack = 0
  2827  0016BE  0100               	movlb	0	; () banked
  2828  0016C0  6960               	setf	Read_KeyPad@value& (0+255),b
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;Keypad.c: 19: Col = 0b11111110;
  2832  0016C2  0EFE               	movlw	254
  2833  0016C4  0100               	movlb	0	; () banked
  2834  0016C6  6F63               	movwf	Read_KeyPad@Col& (0+255),b
  2835                           
  2836                           ;Keypad.c: 20: for (i=0;i<4;i++)
  2837  0016C8  0E00               	movlw	0
  2838  0016CA  0100               	movlb	0	; () banked
  2839  0016CC  6F62               	movwf	(Read_KeyPad@i+1)& (0+255),b
  2840  0016CE  0E00               	movlw	0
  2841  0016D0  6F61               	movwf	Read_KeyPad@i& (0+255),b
  2842  0016D2                     l2265:
  2843                           
  2844                           ; BSR set to: 0
  2845  0016D2  0100               	movlb	0	; () banked
  2846  0016D4  BF62               	btfsc	(Read_KeyPad@i+1)& (0+255),7,b
  2847  0016D6  D008               	goto	l16
  2848  0016D8  0100               	movlb	0	; () banked
  2849  0016DA  5162               	movf	(Read_KeyPad@i+1)& (0+255),w,b
  2850  0016DC  E128               	bnz	l2279
  2851  0016DE  0E04               	movlw	4
  2852  0016E0  0100               	movlb	0	; () banked
  2853  0016E2  5D61               	subwf	Read_KeyPad@i& (0+255),w,b
  2854  0016E4  B0D8               	btfsc	status,0,c
  2855  0016E6  D023               	goto	l2279
  2856  0016E8                     l16:
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;Keypad.c: 21: {
  2860                           ;Keypad.c: 22: LATD = Col;
  2861  0016E8  C063  FF8C         	movff	Read_KeyPad@Col,3980	;volatile
  2862                           
  2863                           ;Keypad.c: 23: code = PORTD;
  2864  0016EC  CF83 F064          	movff	3971,Read_KeyPad@code	;volatile
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;Keypad.c: 24: code = code | 0b00001111;
  2868  0016F0  0100               	movlb	0	; () banked
  2869  0016F2  5164               	movf	Read_KeyPad@code& (0+255),w,b
  2870  0016F4  090F               	iorlw	15
  2871  0016F6  0100               	movlb	0	; () banked
  2872  0016F8  6F64               	movwf	Read_KeyPad@code& (0+255),b
  2873                           
  2874                           ;Keypad.c: 25: code = code & Col;
  2875  0016FA  0100               	movlb	0	; () banked
  2876  0016FC  5164               	movf	Read_KeyPad@code& (0+255),w,b
  2877  0016FE  0100               	movlb	0	; () banked
  2878  001700  1563               	andwf	Read_KeyPad@Col& (0+255),w,b
  2879  001702  0100               	movlb	0	; () banked
  2880  001704  6F64               	movwf	Read_KeyPad@code& (0+255),b
  2881                           
  2882                           ;Keypad.c: 26: if (code!=Col)
  2883  001706  0100               	movlb	0	; () banked
  2884  001708  5163               	movf	Read_KeyPad@Col& (0+255),w,b
  2885  00170A  0100               	movlb	0	; () banked
  2886  00170C  1964               	xorwf	Read_KeyPad@code& (0+255),w,b
  2887  00170E  B4D8               	btfsc	status,2,c
  2888  001710  D007               	goto	l2273
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;Keypad.c: 27: {
  2892                           ;Keypad.c: 28: value = process_key(code);
  2893  001712  0100               	movlb	0	; () banked
  2894  001714  5164               	movf	Read_KeyPad@code& (0+255),w,b
  2895  001716  ECD9  F00C         	call	_process_key
  2896  00171A  0100               	movlb	0	; () banked
  2897  00171C  6F60               	movwf	Read_KeyPad@value& (0+255),b
  2898                           
  2899                           ;Keypad.c: 29: break;
  2900  00171E  D007               	goto	l2279
  2901  001720                     l2273:
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;Keypad.c: 30: }
  2905                           ;Keypad.c: 31: Col = (Col << 1) | 0x01;
  2906  001720  80D8               	bsf	status,0,c
  2907  001722  0100               	movlb	0	; () banked
  2908  001724  3763               	rlcf	Read_KeyPad@Col& (0+255),f,b
  2909                           
  2910                           ; BSR set to: 0
  2911  001726  0100               	movlb	0	; () banked
  2912  001728  4B61               	infsnz	Read_KeyPad@i& (0+255),f,b
  2913  00172A  2B62               	incf	(Read_KeyPad@i+1)& (0+255),f,b
  2914  00172C  D7D2               	goto	l2265
  2915  00172E                     l2279:
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;Keypad.c: 32: }
  2919                           ;Keypad.c: 34: return(value);
  2920  00172E  0100               	movlb	0	; () banked
  2921  001730  5160               	movf	Read_KeyPad@value& (0+255),w,b
  2922  001732  0012               	return	
  2923  001734                     __end_of_Read_KeyPad:
  2924                           	opt stack 0
  2925                           tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           prodh	equ	0xFF4
  2930                           prodl	equ	0xFF3
  2931                           indf0	equ	0xFEF
  2932                           postinc0	equ	0xFEE
  2933                           fsr0h	equ	0xFEA
  2934                           fsr0l	equ	0xFE9
  2935                           postdec1	equ	0xFE5
  2936                           fsr1l	equ	0xFE1
  2937                           indf2	equ	0xFDF
  2938                           postinc2	equ	0xFDE
  2939                           postdec2	equ	0xFDD
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _process_key *****************
  2945 ;; Defined at:
  2946 ;;		line 37 in file "Keypad.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  code            1    wreg     unsigned char 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  code            1   32[COMRAM] unsigned char 
  2951 ;;  i               1   33[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      unsigned char 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;Total ram usage:        3 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    2
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_Read_KeyPad
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text15
  2976  0019B2                     __ptext15:
  2977                           	opt stack 0
  2978  0019B2                     _process_key:
  2979                           	opt stack 27
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;incstack = 0
  2983                           ;process_key@code stored from wreg
  2984  0019B2  6E21               	movwf	process_key@code,c
  2985                           
  2986                           ;Keypad.c: 39: unsigned char i;
  2987                           ;Keypad.c: 40: for (i=0;i<16;i++)
  2988  0019B4  0E00               	movlw	0
  2989  0019B6  6E22               	movwf	process_key@i,c
  2990  0019B8                     l2227:
  2991  0019B8  0E0F               	movlw	15
  2992  0019BA  6422               	cpfsgt	process_key@i,c
  2993  0019BC  D001               	goto	l2231
  2994  0019BE  D010               	goto	l2241
  2995  0019C0                     l2231:
  2996                           
  2997                           ;Keypad.c: 41: {
  2998                           ;Keypad.c: 42: if (code==scan_code[i]) return i;
  2999  0019C0  5022               	movf	process_key@i,w,c
  3000  0019C2  0D01               	mullw	1
  3001  0019C4  0E24               	movlw	low _scan_code
  3002  0019C6  24F3               	addwf	prodl,w,c
  3003  0019C8  6ED9               	movwf	fsr2l,c
  3004  0019CA  0E00               	movlw	high _scan_code
  3005  0019CC  20F4               	addwfc	prodh,w,c
  3006  0019CE  6EDA               	movwf	fsr2h,c
  3007  0019D0  5021               	movf	process_key@code,w,c
  3008  0019D2  18DE               	xorwf	postinc2,w,c
  3009  0019D4  A4D8               	btfss	status,2,c
  3010  0019D6  D002               	goto	l2237
  3011  0019D8  5022               	movf	process_key@i,w,c
  3012  0019DA  0012               	return	
  3013  0019DC                     l2237:
  3014  0019DC  2A22               	incf	process_key@i,f,c
  3015  0019DE  D7EC               	goto	l2227
  3016  0019E0                     l2241:
  3017                           
  3018                           ;Keypad.c: 43: }
  3019                           ;Keypad.c: 44: return(0xFF);
  3020  0019E0  0EFF               	movlw	255
  3021  0019E2  0012               	return	
  3022  0019E4                     __end_of_process_key:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           prodh	equ	0xFF4
  3029                           prodl	equ	0xFF3
  3030                           indf0	equ	0xFEF
  3031                           postinc0	equ	0xFEE
  3032                           fsr0h	equ	0xFEA
  3033                           fsr0l	equ	0xFE9
  3034                           postdec1	equ	0xFE5
  3035                           fsr1l	equ	0xFE1
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           postdec2	equ	0xFDD
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function _LCD8init *****************
  3044 ;; Defined at:
  3045 ;;		line 12 in file "LCD8.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;		None
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;		None
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      void 
  3052 ;; Registers used:
  3053 ;;		wreg, status,2, status,0, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;Total ram usage:        0 bytes
  3064 ;; Hardware stack levels used:    1
  3065 ;; Hardware stack levels required when called:    4
  3066 ;; This function calls:
  3067 ;;		_LCD8send
  3068 ;;		_delay_ms
  3069 ;; This function is called by:
  3070 ;;		_main
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text16
  3075  0014D8                     __ptext16:
  3076                           	opt stack 0
  3077  0014D8                     _LCD8init:
  3078                           	opt stack 26
  3079                           
  3080                           ;LCD8.c: 14: TRISE = 0x00;
  3081                           
  3082                           ;incstack = 0
  3083  0014D8  0E00               	movlw	0
  3084  0014DA  6E96               	movwf	3990,c	;volatile
  3085                           
  3086                           ;LCD8.c: 15: TRISH = 0b11111000;
  3087  0014DC  0EF8               	movlw	248
  3088  0014DE  6E99               	movwf	3993,c	;volatile
  3089                           
  3090                           ;LCD8.c: 16: LATHbits.LATH1 = 0;
  3091  0014E0  9290               	bcf	3984,1,c	;volatile
  3092                           
  3093                           ;LCD8.c: 17: LATHbits.LATH0 = 0;
  3094  0014E2  9090               	bcf	3984,0,c	;volatile
  3095                           
  3096                           ;LCD8.c: 18: LATHbits.LATH2 = 0;
  3097  0014E4  9490               	bcf	3984,2,c	;volatile
  3098                           
  3099                           ;LCD8.c: 19: delay_ms(200);
  3100  0014E6  0E00               	movlw	0
  3101  0014E8  6E21               	movwf	delay_ms@x+1,c
  3102  0014EA  0EC8               	movlw	200
  3103  0014EC  6E20               	movwf	delay_ms@x,c
  3104  0014EE  EC9E  F00C         	call	_delay_ms	;wreg free
  3105                           
  3106                           ;LCD8.c: 21: LCD8send(0x30,0);
  3107  0014F2  0E00               	movlw	0
  3108  0014F4  6E23               	movwf	LCD8send@mode,c
  3109  0014F6  0E30               	movlw	48
  3110  0014F8  EC80  F00C         	call	_LCD8send
  3111                           
  3112                           ;LCD8.c: 22: LCD8send(0x30,0);
  3113  0014FC  0E00               	movlw	0
  3114  0014FE  6E23               	movwf	LCD8send@mode,c
  3115  001500  0E30               	movlw	48
  3116  001502  EC80  F00C         	call	_LCD8send
  3117                           
  3118                           ;LCD8.c: 23: LCD8send(0x30,0);
  3119  001506  0E00               	movlw	0
  3120  001508  6E23               	movwf	LCD8send@mode,c
  3121  00150A  0E30               	movlw	48
  3122  00150C  EC80  F00C         	call	_LCD8send
  3123                           
  3124                           ;LCD8.c: 24: LCD8send(0x38,0);
  3125  001510  0E00               	movlw	0
  3126  001512  6E23               	movwf	LCD8send@mode,c
  3127  001514  0E38               	movlw	56
  3128  001516  EC80  F00C         	call	_LCD8send
  3129                           
  3130                           ;LCD8.c: 25: LCD8send(0x10,0);
  3131  00151A  0E00               	movlw	0
  3132  00151C  6E23               	movwf	LCD8send@mode,c
  3133  00151E  0E10               	movlw	16
  3134  001520  EC80  F00C         	call	_LCD8send
  3135                           
  3136                           ;LCD8.c: 26: LCD8send(0x0F,0);
  3137  001524  0E00               	movlw	0
  3138  001526  6E23               	movwf	LCD8send@mode,c
  3139  001528  0E0F               	movlw	15
  3140  00152A  EC80  F00C         	call	_LCD8send
  3141                           
  3142                           ;LCD8.c: 27: LCD8send(0x06,0);
  3143  00152E  0E00               	movlw	0
  3144  001530  6E23               	movwf	LCD8send@mode,c
  3145  001532  0E06               	movlw	6
  3146  001534  EC80  F00C         	call	_LCD8send
  3147                           
  3148                           ;LCD8.c: 28: LCD8send(0x01,0);
  3149  001538  0E00               	movlw	0
  3150  00153A  6E23               	movwf	LCD8send@mode,c
  3151  00153C  0E01               	movlw	1
  3152  00153E  EC80  F00C         	call	_LCD8send
  3153                           
  3154                           ;LCD8.c: 29: delay_ms(100);
  3155  001542  0E00               	movlw	0
  3156  001544  6E21               	movwf	delay_ms@x+1,c
  3157  001546  0E64               	movlw	100
  3158  001548  6E20               	movwf	delay_ms@x,c
  3159  00154A  EC9E  F00C         	call	_delay_ms	;wreg free
  3160                           
  3161                           ;LCD8.c: 31: LCD8send(0x8A,0);
  3162  00154E  0E00               	movlw	0
  3163  001550  6E23               	movwf	LCD8send@mode,c
  3164  001552  0E8A               	movlw	138
  3165  001554  EC80  F00C         	call	_LCD8send
  3166                           
  3167                           ;LCD8.c: 33: LCD8send('N',1);
  3168  001558  0E01               	movlw	1
  3169  00155A  6E23               	movwf	LCD8send@mode,c
  3170  00155C  0E4E               	movlw	78
  3171  00155E  EC80  F00C         	call	_LCD8send
  3172                           
  3173                           ;LCD8.c: 34: LCD8send('A',1);
  3174  001562  0E01               	movlw	1
  3175  001564  6E23               	movwf	LCD8send@mode,c
  3176  001566  0E41               	movlw	65
  3177  001568  EC80  F00C         	call	_LCD8send
  3178                           
  3179                           ;LCD8.c: 35: LCD8send('M',1);
  3180  00156C  0E01               	movlw	1
  3181  00156E  6E23               	movwf	LCD8send@mode,c
  3182  001570  0E4D               	movlw	77
  3183  001572  EC80  F00C         	call	_LCD8send
  3184                           
  3185                           ;LCD8.c: 36: LCD8send('E',1);
  3186  001576  0E01               	movlw	1
  3187  001578  6E23               	movwf	LCD8send@mode,c
  3188  00157A  0E45               	movlw	69
  3189  00157C  EC80  F00C         	call	_LCD8send
  3190                           
  3191                           ;LCD8.c: 38: LCD8send(0xC0,0);
  3192  001580  0E00               	movlw	0
  3193  001582  6E23               	movwf	LCD8send@mode,c
  3194  001584  0EC0               	movlw	192
  3195  001586  EC80  F00C         	call	_LCD8send
  3196                           
  3197                           ;LCD8.c: 39: LCD8send('#',1);
  3198  00158A  0E01               	movlw	1
  3199  00158C  6E23               	movwf	LCD8send@mode,c
  3200  00158E  0E23               	movlw	35
  3201  001590  EC80  F00C         	call	_LCD8send
  3202  001594  0012               	return		;funcret
  3203  001596                     __end_of_LCD8init:
  3204                           	opt stack 0
  3205                           tblptru	equ	0xFF8
  3206                           tblptrh	equ	0xFF7
  3207                           tblptrl	equ	0xFF6
  3208                           tablat	equ	0xFF5
  3209                           prodh	equ	0xFF4
  3210                           prodl	equ	0xFF3
  3211                           indf0	equ	0xFEF
  3212                           postinc0	equ	0xFEE
  3213                           fsr0h	equ	0xFEA
  3214                           fsr0l	equ	0xFE9
  3215                           postdec1	equ	0xFE5
  3216                           fsr1l	equ	0xFE1
  3217                           indf2	equ	0xFDF
  3218                           postinc2	equ	0xFDE
  3219                           postdec2	equ	0xFDD
  3220                           fsr2h	equ	0xFDA
  3221                           fsr2l	equ	0xFD9
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function _LCD8send *****************
  3225 ;; Defined at:
  3226 ;;		line 42 in file "LCD8.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;  c               1    wreg     unsigned char 
  3229 ;;  mode            1   34[COMRAM] unsigned char 
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;  c               1    2[BANK0 ] unsigned char 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  1    wreg      void 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2, status,0, cstack
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3241 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;Total ram usage:        2 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:    3
  3248 ;; This function calls:
  3249 ;;		_delay_ms
  3250 ;;		_delay_us
  3251 ;; This function is called by:
  3252 ;;		_LCD8init
  3253 ;;		_lcdWriteLine
  3254 ;;		_writeLCD
  3255 ;;		_main
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text17
  3260  001900                     __ptext17:
  3261                           	opt stack 0
  3262  001900                     _LCD8send:
  3263                           	opt stack 25
  3264                           
  3265                           ;incstack = 0
  3266                           ;LCD8send@c stored from wreg
  3267  001900  0100               	movlb	0	; () banked
  3268  001902  6F62               	movwf	LCD8send@c& (0+255),b
  3269                           
  3270                           ;LCD8.c: 43: LATHbits.LATH2 = mode;
  3271  001904  B023               	btfsc	LCD8send@mode,0,c
  3272  001906  D002               	bra	u1395
  3273  001908  9490               	bcf	3984,2,c	;volatile
  3274  00190A  D001               	bra	u1396
  3275  00190C                     u1395:
  3276  00190C  8490               	bsf	3984,2,c	;volatile
  3277  00190E                     u1396:
  3278                           
  3279                           ;LCD8.c: 44: delay_ms(1);
  3280  00190E  0E00               	movlw	0
  3281  001910  6E21               	movwf	delay_ms@x+1,c
  3282  001912  0E01               	movlw	1
  3283  001914  6E20               	movwf	delay_ms@x,c
  3284  001916  EC9E  F00C         	call	_delay_ms	;wreg free
  3285                           
  3286                           ;LCD8.c: 46: LATE = c;
  3287  00191A  C062  FF8D         	movff	LCD8send@c,3981	;volatile
  3288                           
  3289                           ;LCD8.c: 47: LATHbits.LATH0 = 1;
  3290  00191E  8090               	bsf	3984,0,c	;volatile
  3291                           
  3292                           ;LCD8.c: 48: delay_us(1);
  3293  001920  0E00               	movlw	0
  3294  001922  6E21               	movwf	delay_us@x+1,c
  3295  001924  0E01               	movlw	1
  3296  001926  6E20               	movwf	delay_us@x,c
  3297  001928  ECF2  F00C         	call	_delay_us	;wreg free
  3298                           
  3299                           ;LCD8.c: 49: LATHbits.LATH0 = 0;
  3300  00192C  9090               	bcf	3984,0,c	;volatile
  3301                           
  3302                           ;LCD8.c: 50: delay_us(50);
  3303  00192E  0E00               	movlw	0
  3304  001930  6E21               	movwf	delay_us@x+1,c
  3305  001932  0E32               	movlw	50
  3306  001934  6E20               	movwf	delay_us@x,c
  3307  001936  ECF2  F00C         	call	_delay_us	;wreg free
  3308  00193A  0012               	return		;funcret
  3309  00193C                     __end_of_LCD8send:
  3310                           	opt stack 0
  3311                           tblptru	equ	0xFF8
  3312                           tblptrh	equ	0xFF7
  3313                           tblptrl	equ	0xFF6
  3314                           tablat	equ	0xFF5
  3315                           prodh	equ	0xFF4
  3316                           prodl	equ	0xFF3
  3317                           indf0	equ	0xFEF
  3318                           postinc0	equ	0xFEE
  3319                           fsr0h	equ	0xFEA
  3320                           fsr0l	equ	0xFE9
  3321                           postdec1	equ	0xFE5
  3322                           fsr1l	equ	0xFE1
  3323                           indf2	equ	0xFDF
  3324                           postinc2	equ	0xFDE
  3325                           postdec2	equ	0xFDD
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function _delay_us *****************
  3331 ;; Defined at:
  3332 ;;		line 87 in file "delay.h"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  x               2   31[COMRAM] int 
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  i               2    0[BANK0 ] int 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      void 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;Total ram usage:        5 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    2
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_LCD8send
  3357 ;;		_SPI_LCD4send
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text18
  3362  0019E4                     __ptext18:
  3363                           	opt stack 0
  3364  0019E4                     _delay_us:
  3365                           	opt stack 25
  3366                           
  3367                           ;delay.h: 89: for (int i = 0; i < x; i++)
  3368                           
  3369                           ;incstack = 0
  3370  0019E4  0E00               	movlw	0
  3371  0019E6  0100               	movlb	0	; () banked
  3372  0019E8  6F61               	movwf	(delay_us@i+1)& (0+255),b
  3373  0019EA  0E00               	movlw	0
  3374  0019EC  6F60               	movwf	delay_us@i& (0+255),b
  3375  0019EE  D006               	goto	l2083
  3376  0019F0                     l128:
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;delay.h: 90: {
  3380                           ;delay.h: 91: _delay((unsigned long)((1)*(25000000/4000000.0)));
  3381  0019F0  D000               	nop2		;2 cycle nop
  3382  0019F2  D000               	nop2		;2 cycle nop
  3383  0019F4  D000               	nop2		;2 cycle nop
  3384  0019F6  0100               	movlb	0	; () banked
  3385  0019F8  4B60               	infsnz	delay_us@i& (0+255),f,b
  3386  0019FA  2B61               	incf	(delay_us@i+1)& (0+255),f,b
  3387  0019FC                     l2083:
  3388                           
  3389                           ; BSR set to: 0
  3390  0019FC  5020               	movf	delay_us@x,w,c
  3391  0019FE  0100               	movlb	0	; () banked
  3392  001A00  5D60               	subwf	delay_us@i& (0+255),w,b
  3393  001A02  0100               	movlb	0	; () banked
  3394  001A04  5161               	movf	(delay_us@i+1)& (0+255),w,b
  3395  001A06  0A80               	xorlw	128
  3396  001A08  6E22               	movwf	??_delay_us& (0+255),c
  3397  001A0A  5021               	movf	delay_us@x+1,w,c
  3398  001A0C  0A80               	xorlw	128
  3399  001A0E  5822               	subwfb	??_delay_us& (0+255),w,c
  3400  001A10  B0D8               	btfsc	status,0,c
  3401  001A12  0012               	return	
  3402  001A14  D7ED               	goto	l128
  3403  001A16                     __end_of_delay_us:
  3404                           	opt stack 0
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           prodh	equ	0xFF4
  3410                           prodl	equ	0xFF3
  3411                           indf0	equ	0xFEF
  3412                           postinc0	equ	0xFEE
  3413                           fsr0h	equ	0xFEA
  3414                           fsr0l	equ	0xFE9
  3415                           postdec1	equ	0xFE5
  3416                           fsr1l	equ	0xFE1
  3417                           indf2	equ	0xFDF
  3418                           postinc2	equ	0xFDE
  3419                           postdec2	equ	0xFDD
  3420                           fsr2h	equ	0xFDA
  3421                           fsr2l	equ	0xFD9
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function _delay_ms *****************
  3425 ;; Defined at:
  3426 ;;		line 79 in file "delay.h"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  x               2   31[COMRAM] int 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  i               2    0[BANK0 ] int 
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  1    wreg      void 
  3433 ;; Registers used:
  3434 ;;		wreg, status,2, status,0
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3440 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;Total ram usage:        5 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    2
  3447 ;; This function calls:
  3448 ;;		Nothing
  3449 ;; This function is called by:
  3450 ;;		_LCD8init
  3451 ;;		_LCD8send
  3452 ;;		_eeWriteChar
  3453 ;;		_main
  3454 ;;		_SPI_LCD4send
  3455 ;;		_SPI_LCD4init
  3456 ;;		_writeEEPROM
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text19
  3461  00193C                     __ptext19:
  3462                           	opt stack 0
  3463  00193C                     _delay_ms:
  3464                           	opt stack 25
  3465                           
  3466                           ;delay.h: 81: for (int i = 0; i < x; i++)
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;incstack = 0
  3470  00193C  0E00               	movlw	0
  3471  00193E  0100               	movlb	0	; () banked
  3472  001940  6F61               	movwf	(delay_ms@i+1)& (0+255),b
  3473  001942  0E00               	movlw	0
  3474  001944  6F60               	movwf	delay_ms@i& (0+255),b
  3475  001946  D00B               	goto	l121
  3476  001948                     l2075:
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;delay.h: 82: {
  3480                           ;delay.h: 83: _delay((unsigned long)((1)*(25000000/4000.0)));
  3481  001948  0E09               	movlw	9
  3482  00194A  6E22               	movwf	??_delay_ms& (0+255),c
  3483  00194C  0E1C               	movlw	28
  3484  00194E                     u1907:
  3485  00194E  2EE8               	decfsz	wreg,f,c
  3486  001950  D7FE               	goto	u1907
  3487  001952  2E22               	decfsz	??_delay_ms& (0+255),f,c
  3488  001954  D7FC               	goto	u1907
  3489  001956  D000               	nop2	
  3490  001958  0100               	movlb	0	; () banked
  3491  00195A  4B60               	infsnz	delay_ms@i& (0+255),f,b
  3492  00195C  2B61               	incf	(delay_ms@i+1)& (0+255),f,b
  3493  00195E                     l121:
  3494                           
  3495                           ; BSR set to: 0
  3496  00195E  5020               	movf	delay_ms@x,w,c
  3497  001960  0100               	movlb	0	; () banked
  3498  001962  5D60               	subwf	delay_ms@i& (0+255),w,b
  3499  001964  0100               	movlb	0	; () banked
  3500  001966  5161               	movf	(delay_ms@i+1)& (0+255),w,b
  3501  001968  0A80               	xorlw	128
  3502  00196A  6E22               	movwf	??_delay_ms& (0+255),c
  3503  00196C  5021               	movf	delay_ms@x+1,w,c
  3504  00196E  0A80               	xorlw	128
  3505  001970  5822               	subwfb	??_delay_ms& (0+255),w,c
  3506  001972  B0D8               	btfsc	status,0,c
  3507  001974  0012               	return	
  3508  001976  D7E8               	goto	l2075
  3509  001978                     __end_of_delay_ms:
  3510                           	opt stack 0
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           prodh	equ	0xFF4
  3516                           prodl	equ	0xFF3
  3517                           indf0	equ	0xFEF
  3518                           postinc0	equ	0xFEE
  3519                           fsr0h	equ	0xFEA
  3520                           fsr0l	equ	0xFE9
  3521                           wreg	equ	0xFE8
  3522                           postdec1	equ	0xFE5
  3523                           fsr1l	equ	0xFE1
  3524                           indf2	equ	0xFDF
  3525                           postinc2	equ	0xFDE
  3526                           postdec2	equ	0xFDD
  3527                           fsr2h	equ	0xFDA
  3528                           fsr2l	equ	0xFD9
  3529                           status	equ	0xFD8
  3530                           
  3531 ;; *************** function _KeyPadinit *****************
  3532 ;; Defined at:
  3533 ;;		line 10 in file "Keypad.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;		None
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;		None
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  1    wreg      void 
  3540 ;; Registers used:
  3541 ;;		wreg, status,2
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;Total ram usage:        0 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; Hardware stack levels required when called:    2
  3554 ;; This function calls:
  3555 ;;		Nothing
  3556 ;; This function is called by:
  3557 ;;		_main
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           	psect	text20
  3562  001ABC                     __ptext20:
  3563                           	opt stack 0
  3564  001ABC                     _KeyPadinit:
  3565                           	opt stack 28
  3566                           
  3567                           ;Keypad.c: 11: TRISD = 0xF0;
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;incstack = 0
  3571  001ABC  0EF0               	movlw	240
  3572  001ABE  6E95               	movwf	3989,c	;volatile
  3573  001AC0  0012               	return		;funcret
  3574  001AC2                     __end_of_KeyPadinit:
  3575                           	opt stack 0
  3576                           tblptru	equ	0xFF8
  3577                           tblptrh	equ	0xFF7
  3578                           tblptrl	equ	0xFF6
  3579                           tablat	equ	0xFF5
  3580                           prodh	equ	0xFF4
  3581                           prodl	equ	0xFF3
  3582                           indf0	equ	0xFEF
  3583                           postinc0	equ	0xFEE
  3584                           fsr0h	equ	0xFEA
  3585                           fsr0l	equ	0xFE9
  3586                           wreg	equ	0xFE8
  3587                           postdec1	equ	0xFE5
  3588                           fsr1l	equ	0xFE1
  3589                           indf2	equ	0xFDF
  3590                           postinc2	equ	0xFDE
  3591                           postdec2	equ	0xFDD
  3592                           fsr2h	equ	0xFDA
  3593                           fsr2l	equ	0xFD9
  3594                           status	equ	0xFD8
  3595                           
  3596 ;; *************** function _LowIsr *****************
  3597 ;; Defined at:
  3598 ;;		line 32 in file "test.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;		None
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		None
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;Total ram usage:       17 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    1
  3619 ;; This function calls:
  3620 ;;		Nothing
  3621 ;; This function is called by:
  3622 ;;		Interrupt level 1
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	intcodelo
  3627  000018                     __pintcodelo:
  3628                           	opt stack 0
  3629  000018                     _LowIsr:
  3630                           	opt stack 24
  3631                           
  3632                           ;incstack = 0
  3633  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3634  00001A  CFD8 F00F          	movff	status,??_LowIsr
  3635  00001E  CFE8 F010          	movff	wreg,??_LowIsr+1
  3636  000022  CFE0 F011          	movff	bsr,??_LowIsr+2
  3637  000026  CFFA F012          	movff	pclath,??_LowIsr+3
  3638  00002A  CFFB F013          	movff	pclatu,??_LowIsr+4
  3639  00002E  CFE9 F014          	movff	fsr0l,??_LowIsr+5
  3640  000032  CFEA F015          	movff	fsr0h,??_LowIsr+6
  3641  000036  CFE1 F016          	movff	fsr1l,??_LowIsr+7
  3642  00003A  CFE2 F017          	movff	fsr1h,??_LowIsr+8
  3643  00003E  CFD9 F018          	movff	fsr2l,??_LowIsr+9
  3644  000042  CFDA F019          	movff	fsr2h,??_LowIsr+10
  3645  000046  CFF3 F01A          	movff	prodl,??_LowIsr+11
  3646  00004A  CFF4 F01B          	movff	prodh,??_LowIsr+12
  3647  00004E  CFF6 F01C          	movff	tblptrl,??_LowIsr+13
  3648  000052  CFF7 F01D          	movff	tblptrh,??_LowIsr+14
  3649  000056  CFF8 F01E          	movff	tblptru,??_LowIsr+15
  3650  00005A  CFF5 F01F          	movff	tablat,??_LowIsr+16
  3651  00005E  C01F  FFF5         	movff	??_LowIsr+16,tablat
  3652  000062  C01E  FFF8         	movff	??_LowIsr+15,tblptru
  3653  000066  C01D  FFF7         	movff	??_LowIsr+14,tblptrh
  3654  00006A  C01C  FFF6         	movff	??_LowIsr+13,tblptrl
  3655  00006E  C01B  FFF4         	movff	??_LowIsr+12,prodh
  3656  000072  C01A  FFF3         	movff	??_LowIsr+11,prodl
  3657  000076  C019  FFDA         	movff	??_LowIsr+10,fsr2h
  3658  00007A  C018  FFD9         	movff	??_LowIsr+9,fsr2l
  3659  00007E  C017  FFE2         	movff	??_LowIsr+8,fsr1h
  3660  000082  C016  FFE1         	movff	??_LowIsr+7,fsr1l
  3661  000086  C015  FFEA         	movff	??_LowIsr+6,fsr0h
  3662  00008A  C014  FFE9         	movff	??_LowIsr+5,fsr0l
  3663  00008E  C013  FFFB         	movff	??_LowIsr+4,pclatu
  3664  000092  C012  FFFA         	movff	??_LowIsr+3,pclath
  3665  000096  C011  FFE0         	movff	??_LowIsr+2,bsr
  3666  00009A  C010  FFE8         	movff	??_LowIsr+1,wreg
  3667  00009E  C00F  FFD8         	movff	??_LowIsr,status
  3668  0000A2  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3669  0000A4  0010               	retfie	
  3670  0000A6                     __end_of_LowIsr:
  3671                           	opt stack 0
  3672                           pclatu	equ	0xFFB
  3673                           pclath	equ	0xFFA
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           indf0	equ	0xFEF
  3681                           postinc0	equ	0xFEE
  3682                           fsr0h	equ	0xFEA
  3683                           fsr0l	equ	0xFE9
  3684                           wreg	equ	0xFE8
  3685                           postdec1	equ	0xFE5
  3686                           fsr1h	equ	0xFE2
  3687                           fsr1l	equ	0xFE1
  3688                           bsr	equ	0xFE0
  3689                           indf2	equ	0xFDF
  3690                           postinc2	equ	0xFDE
  3691                           postdec2	equ	0xFDD
  3692                           fsr2h	equ	0xFDA
  3693                           fsr2l	equ	0xFD9
  3694                           status	equ	0xFD8
  3695                           
  3696 ;; *************** function _HighIsr *****************
  3697 ;; Defined at:
  3698 ;;		line 18 in file "test.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;		None
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;Total ram usage:       14 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; This function calls:
  3719 ;;		Nothing
  3720 ;; This function is called by:
  3721 ;;		Interrupt level 2
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	intcode
  3726  000008                     __pintcode:
  3727                           	opt stack 0
  3728  000008                     _HighIsr:
  3729                           	opt stack 24
  3730                           
  3731                           ;incstack = 0
  3732  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3733  00000A  CFFA F001          	movff	pclath,??_HighIsr
  3734  00000E  CFFB F002          	movff	pclatu,??_HighIsr+1
  3735  000012  EF16  F00B         	goto	int_func
  3736                           pclatu	equ	0xFFB
  3737                           pclath	equ	0xFFA
  3738                           tblptru	equ	0xFF8
  3739                           tblptrh	equ	0xFF7
  3740                           tblptrl	equ	0xFF6
  3741                           tablat	equ	0xFF5
  3742                           prodh	equ	0xFF4
  3743                           prodl	equ	0xFF3
  3744                           indf0	equ	0xFEF
  3745                           postinc0	equ	0xFEE
  3746                           fsr0h	equ	0xFEA
  3747                           fsr0l	equ	0xFE9
  3748                           wreg	equ	0xFE8
  3749                           postdec1	equ	0xFE5
  3750                           fsr1h	equ	0xFE2
  3751                           fsr1l	equ	0xFE1
  3752                           bsr	equ	0xFE0
  3753                           indf2	equ	0xFDF
  3754                           postinc2	equ	0xFDE
  3755                           postdec2	equ	0xFDD
  3756                           fsr2h	equ	0xFDA
  3757                           fsr2l	equ	0xFD9
  3758                           status	equ	0xFD8
  3759                           
  3760                           	psect	intcode_body
  3761  00162C                     __pintcode_body:
  3762                           	opt stack 24
  3763  00162C                     int_func:
  3764                           	opt stack 24
  3765  00162C  CFE9 F003          	movff	fsr0l,??_HighIsr+2
  3766  001630  CFEA F004          	movff	fsr0h,??_HighIsr+3
  3767  001634  CFE1 F005          	movff	fsr1l,??_HighIsr+4
  3768  001638  CFE2 F006          	movff	fsr1h,??_HighIsr+5
  3769  00163C  CFD9 F007          	movff	fsr2l,??_HighIsr+6
  3770  001640  CFDA F008          	movff	fsr2h,??_HighIsr+7
  3771  001644  CFF3 F009          	movff	prodl,??_HighIsr+8
  3772  001648  CFF4 F00A          	movff	prodh,??_HighIsr+9
  3773  00164C  CFF6 F00B          	movff	tblptrl,??_HighIsr+10
  3774  001650  CFF7 F00C          	movff	tblptrh,??_HighIsr+11
  3775  001654  CFF8 F00D          	movff	tblptru,??_HighIsr+12
  3776  001658  CFF5 F00E          	movff	tablat,??_HighIsr+13
  3777                           
  3778                           ;test.c: 20: if (PIR3bits.TMR4IF==1)
  3779  00165C  A6A4               	btfss	4004,3,c	;volatile
  3780  00165E  D011               	goto	i2l229
  3781                           
  3782                           ;test.c: 21: {
  3783                           ;test.c: 22: counter++;
  3784  001660  4A3C               	infsnz	_counter,f,c
  3785  001662  2A3D               	incf	_counter+1,f,c
  3786                           
  3787                           ;test.c: 23: if (counter>=1000)
  3788  001664  BE3D               	btfsc	_counter+1,7,c
  3789  001666  D00C               	goto	i2l1469
  3790  001668  0EE8               	movlw	232
  3791  00166A  5C3C               	subwf	_counter,w,c
  3792  00166C  0E03               	movlw	3
  3793  00166E  583D               	subwfb	_counter+1,w,c
  3794  001670  A0D8               	btfss	status,0,c
  3795  001672  D006               	goto	i2l1469
  3796                           
  3797                           ;test.c: 24: {
  3798                           ;test.c: 25: sec++;
  3799  001674  4A3E               	infsnz	_sec,f,c
  3800  001676  2A3F               	incf	_sec+1,f,c
  3801                           
  3802                           ;test.c: 26: counter=0;
  3803  001678  0E00               	movlw	0
  3804  00167A  6E3D               	movwf	_counter+1,c
  3805  00167C  0E00               	movlw	0
  3806  00167E  6E3C               	movwf	_counter,c
  3807  001680                     i2l1469:
  3808                           
  3809                           ;test.c: 27: }
  3810                           ;test.c: 28: PIR3bits.TMR4IF = 0;
  3811  001680  96A4               	bcf	4004,3,c	;volatile
  3812  001682                     i2l229:
  3813  001682  C00E  FFF5         	movff	??_HighIsr+13,tablat
  3814  001686  C00D  FFF8         	movff	??_HighIsr+12,tblptru
  3815  00168A  C00C  FFF7         	movff	??_HighIsr+11,tblptrh
  3816  00168E  C00B  FFF6         	movff	??_HighIsr+10,tblptrl
  3817  001692  C00A  FFF4         	movff	??_HighIsr+9,prodh
  3818  001696  C009  FFF3         	movff	??_HighIsr+8,prodl
  3819  00169A  C008  FFDA         	movff	??_HighIsr+7,fsr2h
  3820  00169E  C007  FFD9         	movff	??_HighIsr+6,fsr2l
  3821  0016A2  C006  FFE2         	movff	??_HighIsr+5,fsr1h
  3822  0016A6  C005  FFE1         	movff	??_HighIsr+4,fsr1l
  3823  0016AA  C004  FFEA         	movff	??_HighIsr+3,fsr0h
  3824  0016AE  C003  FFE9         	movff	??_HighIsr+2,fsr0l
  3825  0016B2  C002  FFFB         	movff	??_HighIsr+1,pclatu
  3826  0016B6  C001  FFFA         	movff	??_HighIsr,pclath
  3827  0016BA  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3828  0016BC  0011               	retfie		f
  3829  0016BE                     __end_of_HighIsr:
  3830                           	opt stack 0
  3831                           pclatu	equ	0xFFB
  3832                           pclath	equ	0xFFA
  3833                           tblptru	equ	0xFF8
  3834                           tblptrh	equ	0xFF7
  3835                           tblptrl	equ	0xFF6
  3836                           tablat	equ	0xFF5
  3837                           prodh	equ	0xFF4
  3838                           prodl	equ	0xFF3
  3839                           indf0	equ	0xFEF
  3840                           postinc0	equ	0xFEE
  3841                           fsr0h	equ	0xFEA
  3842                           fsr0l	equ	0xFE9
  3843                           wreg	equ	0xFE8
  3844                           postdec1	equ	0xFE5
  3845                           fsr1h	equ	0xFE2
  3846                           fsr1l	equ	0xFE1
  3847                           bsr	equ	0xFE0
  3848                           indf2	equ	0xFDF
  3849                           postinc2	equ	0xFDE
  3850                           postdec2	equ	0xFDD
  3851                           fsr2h	equ	0xFDA
  3852                           fsr2l	equ	0xFD9
  3853                           status	equ	0xFD8
  3854                           pclatu	equ	0xFFB
  3855                           pclath	equ	0xFFA
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           indf0	equ	0xFEF
  3863                           postinc0	equ	0xFEE
  3864                           fsr0h	equ	0xFEA
  3865                           fsr0l	equ	0xFE9
  3866                           wreg	equ	0xFE8
  3867                           postdec1	equ	0xFE5
  3868                           fsr1h	equ	0xFE2
  3869                           fsr1l	equ	0xFE1
  3870                           bsr	equ	0xFE0
  3871                           indf2	equ	0xFDF
  3872                           postinc2	equ	0xFDE
  3873                           postdec2	equ	0xFDD
  3874                           fsr2h	equ	0xFDA
  3875                           fsr2l	equ	0xFD9
  3876                           status	equ	0xFD8
  3877                           
  3878                           	psect	rparam
  3879  0000                     pclatu	equ	0xFFB
  3880                           pclath	equ	0xFFA
  3881                           tblptru	equ	0xFF8
  3882                           tblptrh	equ	0xFF7
  3883                           tblptrl	equ	0xFF6
  3884                           tablat	equ	0xFF5
  3885                           prodh	equ	0xFF4
  3886                           prodl	equ	0xFF3
  3887                           indf0	equ	0xFEF
  3888                           postinc0	equ	0xFEE
  3889                           fsr0h	equ	0xFEA
  3890                           fsr0l	equ	0xFE9
  3891                           wreg	equ	0xFE8
  3892                           postdec1	equ	0xFE5
  3893                           fsr1h	equ	0xFE2
  3894                           fsr1l	equ	0xFE1
  3895                           bsr	equ	0xFE0
  3896                           indf2	equ	0xFDF
  3897                           postinc2	equ	0xFDE
  3898                           postdec2	equ	0xFDD
  3899                           fsr2h	equ	0xFDA
  3900                           fsr2l	equ	0xFD9
  3901                           status	equ	0xFD8
  3902                           
  3903                           	psect	temp
  3904  000040                     btemp:
  3905                           	opt stack 0
  3906  000040                     	ds	1
  3907  0000                     int$flags	set	btemp
  3908                           pclatu	equ	0xFFB
  3909                           pclath	equ	0xFFA
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           prodh	equ	0xFF4
  3915                           prodl	equ	0xFF3
  3916                           indf0	equ	0xFEF
  3917                           postinc0	equ	0xFEE
  3918                           fsr0h	equ	0xFEA
  3919                           fsr0l	equ	0xFE9
  3920                           wreg	equ	0xFE8
  3921                           postdec1	equ	0xFE5
  3922                           fsr1h	equ	0xFE2
  3923                           fsr1l	equ	0xFE1
  3924                           bsr	equ	0xFE0
  3925                           indf2	equ	0xFDF
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    18
    Data        40
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      63
    BANK0           160     45      61
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> writeNum@numStr(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcdWriteLine@data	PTR unsigned char  size(2) Largest target is 10
		 -> STR_6(CODE[6]), STR_5(CODE[6]), STR_3(CODE[3]), STR_2(CODE[2]), 
		 -> writeNum@numStr(BANK0[10]), 

    ee_read_byte@_data	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_LCD8send
    _main->_eeWriteChar
    _writeLCD->_LCD8send
    _writeLCD->_ee_read_byte
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _lcdWriteLine->_LCD8send
    _ee_read_byte->_XEERead
    _XEERead->_SPI1out
    _eeWriteChar->_delay_ms
    _XEEInit->_SPI1out
    _SPI1init->_SPI1out
    _Read_KeyPad->_process_key
    _LCD8init->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in COMRAM

    None.

Critical Paths under _HighIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_writeLCD
    _writeLCD->_writeNum
    _writeNum->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdWriteLine->_LCD8send
    _eeWriteChar->_delay_ms
    _LCD8init->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in BANK0

    None.

Critical Paths under _HighIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowIsr in BANK1

    None.

Critical Paths under _HighIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowIsr in BANK2

    None.

Critical Paths under _HighIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowIsr in BANK3

    None.

Critical Paths under _HighIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowIsr in BANK4

    None.

Critical Paths under _HighIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowIsr in BANK5

    None.

Critical Paths under _HighIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowIsr in BANK6

    None.

Critical Paths under _HighIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowIsr in BANK7

    None.

Critical Paths under _HighIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowIsr in BANK8

    None.

Critical Paths under _HighIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowIsr in BANK9

    None.

Critical Paths under _HighIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowIsr in BANK10

    None.

Critical Paths under _HighIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowIsr in BANK11

    None.

Critical Paths under _HighIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowIsr in BANK12

    None.

Critical Paths under _HighIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowIsr in BANK13

    None.

Critical Paths under _HighIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _LowIsr in BANK14

    None.

Critical Paths under _HighIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _LowIsr in BANK15

    None.

Critical Paths under _HighIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   31469
                                             36 BANK0      9     9      0
                         _KeyPadinit
                           _LCD8init
                           _LCD8send
                        _Read_KeyPad
                            _XEEInit
                           _delay_ms
                        _eeWriteChar
                       _lcdWriteLine
                           _writeLCD
                           _writeNum
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             3     3      0   12133
                                             33 BANK0      3     3      0
                           _LCD8send
                       _ee_read_byte
                       _lcdWriteLine
                           _writeNum
 ---------------------------------------------------------------------------------
 (1) _writeNum                                            11    11      0    5239
                                             22 BANK0     11    11      0
                       _lcdWriteLine
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    1631
                                              8 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              3 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             31 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcdWriteLine                                         6     4      2    3485
                                              3 BANK0      6     4      2
                           _LCD8send
 ---------------------------------------------------------------------------------
 (2) _ee_read_byte                                         3     1      2     315
                                             34 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                            _XEERead
 ---------------------------------------------------------------------------------
 (3) _XEERead                                              2     2      0      99
                                             32 COMRAM     2     2      0
                            _SPI1out
                               _wait
 ---------------------------------------------------------------------------------
 (1) _eeWriteChar                                          3     2      1    1202
                                             34 COMRAM     1     0      1
                                              2 BANK0      2     2      0
                            _SPI1out
                           _delay_ms
                               _wait
 ---------------------------------------------------------------------------------
 (4) _wait                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _XEEInit                                              0     0      0      68
                           _SPI1init
                            _SPI1out
 ---------------------------------------------------------------------------------
 (2) _SPI1init                                             0     0      0      34
                            _SPI1out
 ---------------------------------------------------------------------------------
 (4) _SPI1out                                              1     1      0      34
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Read_KeyPad                                          5     5      0     529
                                              0 BANK0      5     5      0
                        _process_key
 ---------------------------------------------------------------------------------
 (2) _process_key                                          3     3      0     161
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD8init                                             0     0      0    3885
                           _LCD8send
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _LCD8send                                             2     1      1    2970
                                             34 COMRAM     1     0      1
                                              2 BANK0      1     1      0
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             5     3      2     453
                                             31 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             5     3      2     915
                                             31 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeyPadinit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowIsr                                              17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighIsr                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeyPadinit
   _LCD8init
     _LCD8send
       _delay_ms
       _delay_us
     _delay_ms
   _LCD8send
     _delay_ms
     _delay_us
   _Read_KeyPad
     _process_key
   _XEEInit
     _SPI1init
       _SPI1out
     _SPI1out
   _delay_ms
   _eeWriteChar
     _SPI1out
     _delay_ms
     _wait
   _lcdWriteLine
     _LCD8send
       _delay_ms
       _delay_us
   _writeLCD
     _LCD8send
       _delay_ms
       _delay_us
     _ee_read_byte
       _XEERead
         _SPI1out
         _wait
     _lcdWriteLine
       _LCD8send
         _delay_ms
         _delay_us
     _writeNum
       _lcdWriteLine
         _LCD8send
           _delay_ms
           _delay_us
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _writeNum
     _lcdWriteLine
       _LCD8send
         _delay_ms
         _delay_us
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)

 _LowIsr (ROOT)

 _HighIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0       0      38        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2D      3D       5       38.1%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      3F       1       67.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7C      29        0.0%
DATA                 0      0      7C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Aug 14 14:02:59 2017

                     l16 16E8                       l61 1AAC                       bsr 000FE0  
             _WRITE_MODE 1011                      l121 195E                      l135 1AB6  
                    l128 19F0                      l776 184E                      l786 17F0  
                    _sec 003E          __end_of_EEDELAY 100F                      prod 000FF3  
                    wreg 000FE8               _TXSTA1bits 000FAC             __CFG_FOSC$HS 000000  
            main@address 0086     __end_of_ee_read_byte 1A84           ??_lcdWriteLine 0065  
           __CFG_WDT$OFF 000000                     l2111 1822                     l2107 1814  
                   l2131 17BE                     l2211 143C                     l2203 1416  
                   l2109 181E                     l2221 14CA                     l2231 19C0  
                   l2119 1842                     l2135 17E2                     l2127 17AC  
                   l2241 19E0                     l2129 17B8                     l2217 149E  
                   l2209 1436                     l2075 1948                     l2083 19FC  
                   l2227 19B8                     l2163 15EA                     l2219 14AA  
                   l2237 19DC                     l2173 1370                     l2159 15A2  
                   l2191 13DA                     l2167 1352                     l2503 124C  
                   l2273 1720                     l2265 16D2                     l2345 173E  
                   l2513 12C0                     l2179 13A4                     l2507 1288  
                   l2531 1336                     l2189 13D4                     l2517 12D4  
                   l2461 10C6                     l2279 172E                     l2473 113A  
                   l2465 10FA                     l2449 1074                     l2483 1194  
                   l2467 1108                     l2493 11EC                     l2477 1164  
                   l2487 11BC                     l2497 1214            lcdWriteLine@i 0067  
                   STR_1 1025                     STR_2 1028                     STR_3 1022  
                   STR_4 101F                     STR_5 1019                     STR_6 1013  
                   _LATD 000F8C                     _LATE 000F8D                     u1480 15E0  
                   u1801 11B4                     u1490 1624                     u1395 190C  
                   u1396 190E                     u1487 15D6                     u1497 161A  
                   u1907 194E                     u1771 115A          __end_of_SPI1out 1AB6  
                   _main 102C          __end_of_XEEInit 1A58          __end_of_XEERead 1A3E  
                   _wait 1AB6                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     indf2 000FDF                     fsr2l 000FD9  
            main@prevKey 0085                     btemp 0040                     pclat 000FFA  
           process_key@i 0022                     prodh 000FF4                     prodl 000FF3  
                   start 00A6          __end_of_HighIsr 16BE             ___param_bank 000010  
       __end_of_LCD8init 1596            ??_Read_KeyPad 0023         __end_of_LCD8send 193C  
                  ?_main 0001     __size_of_eeWriteChar 0064                    ?_wait 0001  
        __end_of___lwdiv 1858          __end_of___lwmod 17FA                    i2l229 1682  
                  _PORTD 000F83                    _PORTJ 000F88                    _TRISD 000F95  
                  _TRISE 000F96                    _TRISH 000F99                    _TRISJ 000F9A  
       __end_of_SPI1init 1A96          __end_of_dpowers 100B          clr_screen@F6532 0034  
                  tablat 000FF5               _KeyPadinit 1ABC                    status 000FD8  
        __end_of_sprintf 14D8          __initialization 18AE             __end_of_main 1344  
           __end_of_wait 1ABC                   ??_main 0084                   ??_wait 0020  
          __activetblptr 000003      __end_of_Read_KeyPad 1734            eeWriteChar@sr 0063  
      __end_of_READ_MODE 1011                ??_SPI1out 0020                ??_XEEInit 0021  
              ??_XEERead 0021                   i2l1469 1680                   _SPBRG1 000FAF  
              ??_HighIsr 0001                   _SSPBUF 000FC9       eeWriteChar@address 0062  
                 _TXREG1 000FAD                   _TXSTA1 000FAC         __end_of_delay_ms 1978  
       __end_of_delay_us 1A16           __CFG_XINST$OFF 000000                   _LowIsr 0018  
   __end_of_lcdWriteLine 162C                ??___lwdiv 0024                ??___lwmod 0024  
  __size_of_ee_read_byte 0014             __pdataCOMRAM 0024             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
           Read_KeyPad@i 0061                ??_sprintf 006E                LCD8send@c 0062  
       __end_of_writeLCD 18AE                ?_LCD8init 0001                ?_LCD8send 0023  
           ?_process_key 0001         __end_of_writeNum 19B2              ?_KeyPadinit 0001  
             __accesstop 0060  __end_of__initialization 18F6            ___rparam_used 000001  
         __pcstackCOMRAM 0001             _ee_read_byte 1A70             __pidataBANK0 1A96  
              ?_SPI1init 0001              _Read_KeyPad 16BE         eeWriteChar@value 0023  
             ??_LCD8init 0024               ??_LCD8send 0024          writeLCD@address 0083  
                ?_LowIsr 0001               ??_SPI1init 0021         lcdWriteLine@data 0063  
                _EEDELAY 100B      __size_of_KeyPadinit 0006                ?_delay_ms 0020  
              ?_delay_us 0020                  _SSP1BUF 000FC9                  _SPI1out 1AA6  
                _XEEInit 1A3E                  _XEERead 1A16                  _HighIsr 0008  
  __size_of_lcdWriteLine 0096                  __Hparam 0000                  __Lparam 0000  
        __size_of_LowIsr 008E            ??_eeWriteChar 0024                  ___lwdiv 17FA  
                ___lwmod 1798             __psmallconst 1000             writeLCD@data 0081  
                __pcinit 18AE                  __ramtop 1000                ?_writeLCD 0001  
                __ptext0 102C                  __ptext1 1858                  __ptext2 1978  
                __ptext3 1344                  __ptext4 1798                  __ptext5 17FA  
                __ptext6 1596                  __ptext7 1A70                  __ptext8 1A16  
                __ptext9 1734                ?_writeNum 0001                  _counter 003C  
                _dpowers 1001               ??_delay_ms 0022               ??_delay_us 0022  
                _sprintf 1344                  main@key 008A           __pintcode_body 162C  
           _lcdWriteLine 1596     end_of_initialization 18F6                _READ_MODE 100F  
            SPI1out@Code 0020                  int_func 162C     __size_of_process_key 0032  
     __end_of_WRITE_MODE 1013      ee_read_byte@address 0023          process_key@code 0021  
              _RCSTAbits 000FAB                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE               ??_writeLCD 0024  
              _PORTCbits 000F82               ??_writeNum 0024      __end_of_eeWriteChar 1798  
              _TRISCbits 000F94           main@writeValue 0087             ??_KeyPadinit 0020  
      __size_of_LCD8init 00BE        __size_of_LCD8send 003C           __end_of_LowIsr 00A6  
           ?_Read_KeyPad 0001            __pidataCOMRAM 1A58        __size_of_SPI1init 0012  
     __end_of_KeyPadinit 1AC2      start_initialization 18AE                 ??_LowIsr 000F  
            __pdataBANK0 008D              _eeWriteChar 1734        ee_read_byte@_data 0060  
            __pbssCOMRAM 003C            __pcstackBANK0 0060                 ?_SPI1out 0001  
               ?_XEEInit 0001                 ?_XEERead 0001        __size_of_delay_ms 003C  
      __size_of_delay_us 0032              sprintf@flag 0071                 ?_HighIsr 0001  
            sprintf@prec 0072         ___lwdiv@dividend 0020                __pintcode 0008  
               ?___lwdiv 0020                 ?___lwmod 0063              __pintcodelo 0018  
            __smallconst 1000                 _BAUDCON1 000F7E        __size_of_writeLCD 0056  
      __size_of_writeNum 003A                _keyValues 008D         ___lwdiv@quotient 0061  
               ?_sprintf 0068                 _LCD8init 14D8                _scan_code 0024  
               _LCD8send 1900                 _LATCbits 000F8B                delay_ms@i 0060  
              delay_ms@x 0020                 _LATHbits 000F90                delay_us@i 0060  
              delay_us@x 0020                 _IPR1bits 000F9F                 _PIE1bits 000F9D  
               _IPR3bits 000FA5                 _PIE3bits 000FA3                 _PIR1bits 000F9E  
               _PIR3bits 000FA4                 _RCONbits 000FD0                 _SSP1CON1 000FC6  
               _SPI1init 1A84     __size_of_Read_KeyPad 0076                main@keyNo 0088  
              copy_data0 18CA                copy_data1 18EA         __size_of_SPI1out 0010  
       __size_of_XEEInit 001A         __size_of_XEERead 0028            ??_process_key 0020  
       __size_of_HighIsr 16B6                 __Hrparam 0000                 __Lrparam 0000  
          ?_ee_read_byte 0060         Read_KeyPad@value 0060         __size_of___lwdiv 005E  
       __size_of___lwmod 0062         cursor_home@F6537 0038               sprintf@val 0073  
               _delay_ms 193C                 _delay_us 19E4          ___lwdiv@divisor 0022  
        ___lwdiv@counter 0060                 __ptext10 1AB6                 __ptext11 1A3E  
               __ptext20 1ABC                 __ptext12 1A84                 __ptext13 1AA6  
               __ptext14 16BE                 __ptext15 19B2                 __ptext16 14D8  
               __ptext17 1900                 __ptext18 19E4                 __ptext19 193C  
       __size_of_sprintf 0194            __size_of_main 0318            __size_of_wait 0006  
    __end_of_process_key 19E4           ??_ee_read_byte 0023                 int$flags 0040  
           ?_eeWriteChar 0023             _SSP1STATbits 000FC7                 main@mode 008B  
               _writeLCD 1858                 _writeNum 1978               _INTCONbits 000FF2  
        Read_KeyPad@code 0064                 intlevel1 0000                 intlevel2 0000  
              sprintf@ap 006F                sprintf@sp 0068         ___lwmod@dividend 0063  
             _RCSTA1bits 000FAB           XEERead@address 0021           Read_KeyPad@Col 0063  
           LCD8send@mode 0023                 sprintf@c 0075                 sprintf@f 006A  
        ___lwmod@divisor 0065          ___lwmod@counter 0067            XEERead@buffer 0022  
          ?_lcdWriteLine 0063              _process_key 19B2           writeNum@numStr 0076  
         writeNum@number 0080  
