

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Aug 14 14:22:01 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           	psect	idataCOMRAM
    44  001A38                     __pidataCOMRAM:
    45                           	opt stack 0
    46                           
    47                           ;initializer for _scan_code
    48  001A38  EB                 	db	235
    49  001A39  77                 	db	119
    50  001A3A  7B                 	db	123
    51  001A3B  7D                 	db	125
    52  001A3C  B7                 	db	183
    53  001A3D  BB                 	db	187
    54  001A3E  BD                 	db	189
    55  001A3F  D7                 	db	215
    56  001A40  DB                 	db	219
    57  001A41  DD                 	db	221
    58  001A42  7E                 	db	126
    59  001A43  BE                 	db	190
    60  001A44  DE                 	db	222
    61  001A45  EE                 	db	238
    62  001A46  E7                 	db	231
    63  001A47  ED                 	db	237
    64                           
    65                           ;initializer for clr_screen@F6532
    66  001A48  1B                 	db	27
    67  001A49  5B                 	db	91
    68  001A4A  32                 	db	50
    69  001A4B  4A                 	db	74
    70                           
    71                           ;initializer for cursor_home@F6537
    72  001A4C  1B                 	db	27
    73  001A4D  5B                 	db	91
    74  001A4E  32                 	db	50
    75  001A4F  48                 	db	72
    76                           
    77                           	psect	idataBANK0
    78  001A88                     __pidataBANK0:
    79                           	opt stack 0
    80                           
    81                           ;initializer for _keyValues
    82  001A88  30                 	db	48
    83  001A89  31                 	db	49
    84  001A8A  32                 	db	50
    85  001A8B  33                 	db	51
    86  001A8C  34                 	db	52
    87  001A8D  35                 	db	53
    88  001A8E  36                 	db	54
    89  001A8F  37                 	db	55
    90  001A90  38                 	db	56
    91  001A91  39                 	db	57
    92  001A92  41                 	db	65
    93  001A93  42                 	db	66
    94  001A94  43                 	db	67
    95  001A95  44                 	db	68
    96  001A96  2A                 	db	42
    97  001A97  23                 	db	35
    98                           
    99                           	psect	smallconst
   100  001000                     __psmallconst:
   101                           	opt stack 0
   102  001000  00                 	db	0
   103  001001                     _dpowers:
   104                           	opt stack 0
   105  001001  0001               	dw	1
   106  001003  000A               	dw	10
   107  001005  0064               	dw	100
   108  001007  03E8               	dw	1000
   109  001009  2710               	dw	10000
   110  00100B                     __end_of_dpowers:
   111                           	opt stack 0
   112  00100B                     _EEDELAY:
   113                           	opt stack 0
   114  00100B  001E               	dw	30
   115  00100D  0000               	dw	0
   116  00100F                     __end_of_EEDELAY:
   117                           	opt stack 0
   118  00100F                     _READ_MODE:
   119                           	opt stack 0
   120  00100F  0001               	dw	1
   121  001011                     __end_of_READ_MODE:
   122                           	opt stack 0
   123  001011                     _WRITE_MODE:
   124                           	opt stack 0
   125  001011  0000               	dw	0
   126  001013                     __end_of_WRITE_MODE:
   127                           	opt stack 0
   128  0000                     _BAUDCON1	set	3966
   129  0000                     _INTCONbits	set	4082
   130  0000                     _IPR1bits	set	3999
   131  0000                     _IPR3bits	set	4005
   132  0000                     _LATCbits	set	3979
   133  0000                     _LATD	set	3980
   134  0000                     _LATE	set	3981
   135  0000                     _LATHbits	set	3984
   136  0000                     _PIE1bits	set	3997
   137  0000                     _PIE3bits	set	4003
   138  0000                     _PIR1bits	set	3998
   139  0000                     _PIR3bits	set	4004
   140  0000                     _PORTCbits	set	3970
   141  0000                     _PORTD	set	3971
   142  0000                     _PORTJ	set	3976
   143  0000                     _RCONbits	set	4048
   144  0000                     _RCSTA1bits	set	4011
   145  0000                     _RCSTAbits	set	4011
   146  0000                     _SPBRG1	set	4015
   147  0000                     _SSP1BUF	set	4041
   148  0000                     _SSP1CON1	set	4038
   149  0000                     _SSP1STATbits	set	4039
   150  0000                     _TRISCbits	set	3988
   151  0000                     _TRISD	set	3989
   152  0000                     _TRISE	set	3990
   153  0000                     _TRISH	set	3993
   154  0000                     _TRISJ	set	3994
   155  0000                     _TXREG1	set	4013
   156  0000                     _TXSTA1	set	4012
   157  0000                     _TXSTA1bits	set	4012
   158  001013                     STR_6:
   159  001013  20                 	db	32
   160  001014  76                 	db	118	;'v'
   161  001015  61                 	db	97	;'a'
   162  001016  6C                 	db	108	;'l'
   163  001017  3D                 	db	61	;'='
   164  001018  00                 	db	0
   165  001019                     STR_5:
   166  001019  20                 	db	32
   167  00101A  6B                 	db	107	;'k'
   168  00101B  65                 	db	101	;'e'
   169  00101C  79                 	db	121	;'y'
   170  00101D  3D                 	db	61	;'='
   171  00101E  00                 	db	0
   172  00101F                     STR_4:
   173  00101F  57                 	db	87	;'W'
   174  001020  52                 	db	82	;'R'
   175  001021  00                 	db	0
   176  001022                     STR_3:
   177  001022  20                 	db	32
   178  001023  56                 	db	86	;'V'
   179  001024  00                 	db	0
   180  001025                     STR_1:
   181  001025  25                 	db	37
   182  001026  69                 	db	105	;'i'
   183  001027  00                 	db	0
   184  001028                     STR_2:
   185  001028  23                 	db	35
   186  001029  00                 	db	0
   187                           
   188                           ; #config settings
   189  00102A  00                 	db	0	; dummy byte at the end
   190  0000                     
   191                           	psect	cinit
   192  00184A                     __pcinit:
   193                           	opt stack 0
   194  00184A                     start_initialization:
   195                           	opt stack 0
   196  00184A                     __initialization:
   197                           	opt stack 0
   198                           
   199                           ; Clear objects allocated to COMRAM (4 bytes)
   200  00184A  6A3F               	clrf	(__pbssCOMRAM+3)& (0+255),c
   201  00184C  6A3E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   202  00184E  6A3D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   203  001850  6A3C               	clrf	__pbssCOMRAM& (0+255),c
   204                           
   205                           ; Initialize objects allocated to BANK0 (16 bytes)
   206                           ; load TBLPTR registers with __pidataBANK0
   207  001852  0E88               	movlw	low __pidataBANK0
   208  001854  6EF6               	movwf	tblptrl,c
   209  001856  0E1A               	movlw	high __pidataBANK0
   210  001858  6EF7               	movwf	tblptrh,c
   211  00185A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   212  00185C  6EF8               	movwf	tblptru,c
   213  00185E  EE00  F08D         	lfsr	0,__pdataBANK0
   214  001862  EE10 F010          	lfsr	1,16
   215  001866                     copy_data0:
   216  001866  0009               	tblrd		*+
   217  001868  CFF5 FFEE          	movff	tablat,postinc0
   218  00186C  50E5               	movf	postdec1,w,c
   219  00186E  50E1               	movf	fsr1l,w,c
   220  001870  E1FA               	bnz	copy_data0
   221                           
   222                           ; Initialize objects allocated to COMRAM (24 bytes)
   223                           ; load TBLPTR registers with __pidataCOMRAM
   224  001872  0E38               	movlw	low __pidataCOMRAM
   225  001874  6EF6               	movwf	tblptrl,c
   226  001876  0E1A               	movlw	high __pidataCOMRAM
   227  001878  6EF7               	movwf	tblptrh,c
   228  00187A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   229  00187C  6EF8               	movwf	tblptru,c
   230  00187E  EE00  F024         	lfsr	0,__pdataCOMRAM
   231  001882  EE10 F018          	lfsr	1,24
   232  001886                     copy_data1:
   233  001886  0009               	tblrd		*+
   234  001888  CFF5 FFEE          	movff	tablat,postinc0
   235  00188C  50E5               	movf	postdec1,w,c
   236  00188E  50E1               	movf	fsr1l,w,c
   237  001890  E1FA               	bnz	copy_data1
   238  001892                     end_of_initialization:
   239                           	opt stack 0
   240  001892                     __end_of__initialization:
   241                           	opt stack 0
   242  001892  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   243  001894  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   244  001896  0100               	movlb	0
   245  001898  EF16  F008         	goto	_main	;jump to C main() function
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           postdec1	equ	0xFE5
   252                           fsr1l	equ	0xFE1
   253                           
   254                           	psect	bssCOMRAM
   255  00003C                     __pbssCOMRAM:
   256                           	opt stack 0
   257  00003C                     _counter:
   258                           	opt stack 0
   259  00003C                     	ds	2
   260  00003E                     _sec:
   261                           	opt stack 0
   262  00003E                     	ds	2
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           postdec1	equ	0xFE5
   269                           fsr1l	equ	0xFE1
   270                           
   271                           	psect	dataCOMRAM
   272  000024                     __pdataCOMRAM:
   273                           	opt stack 0
   274  000024                     _scan_code:
   275                           	opt stack 0
   276  000024                     	ds	16
   277  000034                     clr_screen@F6532:
   278                           	opt stack 0
   279  000034                     	ds	4
   280  000038                     cursor_home@F6537:
   281                           	opt stack 0
   282  000038                     	ds	4
   283                           tblptru	equ	0xFF8
   284                           tblptrh	equ	0xFF7
   285                           tblptrl	equ	0xFF6
   286                           tablat	equ	0xFF5
   287                           postinc0	equ	0xFEE
   288                           postdec1	equ	0xFE5
   289                           fsr1l	equ	0xFE1
   290                           
   291                           	psect	dataBANK0
   292  00008D                     __pdataBANK0:
   293                           	opt stack 0
   294  00008D                     _keyValues:
   295                           	opt stack 0
   296  00008D                     	ds	16
   297                           tblptru	equ	0xFF8
   298                           tblptrh	equ	0xFF7
   299                           tblptrl	equ	0xFF6
   300                           tablat	equ	0xFF5
   301                           postinc0	equ	0xFEE
   302                           postdec1	equ	0xFE5
   303                           fsr1l	equ	0xFE1
   304                           
   305                           	psect	cstackBANK0
   306  000060                     __pcstackBANK0:
   307                           	opt stack 0
   308  000060                     Read_KeyPad@value:
   309                           	opt stack 0
   310  000060                     ee_write_char@chunk:
   311                           	opt stack 0
   312  000060                     ___lwdiv@counter:
   313                           	opt stack 0
   314  000060                     delay_ms@i:
   315                           	opt stack 0
   316  000060                     delay_us@i:
   317                           	opt stack 0
   318  000060                     ee_read_char@_data:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x0
   322  000060                     	ds	1
   323  000061                     ee_write_char@address:
   324                           	opt stack 0
   325  000061                     Read_KeyPad@i:
   326                           	opt stack 0
   327  000061                     ___lwdiv@quotient:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x1
   331  000061                     	ds	1
   332  000062                     LCD8send@c:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x2
   336  000062                     	ds	1
   337  000063                     ?___lwmod:
   338                           	opt stack 0
   339  000063                     Read_KeyPad@Col:
   340                           	opt stack 0
   341  000063                     lcdWriteLine@data:
   342                           	opt stack 0
   343  000063                     ___lwmod@dividend:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x3
   347  000063                     	ds	1
   348  000064                     Read_KeyPad@code:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x4
   352  000064                     	ds	1
   353  000065                     ??_lcdWriteLine:
   354  000065                     ___lwmod@divisor:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x5
   358  000065                     	ds	2
   359  000067                     ___lwmod@counter:
   360                           	opt stack 0
   361  000067                     lcdWriteLine@i:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x7
   365  000067                     	ds	1
   366  000068                     ?_sprintf:
   367                           	opt stack 0
   368  000068                     sprintf@sp:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x8
   372  000068                     	ds	2
   373  00006A                     sprintf@f:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0xA
   377  00006A                     	ds	4
   378  00006E                     ??_sprintf:
   379                           
   380                           ; 1 bytes @ 0xE
   381  00006E                     	ds	1
   382  00006F                     sprintf@ap:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0xF
   386  00006F                     	ds	2
   387  000071                     sprintf@flag:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x11
   391  000071                     	ds	1
   392  000072                     sprintf@prec:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x12
   396  000072                     	ds	1
   397  000073                     sprintf@val:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x13
   401  000073                     	ds	2
   402  000075                     sprintf@c:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x15
   406  000075                     	ds	1
   407  000076                     writeNum@numStr:
   408                           	opt stack 0
   409                           
   410                           ; 10 bytes @ 0x16
   411  000076                     	ds	10
   412  000080                     writeNum@number:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0x20
   416  000080                     	ds	1
   417  000081                     writeLCD@data:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x21
   421  000081                     	ds	2
   422  000083                     writeLCD@address:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x23
   426  000083                     	ds	1
   427  000084                     ??_main:
   428                           
   429                           ; 1 bytes @ 0x24
   430  000084                     	ds	1
   431  000085                     main@prevKey:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x25
   435  000085                     	ds	1
   436  000086                     main@address:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x26
   440  000086                     	ds	1
   441  000087                     main@writeValue:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x27
   445  000087                     	ds	1
   446  000088                     main@keyNo:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x28
   450  000088                     	ds	2
   451  00008A                     main@key:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x2A
   455  00008A                     	ds	1
   456  00008B                     main@mode:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x2B
   460  00008B                     	ds	2
   461                           tblptru	equ	0xFF8
   462                           tblptrh	equ	0xFF7
   463                           tblptrl	equ	0xFF6
   464                           tablat	equ	0xFF5
   465                           postinc0	equ	0xFEE
   466                           postdec1	equ	0xFE5
   467                           fsr1l	equ	0xFE1
   468                           
   469                           	psect	cstackCOMRAM
   470  000001                     __pcstackCOMRAM:
   471                           	opt stack 0
   472  000001                     ??_HighIsr:
   473  000001                     
   474                           ; 1 bytes @ 0x0
   475  000001                     	ds	14
   476  00000F                     ??_LowIsr:
   477                           
   478                           ; 1 bytes @ 0xE
   479  00000F                     	ds	17
   480  000020                     ?___lwdiv:
   481                           	opt stack 0
   482  000020                     SPI1out@Code:
   483                           	opt stack 0
   484  000020                     delay_ms@x:
   485                           	opt stack 0
   486  000020                     delay_us@x:
   487                           	opt stack 0
   488  000020                     ___lwdiv@dividend:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x1F
   492  000020                     	ds	1
   493  000021                     process_key@code:
   494                           	opt stack 0
   495  000021                     eepromRead@address:
   496                           	opt stack 0
   497  000021                     eepromWrite@value:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x20
   501  000021                     	ds	1
   502  000022                     ??_delay_ms:
   503  000022                     ??_delay_us:
   504  000022                     process_key@i:
   505                           	opt stack 0
   506  000022                     eepromRead@buffer:
   507                           	opt stack 0
   508  000022                     eepromWrite@address:
   509                           	opt stack 0
   510  000022                     ___lwdiv@divisor:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x21
   514  000022                     	ds	1
   515  000023                     LCD8send@mode:
   516                           	opt stack 0
   517  000023                     eepromWrite@sr:
   518                           	opt stack 0
   519  000023                     ee_read_char@address:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x22
   523  000023                     	ds	1
   524  000024                     tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           postinc0	equ	0xFEE
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           
   532                           ; 1 bytes @ 0x23
   533 ;;
   534 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   535 ;;
   536 ;; *************** function _main *****************
   537 ;; Defined at:
   538 ;;		line 61 in file "test.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;		None
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  keyNo           2   40[BANK0 ] int 
   543 ;;  key             1   42[BANK0 ] unsigned char 
   544 ;;  mode            2   43[BANK0 ] unsigned int 
   545 ;;  writeValue      1   39[BANK0 ] unsigned char 
   546 ;;  address         1   38[BANK0 ] unsigned char 
   547 ;;  prevKey         1   37[BANK0 ] unsigned char 
   548 ;; Return value:  Size  Location     Type
   549 ;;                  1    wreg      void 
   550 ;; Registers used:
   551 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   558 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   560 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   561 ;;Total ram usage:        9 bytes
   562 ;; Hardware stack levels required when called:    7
   563 ;; This function calls:
   564 ;;		_KeyPadinit
   565 ;;		_LCD8init
   566 ;;		_LCD8send
   567 ;;		_Read_KeyPad
   568 ;;		_delay_ms
   569 ;;		_ee_write_char
   570 ;;		_eepromInit
   571 ;;		_lcdWriteLine
   572 ;;		_writeLCD
   573 ;;		_writeNum
   574 ;; This function is called by:
   575 ;;		Startup code after reset
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579                           	psect	text0
   580  00102C                     __ptext0:
   581                           	opt stack 0
   582  00102C                     _main:
   583                           	opt stack 24
   584                           
   585                           ;test.c: 62: LCD8init();
   586                           
   587                           ;incstack = 0
   588  00102C  EC6C  F00A         	call	_LCD8init	;wreg free
   589                           
   590                           ;test.c: 63: KeyPadinit();
   591  001030  EC57  F00D         	call	_KeyPadinit	;wreg free
   592                           
   593                           ;test.c: 64: eepromInit();
   594  001034  EC0F  F00D         	call	_eepromInit	;wreg free
   595                           
   596                           ;test.c: 66: delay_ms(1000);
   597  001038  0E03               	movlw	3
   598  00103A  6E21               	movwf	delay_ms@x+1,c
   599  00103C  0EE8               	movlw	232
   600  00103E  6E20               	movwf	delay_ms@x,c
   601  001040  EC8E  F00C         	call	_delay_ms	;wreg free
   602                           
   603                           ;test.c: 68: TRISJ = 0x00;
   604  001044  0E00               	movlw	0
   605  001046  6E9A               	movwf	3994,c	;volatile
   606                           
   607                           ;test.c: 69: PORTJ = 0b0;
   608  001048  0E00               	movlw	0
   609  00104A  6E88               	movwf	3976,c	;volatile
   610                           
   611                           ;test.c: 71: unsigned char address = 0;
   612  00104C  0E00               	movlw	0
   613  00104E  0100               	movlb	0	; () banked
   614  001050  6F86               	movwf	main@address& (0+255),b
   615                           
   616                           ; BSR set to: 0
   617                           ;test.c: 72: unsigned char writeValue = 0;
   618  001052  0E00               	movlw	0
   619  001054  0100               	movlb	0	; () banked
   620  001056  6F87               	movwf	main@writeValue& (0+255),b
   621                           
   622                           ; BSR set to: 0
   623                           ;test.c: 73: unsigned int mode = READ_MODE;
   624  001058  0E0F               	movlw	low _READ_MODE
   625  00105A  6EF6               	movwf	tblptrl,c
   626  00105C                     	if	1	;There is more than 1 active tblptr byte
   627  00105C  0E10               	movlw	high _READ_MODE
   628  00105E  6EF7               	movwf	tblptrh,c
   629  001060                     	endif
   630  001060                     	if	1	;There are 3 active tblptr bytes
   631  001060  0E00               	movlw	low (_READ_MODE shr (0+16))
   632  001062  6EF8               	movwf	tblptru,c
   633  001064                     	endif
   634  001064  0009               	tblrd		*+
   635  001066  CFF5 F08B          	movff	tablat,main@mode
   636  00106A  000A               	tblrd		*-
   637  00106C  CFF5 F08C          	movff	tablat,main@mode+1
   638                           
   639                           ; BSR set to: 0
   640                           ;test.c: 74: unsigned char prevKey = 0xFF;
   641  001070  0100               	movlb	0	; () banked
   642  001072  6985               	setf	main@prevKey& (0+255),b
   643  001074                     l2396:
   644                           
   645                           ;test.c: 77: int keyNo = Read_KeyPad();
   646  001074  EC5F  F00B         	call	_Read_KeyPad	;wreg free
   647  001078  0100               	movlb	0	; () banked
   648  00107A  6F84               	movwf	??_main& (0+255),b
   649  00107C  0100               	movlb	0	; () banked
   650  00107E  5184               	movf	??_main& (0+255),w,b
   651  001080  0100               	movlb	0	; () banked
   652  001082  6F88               	movwf	main@keyNo& (0+255),b
   653  001084  6B89               	clrf	(main@keyNo+1)& (0+255),b
   654                           
   655                           ; BSR set to: 0
   656                           ;test.c: 78: unsigned char key = keyValues[keyNo];
   657  001086  0E8D               	movlw	low _keyValues
   658  001088  0100               	movlb	0	; () banked
   659  00108A  2588               	addwf	main@keyNo& (0+255),w,b
   660  00108C  6ED9               	movwf	fsr2l,c
   661  00108E  0E00               	movlw	high _keyValues
   662  001090  0100               	movlb	0	; () banked
   663  001092  2189               	addwfc	(main@keyNo+1)& (0+255),w,b
   664  001094  6EDA               	movwf	fsr2h,c
   665  001096  50DF               	movf	indf2,w,c
   666  001098  0100               	movlb	0	; () banked
   667  00109A  6F8A               	movwf	main@key& (0+255),b
   668                           
   669                           ; BSR set to: 0
   670                           ;test.c: 80: if (key != prevKey) {
   671  00109C  0100               	movlb	0	; () banked
   672  00109E  5185               	movf	main@prevKey& (0+255),w,b
   673  0010A0  0100               	movlb	0	; () banked
   674  0010A2  198A               	xorwf	main@key& (0+255),w,b
   675  0010A4  B4D8               	btfsc	status,2,c
   676  0010A6  D147               	goto	l2478
   677                           
   678                           ; BSR set to: 0
   679                           ;test.c: 81: PORTJ++;
   680  0010A8  2A88               	incf	3976,f,c	;volatile
   681                           
   682                           ; BSR set to: 0
   683                           ;test.c: 83: if (keyNo >= 0 && 10 > keyNo) {
   684  0010AA  0100               	movlb	0	; () banked
   685  0010AC  BF89               	btfsc	(main@keyNo+1)& (0+255),7,b
   686  0010AE  D02C               	goto	l2414
   687                           
   688                           ; BSR set to: 0
   689  0010B0  0100               	movlb	0	; () banked
   690  0010B2  BF89               	btfsc	(main@keyNo+1)& (0+255),7,b
   691  0010B4  D008               	goto	l2408
   692  0010B6  0100               	movlb	0	; () banked
   693  0010B8  5189               	movf	(main@keyNo+1)& (0+255),w,b
   694  0010BA  E126               	bnz	l2414
   695  0010BC  0E0A               	movlw	10
   696  0010BE  0100               	movlb	0	; () banked
   697  0010C0  5D88               	subwf	main@keyNo& (0+255),w,b
   698  0010C2  B0D8               	btfsc	status,0,c
   699  0010C4  D021               	goto	l2414
   700  0010C6                     l2408:
   701                           
   702                           ; BSR set to: 0
   703                           ;test.c: 84: if (mode == READ_MODE) {
   704  0010C6  0E0F               	movlw	low _READ_MODE
   705  0010C8  6EF6               	movwf	tblptrl,c
   706  0010CA                     	if	1	;There is more than 1 active tblptr byte
   707  0010CA  0E10               	movlw	high _READ_MODE
   708  0010CC  6EF7               	movwf	tblptrh,c
   709  0010CE                     	endif
   710  0010CE                     	if	1	;There are 3 active tblptr bytes
   711  0010CE  0E00               	movlw	low (_READ_MODE shr (0+16))
   712  0010D0  6EF8               	movwf	tblptru,c
   713  0010D2                     	endif
   714  0010D2  0100               	movlb	0	; () banked
   715  0010D4  518B               	movf	main@mode& (0+255),w,b
   716  0010D6  0009               	tblrd		*+
   717  0010D8  18F5               	xorwf	tablat,w,c
   718  0010DA  E10F               	bnz	l2412
   719  0010DC  0100               	movlb	0	; () banked
   720  0010DE  518C               	movf	(main@mode+1)& (0+255),w,b
   721  0010E0  0009               	tblrd		*+
   722  0010E2  18F5               	xorwf	tablat,w,c
   723  0010E4  A4D8               	btfss	status,2,c
   724  0010E6  D009               	goto	l2412
   725                           
   726                           ; BSR set to: 0
   727                           ;test.c: 85: address = address * 10 + keyNo;
   728  0010E8  0100               	movlb	0	; () banked
   729  0010EA  5186               	movf	main@address& (0+255),w,b
   730  0010EC  0D0A               	mullw	10
   731  0010EE  50F3               	movf	prodl,w,c
   732  0010F0  0100               	movlb	0	; () banked
   733  0010F2  2588               	addwf	main@keyNo& (0+255),w,b
   734  0010F4  0100               	movlb	0	; () banked
   735  0010F6  6F86               	movwf	main@address& (0+255),b
   736                           
   737                           ;test.c: 86: } else {
   738  0010F8  D0E3               	goto	l2460
   739  0010FA                     l2412:
   740                           
   741                           ; BSR set to: 0
   742                           ;test.c: 87: writeValue = writeValue * 10 + keyNo;
   743  0010FA  0100               	movlb	0	; () banked
   744  0010FC  5187               	movf	main@writeValue& (0+255),w,b
   745  0010FE  0D0A               	mullw	10
   746  001100  50F3               	movf	prodl,w,c
   747  001102  0100               	movlb	0	; () banked
   748  001104  2588               	addwf	main@keyNo& (0+255),w,b
   749  001106  D02B               	goto	L1
   750  001108                     l2414:
   751                           
   752                           ; BSR set to: 0
   753  001108  0E41               	movlw	65
   754  00110A  0100               	movlb	0	; () banked
   755  00110C  198A               	xorwf	main@key& (0+255),w,b
   756  00110E  A4D8               	btfss	status,2,c
   757  001110  D029               	goto	l2424
   758                           
   759                           ; BSR set to: 0
   760                           ;test.c: 91: if (mode == READ_MODE) { address = 0; }
   761  001112  0E0F               	movlw	low _READ_MODE
   762  001114  6EF6               	movwf	tblptrl,c
   763  001116                     	if	1	;There is more than 1 active tblptr byte
   764  001116  0E10               	movlw	high _READ_MODE
   765  001118  6EF7               	movwf	tblptrh,c
   766  00111A                     	endif
   767  00111A                     	if	1	;There are 3 active tblptr bytes
   768  00111A  0E00               	movlw	low (_READ_MODE shr (0+16))
   769  00111C  6EF8               	movwf	tblptru,c
   770  00111E                     	endif
   771  00111E  0100               	movlb	0	; () banked
   772  001120  518B               	movf	main@mode& (0+255),w,b
   773  001122  0009               	tblrd		*+
   774  001124  18F5               	xorwf	tablat,w,c
   775  001126  E109               	bnz	l2420
   776  001128  0100               	movlb	0	; () banked
   777  00112A  518C               	movf	(main@mode+1)& (0+255),w,b
   778  00112C  0009               	tblrd		*+
   779  00112E  18F5               	xorwf	tablat,w,c
   780  001130  A4D8               	btfss	status,2,c
   781  001132  D003               	goto	l2420
   782                           
   783                           ; BSR set to: 0
   784  001134  0E00               	movlw	0
   785  001136  0100               	movlb	0	; () banked
   786  001138  6F86               	movwf	main@address& (0+255),b
   787  00113A                     l2420:
   788                           
   789                           ; BSR set to: 0
   790                           ;test.c: 92: if (mode == WRITE_MODE) { writeValue = 0; }
   791  00113A  0E11               	movlw	low _WRITE_MODE
   792  00113C  6EF6               	movwf	tblptrl,c
   793  00113E                     	if	1	;There is more than 1 active tblptr byte
   794  00113E  0E10               	movlw	high _WRITE_MODE
   795  001140  6EF7               	movwf	tblptrh,c
   796  001142                     	endif
   797  001142                     	if	1	;There are 3 active tblptr bytes
   798  001142  0E00               	movlw	low (_WRITE_MODE shr (0+16))
   799  001144  6EF8               	movwf	tblptru,c
   800  001146                     	endif
   801  001146  0100               	movlb	0	; () banked
   802  001148  518B               	movf	main@mode& (0+255),w,b
   803  00114A  0009               	tblrd		*+
   804  00114C  18F5               	xorwf	tablat,w,c
   805  00114E  E105               	bnz	u1771
   806  001150  0100               	movlb	0	; () banked
   807  001152  518C               	movf	(main@mode+1)& (0+255),w,b
   808  001154  0009               	tblrd		*+
   809  001156  18F5               	xorwf	tablat,w,c
   810  001158  A4D8               	btfss	status,2,c
   811  00115A                     u1771:
   812  00115A  D0B2               	goto	l2460
   813                           
   814                           ; BSR set to: 0
   815  00115C  0E00               	movlw	0
   816  00115E                     L1:
   817  00115E  0100               	movlb	0	; () banked
   818  001160  6F87               	movwf	main@writeValue& (0+255),b
   819                           
   820                           ; BSR set to: 0
   821                           ;test.c: 94: } else if (key == 'B') {
   822  001162  D0AE               	goto	l2460
   823  001164                     l2424:
   824                           
   825                           ; BSR set to: 0
   826  001164  0E42               	movlw	66
   827  001166  0100               	movlb	0	; () banked
   828  001168  198A               	xorwf	main@key& (0+255),w,b
   829  00116A  A4D8               	btfss	status,2,c
   830  00116C  D027               	goto	l2434
   831                           
   832                           ; BSR set to: 0
   833                           ;test.c: 95: if (mode == READ_MODE) { address++; }
   834  00116E  0E0F               	movlw	low _READ_MODE
   835  001170  6EF6               	movwf	tblptrl,c
   836  001172                     	if	1	;There is more than 1 active tblptr byte
   837  001172  0E10               	movlw	high _READ_MODE
   838  001174  6EF7               	movwf	tblptrh,c
   839  001176                     	endif
   840  001176                     	if	1	;There are 3 active tblptr bytes
   841  001176  0E00               	movlw	low (_READ_MODE shr (0+16))
   842  001178  6EF8               	movwf	tblptru,c
   843  00117A                     	endif
   844  00117A  0100               	movlb	0	; () banked
   845  00117C  518B               	movf	main@mode& (0+255),w,b
   846  00117E  0009               	tblrd		*+
   847  001180  18F5               	xorwf	tablat,w,c
   848  001182  E108               	bnz	l2430
   849  001184  0100               	movlb	0	; () banked
   850  001186  518C               	movf	(main@mode+1)& (0+255),w,b
   851  001188  0009               	tblrd		*+
   852  00118A  18F5               	xorwf	tablat,w,c
   853  00118C  A4D8               	btfss	status,2,c
   854  00118E  D002               	goto	l2430
   855                           
   856                           ; BSR set to: 0
   857  001190  0100               	movlb	0	; () banked
   858  001192  2B86               	incf	main@address& (0+255),f,b
   859  001194                     l2430:
   860                           
   861                           ; BSR set to: 0
   862                           ;test.c: 96: if (mode == WRITE_MODE) { writeValue++; }
   863  001194  0E11               	movlw	low _WRITE_MODE
   864  001196  6EF6               	movwf	tblptrl,c
   865  001198                     	if	1	;There is more than 1 active tblptr byte
   866  001198  0E10               	movlw	high _WRITE_MODE
   867  00119A  6EF7               	movwf	tblptrh,c
   868  00119C                     	endif
   869  00119C                     	if	1	;There are 3 active tblptr bytes
   870  00119C  0E00               	movlw	low (_WRITE_MODE shr (0+16))
   871  00119E  6EF8               	movwf	tblptru,c
   872  0011A0                     	endif
   873  0011A0  0100               	movlb	0	; () banked
   874  0011A2  518B               	movf	main@mode& (0+255),w,b
   875  0011A4  0009               	tblrd		*+
   876  0011A6  18F5               	xorwf	tablat,w,c
   877  0011A8  E105               	bnz	u1801
   878  0011AA  0100               	movlb	0	; () banked
   879  0011AC  518C               	movf	(main@mode+1)& (0+255),w,b
   880  0011AE  0009               	tblrd		*+
   881  0011B0  18F5               	xorwf	tablat,w,c
   882  0011B2  A4D8               	btfss	status,2,c
   883  0011B4                     u1801:
   884  0011B4  D085               	goto	l2460
   885                           
   886                           ; BSR set to: 0
   887  0011B6  0100               	movlb	0	; () banked
   888  0011B8  2B87               	incf	main@writeValue& (0+255),f,b
   889                           
   890                           ; BSR set to: 0
   891                           ;test.c: 98: } else if (key == 'C') {
   892  0011BA  D082               	goto	l2460
   893  0011BC                     l2434:
   894                           
   895                           ; BSR set to: 0
   896  0011BC  0E43               	movlw	67
   897  0011BE  0100               	movlb	0	; () banked
   898  0011C0  198A               	xorwf	main@key& (0+255),w,b
   899  0011C2  A4D8               	btfss	status,2,c
   900  0011C4  D027               	goto	l2444
   901                           
   902                           ; BSR set to: 0
   903                           ;test.c: 99: if (mode == READ_MODE) { address--; }
   904  0011C6  0E0F               	movlw	low _READ_MODE
   905  0011C8  6EF6               	movwf	tblptrl,c
   906  0011CA                     	if	1	;There is more than 1 active tblptr byte
   907  0011CA  0E10               	movlw	high _READ_MODE
   908  0011CC  6EF7               	movwf	tblptrh,c
   909  0011CE                     	endif
   910  0011CE                     	if	1	;There are 3 active tblptr bytes
   911  0011CE  0E00               	movlw	low (_READ_MODE shr (0+16))
   912  0011D0  6EF8               	movwf	tblptru,c
   913  0011D2                     	endif
   914  0011D2  0100               	movlb	0	; () banked
   915  0011D4  518B               	movf	main@mode& (0+255),w,b
   916  0011D6  0009               	tblrd		*+
   917  0011D8  18F5               	xorwf	tablat,w,c
   918  0011DA  E108               	bnz	l2440
   919  0011DC  0100               	movlb	0	; () banked
   920  0011DE  518C               	movf	(main@mode+1)& (0+255),w,b
   921  0011E0  0009               	tblrd		*+
   922  0011E2  18F5               	xorwf	tablat,w,c
   923  0011E4  A4D8               	btfss	status,2,c
   924  0011E6  D002               	goto	l2440
   925                           
   926                           ; BSR set to: 0
   927  0011E8  0100               	movlb	0	; () banked
   928  0011EA  0786               	decf	main@address& (0+255),f,b
   929  0011EC                     l2440:
   930                           
   931                           ; BSR set to: 0
   932                           ;test.c: 100: if (mode == WRITE_MODE) { writeValue--; }
   933  0011EC  0E11               	movlw	low _WRITE_MODE
   934  0011EE  6EF6               	movwf	tblptrl,c
   935  0011F0                     	if	1	;There is more than 1 active tblptr byte
   936  0011F0  0E10               	movlw	high _WRITE_MODE
   937  0011F2  6EF7               	movwf	tblptrh,c
   938  0011F4                     	endif
   939  0011F4                     	if	1	;There are 3 active tblptr bytes
   940  0011F4  0E00               	movlw	low (_WRITE_MODE shr (0+16))
   941  0011F6  6EF8               	movwf	tblptru,c
   942  0011F8                     	endif
   943  0011F8  0100               	movlb	0	; () banked
   944  0011FA  518B               	movf	main@mode& (0+255),w,b
   945  0011FC  0009               	tblrd		*+
   946  0011FE  18F5               	xorwf	tablat,w,c
   947  001200  E15F               	bnz	l2460
   948  001202  0100               	movlb	0	; () banked
   949  001204  518C               	movf	(main@mode+1)& (0+255),w,b
   950  001206  0009               	tblrd		*+
   951  001208  18F5               	xorwf	tablat,w,c
   952  00120A  A4D8               	btfss	status,2,c
   953  00120C  D059               	goto	l2460
   954                           
   955                           ; BSR set to: 0
   956  00120E  0100               	movlb	0	; () banked
   957  001210  0787               	decf	main@writeValue& (0+255),f,b
   958                           
   959                           ; BSR set to: 0
   960                           ;test.c: 102: } else if (key == 'D') {
   961  001212  D056               	goto	l2460
   962  001214                     l2444:
   963                           
   964                           ; BSR set to: 0
   965  001214  0E44               	movlw	68
   966  001216  0100               	movlb	0	; () banked
   967  001218  198A               	xorwf	main@key& (0+255),w,b
   968  00121A  A4D8               	btfss	status,2,c
   969  00121C  D035               	goto	l2454
   970                           
   971                           ; BSR set to: 0
   972                           ;test.c: 103: if (mode == READ_MODE) { mode = WRITE_MODE; }
   973  00121E  0E0F               	movlw	low _READ_MODE
   974  001220  6EF6               	movwf	tblptrl,c
   975  001222                     	if	1	;There is more than 1 active tblptr byte
   976  001222  0E10               	movlw	high _READ_MODE
   977  001224  6EF7               	movwf	tblptrh,c
   978  001226                     	endif
   979  001226                     	if	1	;There are 3 active tblptr bytes
   980  001226  0E00               	movlw	low (_READ_MODE shr (0+16))
   981  001228  6EF8               	movwf	tblptru,c
   982  00122A                     	endif
   983  00122A  0100               	movlb	0	; () banked
   984  00122C  518B               	movf	main@mode& (0+255),w,b
   985  00122E  0009               	tblrd		*+
   986  001230  18F5               	xorwf	tablat,w,c
   987  001232  E10C               	bnz	l2450
   988  001234  0100               	movlb	0	; () banked
   989  001236  518C               	movf	(main@mode+1)& (0+255),w,b
   990  001238  0009               	tblrd		*+
   991  00123A  18F5               	xorwf	tablat,w,c
   992  00123C  A4D8               	btfss	status,2,c
   993  00123E  D006               	goto	l2450
   994                           
   995                           ; BSR set to: 0
   996  001240  0E11               	movlw	low _WRITE_MODE
   997  001242  6EF6               	movwf	tblptrl,c
   998  001244                     	if	1	;There is more than 1 active tblptr byte
   999  001244  0E10               	movlw	high _WRITE_MODE
  1000  001246  6EF7               	movwf	tblptrh,c
  1001  001248                     	endif
  1002  001248                     	if	1	;There are 3 active tblptr bytes
  1003  001248  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1004  00124A  D016               	goto	L2
  1005  00124C                     l2450:
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;test.c: 104: else if (mode == WRITE_MODE) { mode = READ_MODE; }
  1009  00124C  0E11               	movlw	low _WRITE_MODE
  1010  00124E  6EF6               	movwf	tblptrl,c
  1011  001250                     	if	1	;There is more than 1 active tblptr byte
  1012  001250  0E10               	movlw	high _WRITE_MODE
  1013  001252  6EF7               	movwf	tblptrh,c
  1014  001254                     	endif
  1015  001254                     	if	1	;There are 3 active tblptr bytes
  1016  001254  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1017  001256  6EF8               	movwf	tblptru,c
  1018  001258                     	endif
  1019  001258  0100               	movlb	0	; () banked
  1020  00125A  518B               	movf	main@mode& (0+255),w,b
  1021  00125C  0009               	tblrd		*+
  1022  00125E  18F5               	xorwf	tablat,w,c
  1023  001260  E12F               	bnz	l2460
  1024  001262  0100               	movlb	0	; () banked
  1025  001264  518C               	movf	(main@mode+1)& (0+255),w,b
  1026  001266  0009               	tblrd		*+
  1027  001268  18F5               	xorwf	tablat,w,c
  1028  00126A  A4D8               	btfss	status,2,c
  1029  00126C  D029               	goto	l2460
  1030                           
  1031                           ; BSR set to: 0
  1032  00126E  0E0F               	movlw	low _READ_MODE
  1033  001270  6EF6               	movwf	tblptrl,c
  1034  001272                     	if	1	;There is more than 1 active tblptr byte
  1035  001272  0E10               	movlw	high _READ_MODE
  1036  001274  6EF7               	movwf	tblptrh,c
  1037  001276                     	endif
  1038  001276                     	if	1	;There are 3 active tblptr bytes
  1039  001276  0E00               	movlw	low (_READ_MODE shr (0+16))
  1040  001278                     L2:
  1041  001278  6EF8               	movwf	tblptru,c
  1042  00127A                     	endif
  1043  00127A  0009               	tblrd		*+
  1044  00127C  CFF5 F08B          	movff	tablat,main@mode
  1045  001280  000A               	tblrd		*-
  1046  001282  CFF5 F08C          	movff	tablat,main@mode+1
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;test.c: 106: } else if (key == '*' && mode == WRITE_MODE) {
  1050                           
  1051                           ; BSR set to: 0
  1052  001286  D01C               	goto	l2460
  1053  001288                     l2454:
  1054                           
  1055                           ; BSR set to: 0
  1056  001288  0E2A               	movlw	42
  1057  00128A  0100               	movlb	0	; () banked
  1058  00128C  198A               	xorwf	main@key& (0+255),w,b
  1059  00128E  A4D8               	btfss	status,2,c
  1060  001290  D017               	goto	l2460
  1061                           
  1062                           ; BSR set to: 0
  1063  001292  0E11               	movlw	low _WRITE_MODE
  1064  001294  6EF6               	movwf	tblptrl,c
  1065  001296                     	if	1	;There is more than 1 active tblptr byte
  1066  001296  0E10               	movlw	high _WRITE_MODE
  1067  001298  6EF7               	movwf	tblptrh,c
  1068  00129A                     	endif
  1069  00129A                     	if	1	;There are 3 active tblptr bytes
  1070  00129A  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1071  00129C  6EF8               	movwf	tblptru,c
  1072  00129E                     	endif
  1073  00129E  0100               	movlb	0	; () banked
  1074  0012A0  518B               	movf	main@mode& (0+255),w,b
  1075  0012A2  0009               	tblrd		*+
  1076  0012A4  18F5               	xorwf	tablat,w,c
  1077  0012A6  E10C               	bnz	l2460
  1078  0012A8  0100               	movlb	0	; () banked
  1079  0012AA  518C               	movf	(main@mode+1)& (0+255),w,b
  1080  0012AC  0009               	tblrd		*+
  1081  0012AE  18F5               	xorwf	tablat,w,c
  1082  0012B0  A4D8               	btfss	status,2,c
  1083  0012B2  D006               	goto	l2460
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;test.c: 107: ee_write_char(address, writeValue);
  1087  0012B4  C087  F060         	movff	main@writeValue,ee_write_char@chunk
  1088  0012B8  0100               	movlb	0	; () banked
  1089  0012BA  5186               	movf	main@address& (0+255),w,b
  1090  0012BC  EC3B  F00D         	call	_ee_write_char
  1091  0012C0                     l2460:
  1092                           
  1093                           ;test.c: 108: }
  1094                           ;test.c: 110: if (keyNo != 0xFF) {
  1095  0012C0  0100               	movlb	0	; () banked
  1096  0012C2  2988               	incf	main@keyNo& (0+255),w,b
  1097  0012C4  0100               	movlb	0	; () banked
  1098  0012C6  1189               	iorwf	(main@keyNo+1)& (0+255),w,b
  1099  0012C8  B4D8               	btfsc	status,2,c
  1100  0012CA  D004               	goto	l2464
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;test.c: 111: writeLCD(address);
  1104  0012CC  0100               	movlb	0	; () banked
  1105  0012CE  5186               	movf	main@address& (0+255),w,b
  1106  0012D0  ECFA  F00B         	call	_writeLCD
  1107  0012D4                     l2464:
  1108                           
  1109                           ;test.c: 112: }
  1110                           ;test.c: 114: LCD8send(0xC0, 0);
  1111  0012D4  0E00               	movlw	0
  1112  0012D6  6E23               	movwf	LCD8send@mode,c
  1113  0012D8  0EC0               	movlw	192
  1114  0012DA  EC70  F00C         	call	_LCD8send
  1115                           
  1116                           ;test.c: 115: LCD8send("WR"[mode], 1);
  1117  0012DE  0E01               	movlw	1
  1118  0012E0  6E23               	movwf	LCD8send@mode,c
  1119  0012E2  0E1F               	movlw	low STR_4
  1120  0012E4  0100               	movlb	0	; () banked
  1121  0012E6  258B               	addwf	main@mode& (0+255),w,b
  1122  0012E8  6EF6               	movwf	tblptrl,c
  1123  0012EA  0E10               	movlw	high STR_4
  1124  0012EC  218C               	addwfc	(main@mode+1)& (0+255),w,b
  1125  0012EE  6EF7               	movwf	tblptrh,c
  1126  0012F0                     	if	1	;There are 3 active tblptr bytes
  1127  0012F0  6AF8               	clrf	tblptru,c
  1128  0012F2  0E00               	movlw	low (__mediumconst shr (0+16))
  1129  0012F4  22F8               	addwfc	tblptru,f,c
  1130  0012F6                     	endif
  1131  0012F6  0008               	tblrd		*
  1132  0012F8  50F5               	movf	tablat,w,c
  1133  0012FA  EC70  F00C         	call	_LCD8send
  1134                           
  1135                           ;test.c: 116: lcdWriteLine(" key=");
  1136  0012FE  0E19               	movlw	low STR_5
  1137  001300  0100               	movlb	0	; () banked
  1138  001302  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1139  001304  0E10               	movlw	high STR_5
  1140  001306  0100               	movlb	0	; () banked
  1141  001308  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1142  00130A  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1143                           
  1144                           ;test.c: 118: LCD8send(key, 1);
  1145  00130E  0E01               	movlw	1
  1146  001310  6E23               	movwf	LCD8send@mode,c
  1147  001312  0100               	movlb	0	; () banked
  1148  001314  518A               	movf	main@key& (0+255),w,b
  1149  001316  EC70  F00C         	call	_LCD8send
  1150                           
  1151                           ;test.c: 119: lcdWriteLine(" val=");
  1152  00131A  0E13               	movlw	low STR_6
  1153  00131C  0100               	movlb	0	; () banked
  1154  00131E  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1155  001320  0E10               	movlw	high STR_6
  1156  001322  0100               	movlb	0	; () banked
  1157  001324  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1158  001326  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1159                           
  1160                           ;test.c: 120: writeNum(writeValue);
  1161  00132A  0100               	movlb	0	; () banked
  1162  00132C  5187               	movf	main@writeValue& (0+255),w,b
  1163  00132E  ECAC  F00C         	call	_writeNum
  1164                           
  1165                           ;test.c: 122: prevKey = key;
  1166  001332  C08A  F085         	movff	main@key,main@prevKey
  1167  001336                     l2478:
  1168                           
  1169                           ;test.c: 123: }
  1170                           ;test.c: 125: delay_ms(100);
  1171  001336  0E00               	movlw	0
  1172  001338  6E21               	movwf	delay_ms@x+1,c
  1173  00133A  0E64               	movlw	100
  1174  00133C  6E20               	movwf	delay_ms@x,c
  1175  00133E  EC8E  F00C         	call	_delay_ms	;wreg free
  1176  001342  D698               	goto	l2396
  1177  001344                     __end_of_main:
  1178                           	opt stack 0
  1179                           tblptru	equ	0xFF8
  1180                           tblptrh	equ	0xFF7
  1181                           tblptrl	equ	0xFF6
  1182                           tablat	equ	0xFF5
  1183                           prodl	equ	0xFF3
  1184                           postinc0	equ	0xFEE
  1185                           postdec1	equ	0xFE5
  1186                           fsr1l	equ	0xFE1
  1187                           indf2	equ	0xFDF
  1188                           fsr2h	equ	0xFDA
  1189                           fsr2l	equ	0xFD9
  1190                           status	equ	0xFD8
  1191                           
  1192 ;; *************** function _writeLCD *****************
  1193 ;; Defined at:
  1194 ;;		line 49 in file "test.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;  address         1    wreg     unsigned char 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  address         1   35[BANK0 ] unsigned char 
  1199 ;;  data            2   33[BANK0 ] PTR unsigned char 
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1212 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1213 ;;Total ram usage:        3 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; Hardware stack levels required when called:    6
  1216 ;; This function calls:
  1217 ;;		_LCD8send
  1218 ;;		_ee_read_char
  1219 ;;		_lcdWriteLine
  1220 ;;		_writeNum
  1221 ;; This function is called by:
  1222 ;;		_main
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           	psect	text1
  1227  0017F4                     __ptext1:
  1228                           	opt stack 0
  1229  0017F4                     _writeLCD:
  1230                           	opt stack 24
  1231                           
  1232                           ;incstack = 0
  1233                           ;writeLCD@address stored from wreg
  1234  0017F4  0100               	movlb	0	; () banked
  1235  0017F6  6F83               	movwf	writeLCD@address& (0+255),b
  1236                           
  1237                           ;test.c: 50: unsigned char *data;
  1238                           ;test.c: 51: LCD8send(0x01, 0);
  1239  0017F8  0E00               	movlw	0
  1240  0017FA  6E23               	movwf	LCD8send@mode,c
  1241  0017FC  0E01               	movlw	1
  1242  0017FE  EC70  F00C         	call	_LCD8send
  1243                           
  1244                           ;test.c: 52: ee_read_char(address, data);
  1245  001802  C081  F060         	movff	writeLCD@data,ee_read_char@_data
  1246  001806  C082  F061         	movff	writeLCD@data+1,ee_read_char@_data+1
  1247  00180A  0100               	movlb	0	; () banked
  1248  00180C  5183               	movf	writeLCD@address& (0+255),w,b
  1249  00180E  EC28  F00D         	call	_ee_read_char
  1250                           
  1251                           ;test.c: 54: lcdWriteLine("#");
  1252  001812  0E28               	movlw	low STR_2
  1253  001814  0100               	movlb	0	; () banked
  1254  001816  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1255  001818  0E10               	movlw	high STR_2
  1256  00181A  0100               	movlb	0	; () banked
  1257  00181C  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1258  00181E  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1259                           
  1260                           ;test.c: 55: writeNum(address);
  1261  001822  0100               	movlb	0	; () banked
  1262  001824  5183               	movf	writeLCD@address& (0+255),w,b
  1263  001826  ECAC  F00C         	call	_writeNum
  1264                           
  1265                           ;test.c: 57: lcdWriteLine(" V");
  1266  00182A  0E22               	movlw	low STR_3
  1267  00182C  0100               	movlb	0	; () banked
  1268  00182E  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1269  001830  0E10               	movlw	high STR_3
  1270  001832  0100               	movlb	0	; () banked
  1271  001834  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1272  001836  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1273                           
  1274                           ;test.c: 58: writeNum(*data);
  1275  00183A  C081  FFD9         	movff	writeLCD@data,fsr2l
  1276  00183E  C082  FFDA         	movff	writeLCD@data+1,fsr2h
  1277  001842  50DF               	movf	indf2,w,c
  1278  001844  ECAC  F00C         	call	_writeNum
  1279  001848  0012               	return		;funcret
  1280  00184A                     __end_of_writeLCD:
  1281                           	opt stack 0
  1282                           tblptru	equ	0xFF8
  1283                           tblptrh	equ	0xFF7
  1284                           tblptrl	equ	0xFF6
  1285                           tablat	equ	0xFF5
  1286                           prodl	equ	0xFF3
  1287                           postinc0	equ	0xFEE
  1288                           postdec1	equ	0xFE5
  1289                           fsr1l	equ	0xFE1
  1290                           indf2	equ	0xFDF
  1291                           fsr2h	equ	0xFDA
  1292                           fsr2l	equ	0xFD9
  1293                           status	equ	0xFD8
  1294                           
  1295 ;; *************** function _writeNum *****************
  1296 ;; Defined at:
  1297 ;;		line 43 in file "test.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  number          1    wreg     unsigned char 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  number          1   32[BANK0 ] unsigned char 
  1302 ;;  numStr         10   22[BANK0 ] unsigned char [10]
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1313 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1315 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;Total ram usage:       11 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    5
  1319 ;; This function calls:
  1320 ;;		_lcdWriteLine
  1321 ;;		_sprintf
  1322 ;; This function is called by:
  1323 ;;		_writeLCD
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text2
  1329  001958                     __ptext2:
  1330                           	opt stack 0
  1331  001958                     _writeNum:
  1332                           	opt stack 25
  1333                           
  1334                           ;incstack = 0
  1335                           ;writeNum@number stored from wreg
  1336  001958  0100               	movlb	0	; () banked
  1337  00195A  6F80               	movwf	writeNum@number& (0+255),b
  1338                           
  1339                           ;test.c: 44: char numStr[10];
  1340                           ;test.c: 45: sprintf(numStr, "%i", number);
  1341  00195C  0E76               	movlw	low writeNum@numStr
  1342  00195E  0100               	movlb	0	; () banked
  1343  001960  6F68               	movwf	sprintf@sp& (0+255),b
  1344  001962  0E00               	movlw	high writeNum@numStr
  1345  001964  0100               	movlb	0	; () banked
  1346  001966  6F69               	movwf	(sprintf@sp+1)& (0+255),b
  1347  001968  0E25               	movlw	low STR_1
  1348  00196A  0100               	movlb	0	; () banked
  1349  00196C  6F6A               	movwf	sprintf@f& (0+255),b
  1350  00196E  0E10               	movlw	high STR_1
  1351  001970  0100               	movlb	0	; () banked
  1352  001972  6F6B               	movwf	(sprintf@f+1)& (0+255),b
  1353  001974  C080  F06C         	movff	writeNum@number,?_sprintf+4
  1354  001978  0100               	movlb	0	; () banked
  1355  00197A  6B6D               	clrf	(?_sprintf+5)& (0+255),b
  1356  00197C  ECA2  F009         	call	_sprintf	;wreg free
  1357                           
  1358                           ;test.c: 46: lcdWriteLine(numStr);
  1359  001980  0E76               	movlw	low writeNum@numStr
  1360  001982  0100               	movlb	0	; () banked
  1361  001984  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1362  001986  0E00               	movlw	high writeNum@numStr
  1363  001988  0100               	movlb	0	; () banked
  1364  00198A  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1365  00198C  ECCB  F00A         	call	_lcdWriteLine	;wreg free
  1366  001990  0012               	return		;funcret
  1367  001992                     __end_of_writeNum:
  1368                           	opt stack 0
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           prodl	equ	0xFF3
  1374                           postinc0	equ	0xFEE
  1375                           postdec1	equ	0xFE5
  1376                           fsr1l	equ	0xFE1
  1377                           indf2	equ	0xFDF
  1378                           fsr2h	equ	0xFDA
  1379                           fsr2l	equ	0xFD9
  1380                           status	equ	0xFD8
  1381                           
  1382 ;; *************** function _sprintf *****************
  1383 ;; Defined at:
  1384 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  sp              2    8[BANK0 ] PTR unsigned char 
  1387 ;;		 -> writeNum@numStr(10), 
  1388 ;;  f               2   10[BANK0 ] PTR const unsigned char 
  1389 ;;		 -> STR_1(3), 
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  tmpval          4    0        struct .
  1392 ;;  cp              3    0        PTR const unsigned char 
  1393 ;;  val             2   19[BANK0 ] unsigned int 
  1394 ;;  ap              2   15[BANK0 ] PTR void [1]
  1395 ;;		 -> ?_sprintf(2), 
  1396 ;;  len             2    0        unsigned int 
  1397 ;;  c               1   21[BANK0 ] char 
  1398 ;;  prec            1   18[BANK0 ] char 
  1399 ;;  flag            1   17[BANK0 ] unsigned char 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  2    8[BANK0 ] int 
  1402 ;; Registers used:
  1403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1409 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1410 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1411 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1412 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;Total ram usage:       14 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    3
  1416 ;; This function calls:
  1417 ;;		___lwdiv
  1418 ;;		___lwmod
  1419 ;; This function is called by:
  1420 ;;		_writeNum
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           	psect	text3
  1425  001344                     __ptext3:
  1426                           	opt stack 0
  1427  001344                     _sprintf:
  1428                           	opt stack 26
  1429                           
  1430                           ;doprnt.c: 494: va_list ap;
  1431                           ;doprnt.c: 499: signed char c;
  1432                           ;doprnt.c: 506: signed char prec;
  1433                           ;doprnt.c: 508: unsigned char flag;
  1434                           ;doprnt.c: 523: union {
  1435                           ;doprnt.c: 524: unsigned long vd;
  1436                           ;doprnt.c: 525: double integ;
  1437                           ;doprnt.c: 526: } tmpval;
  1438                           ;doprnt.c: 528: unsigned int val;
  1439                           ;doprnt.c: 529: unsigned len;
  1440                           ;doprnt.c: 530: const char * cp;
  1441                           ;doprnt.c: 533: *ap = __va_start();
  1442                           
  1443                           ;incstack = 0
  1444  001344  0E6C               	movlw	low (?_sprintf+4)
  1445  001346  0100               	movlb	0	; () banked
  1446  001348  6F6F               	movwf	sprintf@ap& (0+255),b
  1447  00134A  0E00               	movlw	high (?_sprintf+4)
  1448  00134C  0100               	movlb	0	; () banked
  1449  00134E  6F70               	movwf	(sprintf@ap+1)& (0+255),b
  1450                           
  1451                           ;doprnt.c: 536: while(c = *f++) {
  1452  001350  D0AC               	goto	l2180
  1453  001352                     l2128:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;doprnt.c: 538: if(c != '%')
  1457  001352  0E25               	movlw	37
  1458  001354  0100               	movlb	0	; () banked
  1459  001356  1975               	xorwf	sprintf@c& (0+255),w,b
  1460  001358  B4D8               	btfsc	status,2,c
  1461  00135A  D00A               	goto	l2134
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;doprnt.c: 540: {
  1465                           ;doprnt.c: 541: ((*sp++ = (c)));
  1466  00135C  C068  FFD9         	movff	sprintf@sp,fsr2l
  1467  001360  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1468  001364  C075  FFDF         	movff	sprintf@c,indf2
  1469                           
  1470                           ; BSR set to: 0
  1471  001368  0100               	movlb	0	; () banked
  1472  00136A  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1473  00136C  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1474                           
  1475                           ;doprnt.c: 542: continue;
  1476  00136E  D09D               	goto	l2180
  1477  001370                     l2134:
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;doprnt.c: 543: }
  1481                           ;doprnt.c: 548: flag = 0;
  1482  001370  0E00               	movlw	0
  1483  001372  0100               	movlb	0	; () banked
  1484  001374  6F71               	movwf	sprintf@flag& (0+255),b
  1485                           
  1486                           ; BSR set to: 0
  1487                           
  1488                           ; BSR set to: 0
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;doprnt.c: 822: }
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;doprnt.c: 813: continue;
  1495                           
  1496                           ;doprnt.c: 802: default:
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;doprnt.c: 698: case 'i':
  1500                           ;doprnt.c: 699: break;
  1501                           
  1502                           ; BSR set to: 0
  1503                           
  1504                           ;doprnt.c: 697: case 'd':
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;doprnt.c: 638: goto alldone;
  1508                           
  1509                           ;doprnt.c: 637: case 0:
  1510                           
  1511                           ;doprnt.c: 635: switch(c = *f++) {
  1512  001376  C06A  FFF6         	movff	sprintf@f,tblptrl
  1513  00137A  C06B  FFF7         	movff	sprintf@f+1,tblptrh
  1514  00137E  0100               	movlb	0	; () banked
  1515  001380  4B6A               	infsnz	sprintf@f& (0+255),f,b
  1516  001382  2B6B               	incf	(sprintf@f+1)& (0+255),f,b
  1517  001384                     	if	0	;tblptru may be non-zero
  1518  001384                     	endif
  1519  001384                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1520  001384  0E00               	movlw	low (__mediumconst shr (0+16))
  1521  001386  6EF8               	movwf	tblptru,c
  1522  001388                     	endif
  1523  001388  0008               	tblrd		*
  1524  00138A  CFF5 F075          	movff	tablat,sprintf@c
  1525  00138E  0100               	movlb	0	; () banked
  1526  001390  5175               	movf	sprintf@c& (0+255),w,b
  1527                           
  1528                           ; Switch size 1, requested type "space"
  1529                           ; Number of cases is 3, Range of values is 0 to 105
  1530                           ; switch strategies available:
  1531                           ; Name         Instructions Cycles
  1532                           ; simple_byte           10     6 (average)
  1533                           ;	Chosen strategy is simple_byte
  1534  001392  0A00               	xorlw	0	; case 0
  1535  001394  B4D8               	btfsc	status,2,c
  1536  001396  D099               	goto	l2182
  1537  001398  0A64               	xorlw	100	; case 100
  1538  00139A  B4D8               	btfsc	status,2,c
  1539  00139C  D003               	goto	l2140
  1540  00139E  0A0D               	xorlw	13	; case 105
  1541  0013A0  A4D8               	btfss	status,2,c
  1542  0013A2  D083               	goto	l2180
  1543  0013A4                     l2140:
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;doprnt.c: 1253: {
  1547                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1548  0013A4  C06F  FFD9         	movff	sprintf@ap,fsr2l
  1549  0013A8  C070  FFDA         	movff	sprintf@ap+1,fsr2h
  1550  0013AC  CFDE F073          	movff	postinc2,sprintf@val
  1551  0013B0  CFDD F074          	movff	postdec2,sprintf@val+1
  1552                           
  1553                           ; BSR set to: 0
  1554  0013B4  0E02               	movlw	2
  1555  0013B6  0100               	movlb	0	; () banked
  1556  0013B8  276F               	addwf	sprintf@ap& (0+255),f,b
  1557  0013BA  0E00               	movlw	0
  1558  0013BC  2370               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;doprnt.c: 1261: if((int)val < 0) {
  1562  0013BE  0100               	movlb	0	; () banked
  1563  0013C0  AF74               	btfss	(sprintf@val+1)& (0+255),7,b
  1564  0013C2  D008               	goto	l2150
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;doprnt.c: 1262: flag |= 0x03;
  1568  0013C4  0E03               	movlw	3
  1569  0013C6  0100               	movlb	0	; () banked
  1570  0013C8  1371               	iorwf	sprintf@flag& (0+255),f,b
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;doprnt.c: 1263: val = -val;
  1574  0013CA  0100               	movlb	0	; () banked
  1575  0013CC  6D73               	negf	sprintf@val& (0+255),b
  1576  0013CE  1F74               	comf	(sprintf@val+1)& (0+255),f,b
  1577  0013D0  B0D8               	btfsc	status,0,c
  1578  0013D2  2B74               	incf	(sprintf@val+1)& (0+255),f,b
  1579  0013D4                     l2150:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;doprnt.c: 1264: }
  1583                           ;doprnt.c: 1266: }
  1584                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1585  0013D4  0E01               	movlw	1
  1586  0013D6  0100               	movlb	0	; () banked
  1587  0013D8  6F75               	movwf	sprintf@c& (0+255),b
  1588  0013DA                     l2152:
  1589                           
  1590                           ; BSR set to: 0
  1591  0013DA  0E05               	movlw	5
  1592  0013DC  0100               	movlb	0	; () banked
  1593  0013DE  1975               	xorwf	sprintf@c& (0+255),w,b
  1594  0013E0  B4D8               	btfsc	status,2,c
  1595  0013E2  D019               	goto	l2164
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;doprnt.c: 1306: if(val < dpowers[c])
  1599                           
  1600                           ; BSR set to: 0
  1601                           
  1602                           ; BSR set to: 0
  1603  0013E4  0100               	movlb	0	; () banked
  1604  0013E6  5175               	movf	sprintf@c& (0+255),w,b
  1605  0013E8  0D02               	mullw	2
  1606  0013EA  0E01               	movlw	low _dpowers
  1607  0013EC  24F3               	addwf	prodl,w,c
  1608  0013EE  6EF6               	movwf	tblptrl,c
  1609  0013F0  0E10               	movlw	high _dpowers
  1610  0013F2  20F4               	addwfc	prodh,w,c
  1611  0013F4  6EF7               	movwf	tblptrh,c
  1612  0013F6                     	if	1	;There are 3 active tblptr bytes
  1613  0013F6  6AF8               	clrf	tblptru,c
  1614  0013F8  0E00               	movlw	low (__mediumconst shr (0+16))
  1615  0013FA  22F8               	addwfc	tblptru,f,c
  1616  0013FC                     	endif
  1617  0013FC  0009               	tblrd		*+
  1618  0013FE  50F5               	movf	tablat,w,c
  1619  001400  0100               	movlb	0	; () banked
  1620  001402  5D73               	subwf	sprintf@val& (0+255),w,b
  1621  001404  0009               	tblrd		*+
  1622  001406  50F5               	movf	tablat,w,c
  1623  001408  0100               	movlb	0	; () banked
  1624  00140A  5974               	subwfb	(sprintf@val+1)& (0+255),w,b
  1625  00140C  A0D8               	btfss	status,0,c
  1626  00140E  D003               	goto	l2164
  1627                           
  1628                           ; BSR set to: 0
  1629                           
  1630                           ; BSR set to: 0
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;doprnt.c: 1307: break;
  1634  001410  0100               	movlb	0	; () banked
  1635  001412  2B75               	incf	sprintf@c& (0+255),f,b
  1636  001414  D7E2               	goto	l2152
  1637  001416                     l2164:
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;doprnt.c: 1422: {
  1641                           ;doprnt.c: 1438: if(flag & 0x03)
  1642  001416  C071  F06E         	movff	sprintf@flag,??_sprintf
  1643  00141A  0E03               	movlw	3
  1644  00141C  0100               	movlb	0	; () banked
  1645  00141E  176E               	andwf	??_sprintf& (0+255),f,b
  1646  001420  B4D8               	btfsc	status,2,c
  1647  001422  D009               	goto	l2170
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1651  001424  C068  FFD9         	movff	sprintf@sp,fsr2l
  1652  001428  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1653  00142C  0E2D               	movlw	45
  1654  00142E  6EDF               	movwf	indf2,c
  1655                           
  1656                           ; BSR set to: 0
  1657  001430  0100               	movlb	0	; () banked
  1658  001432  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1659  001434  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1660  001436                     l2170:
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;doprnt.c: 1469: }
  1664                           ;doprnt.c: 1472: prec = c;
  1665  001436  C075  F072         	movff	sprintf@c,sprintf@prec
  1666                           
  1667                           ;doprnt.c: 1474: while(prec--) {
  1668  00143A  D031               	goto	l2178
  1669  00143C                     l2172:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;doprnt.c: 1478: {
  1673                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1674  00143C  0100               	movlb	0	; () banked
  1675  00143E  5172               	movf	sprintf@prec& (0+255),w,b
  1676  001440  0D02               	mullw	2
  1677  001442  0E01               	movlw	low _dpowers
  1678  001444  24F3               	addwf	prodl,w,c
  1679  001446  6EF6               	movwf	tblptrl,c
  1680  001448  0E10               	movlw	high _dpowers
  1681  00144A  20F4               	addwfc	prodh,w,c
  1682  00144C  6EF7               	movwf	tblptrh,c
  1683  00144E                     	if	1	;There are 3 active tblptr bytes
  1684  00144E  6AF8               	clrf	tblptru,c
  1685  001450  0E00               	movlw	low (__mediumconst shr (0+16))
  1686  001452  22F8               	addwfc	tblptru,f,c
  1687  001454                     	endif
  1688  001454  0009               	tblrd		*+
  1689  001456  CFF5 F022          	movff	tablat,___lwdiv@divisor
  1690  00145A  000A               	tblrd		*-
  1691  00145C  CFF5 F023          	movff	tablat,___lwdiv@divisor+1
  1692  001460  C073  F020         	movff	sprintf@val,___lwdiv@dividend
  1693  001464  C074  F021         	movff	sprintf@val+1,___lwdiv@dividend+1
  1694  001468  ECCB  F00B         	call	___lwdiv	;wreg free
  1695  00146C  C020  F063         	movff	?___lwdiv,___lwmod@dividend
  1696  001470  C021  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  1697  001474  0E00               	movlw	0
  1698  001476  0100               	movlb	0	; () banked
  1699  001478  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  1700  00147A  0E0A               	movlw	10
  1701  00147C  6F65               	movwf	___lwmod@divisor& (0+255),b
  1702  00147E  EC9A  F00B         	call	___lwmod	;wreg free
  1703  001482  0100               	movlb	0	; () banked
  1704  001484  5163               	movf	?___lwmod& (0+255),w,b
  1705  001486  0F30               	addlw	48
  1706  001488  0100               	movlb	0	; () banked
  1707  00148A  6F75               	movwf	sprintf@c& (0+255),b
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;doprnt.c: 1523: }
  1711                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1712  00148C  C068  FFD9         	movff	sprintf@sp,fsr2l
  1713  001490  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1714  001494  C075  FFDF         	movff	sprintf@c,indf2
  1715                           
  1716                           ; BSR set to: 0
  1717  001498  0100               	movlb	0	; () banked
  1718  00149A  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1719  00149C  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1720  00149E                     l2178:
  1721                           
  1722                           ; BSR set to: 0
  1723  00149E  0100               	movlb	0	; () banked
  1724  0014A0  0772               	decf	sprintf@prec& (0+255),f,b
  1725  0014A2  0100               	movlb	0	; () banked
  1726  0014A4  2972               	incf	sprintf@prec& (0+255),w,b
  1727  0014A6  A4D8               	btfss	status,2,c
  1728  0014A8  D7C9               	goto	l2172
  1729  0014AA                     l2180:
  1730                           
  1731                           ; BSR set to: 0
  1732  0014AA  C06A  FFF6         	movff	sprintf@f,tblptrl
  1733  0014AE  C06B  FFF7         	movff	sprintf@f+1,tblptrh
  1734  0014B2  0100               	movlb	0	; () banked
  1735  0014B4  4B6A               	infsnz	sprintf@f& (0+255),f,b
  1736  0014B6  2B6B               	incf	(sprintf@f+1)& (0+255),f,b
  1737  0014B8                     	if	0	;tblptru may be non-zero
  1738  0014B8                     	endif
  1739  0014B8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1740  0014B8  0E00               	movlw	low (__mediumconst shr (0+16))
  1741  0014BA  6EF8               	movwf	tblptru,c
  1742  0014BC                     	endif
  1743  0014BC  0008               	tblrd		*
  1744  0014BE  CFF5 F075          	movff	tablat,sprintf@c
  1745  0014C2  0100               	movlb	0	; () banked
  1746  0014C4  5175               	movf	sprintf@c& (0+255),w,b
  1747  0014C6  A4D8               	btfss	status,2,c
  1748  0014C8  D744               	goto	l2128
  1749  0014CA                     l2182:
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;doprnt.c: 1538: *sp = 0;
  1753  0014CA  C068  FFD9         	movff	sprintf@sp,fsr2l
  1754  0014CE  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1755  0014D2  0E00               	movlw	0
  1756  0014D4  6EDF               	movwf	indf2,c
  1757  0014D6  0012               	return	
  1758  0014D8                     __end_of_sprintf:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           prodh	equ	0xFF4
  1765                           prodl	equ	0xFF3
  1766                           postinc0	equ	0xFEE
  1767                           postdec1	equ	0xFE5
  1768                           fsr1l	equ	0xFE1
  1769                           indf2	equ	0xFDF
  1770                           postinc2	equ	0xFDE
  1771                           postdec2	equ	0xFDD
  1772                           fsr2h	equ	0xFDA
  1773                           fsr2l	equ	0xFD9
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function ___lwmod *****************
  1777 ;; Defined at:
  1778 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  dividend        2    3[BANK0 ] unsigned int 
  1781 ;;  divisor         2    5[BANK0 ] unsigned int 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  counter         1    7[BANK0 ] unsigned char 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  2    3[BANK0 ] unsigned int 
  1786 ;; Registers used:
  1787 ;;		wreg, status,2, status,0
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1793 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;Total ram usage:        5 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    2
  1800 ;; This function calls:
  1801 ;;		Nothing
  1802 ;; This function is called by:
  1803 ;;		_sprintf
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text4
  1808  001734                     __ptext4:
  1809                           	opt stack 0
  1810  001734                     ___lwmod:
  1811                           	opt stack 26
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;incstack = 0
  1815  001734  0100               	movlb	0	; () banked
  1816  001736  5165               	movf	___lwmod@divisor& (0+255),w,b
  1817  001738  0100               	movlb	0	; () banked
  1818  00173A  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1819  00173C  B4D8               	btfsc	status,2,c
  1820  00173E  D026               	goto	l777
  1821                           
  1822                           ; BSR set to: 0
  1823  001740  0E01               	movlw	1
  1824  001742  0100               	movlb	0	; () banked
  1825  001744  6F67               	movwf	___lwmod@counter& (0+255),b
  1826  001746  D006               	goto	l2090
  1827  001748                     l2088:
  1828                           
  1829                           ; BSR set to: 0
  1830  001748  0100               	movlb	0	; () banked
  1831  00174A  90D8               	bcf	status,0,c
  1832  00174C  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  1833  00174E  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1834  001750  0100               	movlb	0	; () banked
  1835  001752  2B67               	incf	___lwmod@counter& (0+255),f,b
  1836  001754                     l2090:
  1837                           
  1838                           ; BSR set to: 0
  1839  001754  0100               	movlb	0	; () banked
  1840  001756  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1841  001758  D7F7               	goto	l2088
  1842  00175A                     l2092:
  1843                           
  1844                           ; BSR set to: 0
  1845  00175A  0100               	movlb	0	; () banked
  1846  00175C  5165               	movf	___lwmod@divisor& (0+255),w,b
  1847  00175E  0100               	movlb	0	; () banked
  1848  001760  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  1849  001762  0100               	movlb	0	; () banked
  1850  001764  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1851  001766  0100               	movlb	0	; () banked
  1852  001768  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1853  00176A  A0D8               	btfss	status,0,c
  1854  00176C  D008               	goto	l2096
  1855                           
  1856                           ; BSR set to: 0
  1857  00176E  0100               	movlb	0	; () banked
  1858  001770  5165               	movf	___lwmod@divisor& (0+255),w,b
  1859  001772  0100               	movlb	0	; () banked
  1860  001774  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  1861  001776  0100               	movlb	0	; () banked
  1862  001778  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1863  00177A  0100               	movlb	0	; () banked
  1864  00177C  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1865  00177E                     l2096:
  1866                           
  1867                           ; BSR set to: 0
  1868  00177E  0100               	movlb	0	; () banked
  1869  001780  90D8               	bcf	status,0,c
  1870  001782  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1871  001784  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  1872                           
  1873                           ; BSR set to: 0
  1874  001786  0100               	movlb	0	; () banked
  1875  001788  2F67               	decfsz	___lwmod@counter& (0+255),f,b
  1876  00178A  D7E7               	goto	l2092
  1877  00178C                     l777:
  1878                           
  1879                           ; BSR set to: 0
  1880  00178C  C063  F063         	movff	___lwmod@dividend,?___lwmod
  1881  001790  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  1882                           
  1883                           ; BSR set to: 0
  1884  001794  0012               	return		;funcret
  1885  001796                     __end_of___lwmod:
  1886                           	opt stack 0
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           prodh	equ	0xFF4
  1892                           prodl	equ	0xFF3
  1893                           postinc0	equ	0xFEE
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           indf2	equ	0xFDF
  1897                           postinc2	equ	0xFDE
  1898                           postdec2	equ	0xFDD
  1899                           fsr2h	equ	0xFDA
  1900                           fsr2l	equ	0xFD9
  1901                           status	equ	0xFD8
  1902                           
  1903 ;; *************** function ___lwdiv *****************
  1904 ;; Defined at:
  1905 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  dividend        2   31[COMRAM] unsigned int 
  1908 ;;  divisor         2   33[COMRAM] unsigned int 
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;  quotient        2    1[BANK0 ] unsigned int 
  1911 ;;  counter         1    0[BANK0 ] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  2   31[COMRAM] unsigned int 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2, status,0
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;Total ram usage:        7 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; Hardware stack levels required when called:    2
  1928 ;; This function calls:
  1929 ;;		Nothing
  1930 ;; This function is called by:
  1931 ;;		_sprintf
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text5
  1936  001796                     __ptext5:
  1937                           	opt stack 0
  1938  001796                     ___lwdiv:
  1939                           	opt stack 26
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;incstack = 0
  1943  001796  0E00               	movlw	0
  1944  001798  0100               	movlb	0	; () banked
  1945  00179A  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1946  00179C  0E00               	movlw	0
  1947  00179E  6F61               	movwf	___lwdiv@quotient& (0+255),b
  1948                           
  1949                           ; BSR set to: 0
  1950  0017A0  5022               	movf	___lwdiv@divisor,w,c
  1951  0017A2  1023               	iorwf	___lwdiv@divisor+1,w,c
  1952  0017A4  B4D8               	btfsc	status,2,c
  1953  0017A6  D021               	goto	l767
  1954                           
  1955                           ; BSR set to: 0
  1956  0017A8  0E01               	movlw	1
  1957  0017AA  0100               	movlb	0	; () banked
  1958  0017AC  6F60               	movwf	___lwdiv@counter& (0+255),b
  1959  0017AE  D005               	goto	l2070
  1960  0017B0                     l2068:
  1961                           
  1962                           ; BSR set to: 0
  1963  0017B0  90D8               	bcf	status,0,c
  1964  0017B2  3622               	rlcf	___lwdiv@divisor,f,c
  1965  0017B4  3623               	rlcf	___lwdiv@divisor+1,f,c
  1966  0017B6  0100               	movlb	0	; () banked
  1967  0017B8  2B60               	incf	___lwdiv@counter& (0+255),f,b
  1968  0017BA                     l2070:
  1969                           
  1970                           ; BSR set to: 0
  1971  0017BA  AE23               	btfss	___lwdiv@divisor+1,7,c
  1972  0017BC  D7F9               	goto	l2068
  1973  0017BE                     l2072:
  1974                           
  1975                           ; BSR set to: 0
  1976  0017BE  0100               	movlb	0	; () banked
  1977  0017C0  90D8               	bcf	status,0,c
  1978  0017C2  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  1979  0017C4  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1980                           
  1981                           ; BSR set to: 0
  1982  0017C6  5022               	movf	___lwdiv@divisor,w,c
  1983  0017C8  5C20               	subwf	___lwdiv@dividend,w,c
  1984  0017CA  5023               	movf	___lwdiv@divisor+1,w,c
  1985  0017CC  5821               	subwfb	___lwdiv@dividend+1,w,c
  1986  0017CE  A0D8               	btfss	status,0,c
  1987  0017D0  D006               	goto	l2080
  1988                           
  1989                           ; BSR set to: 0
  1990  0017D2  5022               	movf	___lwdiv@divisor,w,c
  1991  0017D4  5E20               	subwf	___lwdiv@dividend,f,c
  1992  0017D6  5023               	movf	___lwdiv@divisor+1,w,c
  1993  0017D8  5A21               	subwfb	___lwdiv@dividend+1,f,c
  1994                           
  1995                           ; BSR set to: 0
  1996  0017DA  0100               	movlb	0	; () banked
  1997  0017DC  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  1998  0017DE                     l2080:
  1999                           
  2000                           ; BSR set to: 0
  2001  0017DE  90D8               	bcf	status,0,c
  2002  0017E0  3223               	rrcf	___lwdiv@divisor+1,f,c
  2003  0017E2  3222               	rrcf	___lwdiv@divisor,f,c
  2004                           
  2005                           ; BSR set to: 0
  2006  0017E4  0100               	movlb	0	; () banked
  2007  0017E6  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  2008  0017E8  D7EA               	goto	l2072
  2009  0017EA                     l767:
  2010                           
  2011                           ; BSR set to: 0
  2012  0017EA  C061  F020         	movff	___lwdiv@quotient,?___lwdiv
  2013  0017EE  C062  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2014                           
  2015                           ; BSR set to: 0
  2016  0017F2  0012               	return		;funcret
  2017  0017F4                     __end_of___lwdiv:
  2018                           	opt stack 0
  2019                           tblptru	equ	0xFF8
  2020                           tblptrh	equ	0xFF7
  2021                           tblptrl	equ	0xFF6
  2022                           tablat	equ	0xFF5
  2023                           prodh	equ	0xFF4
  2024                           prodl	equ	0xFF3
  2025                           postinc0	equ	0xFEE
  2026                           postdec1	equ	0xFE5
  2027                           fsr1l	equ	0xFE1
  2028                           indf2	equ	0xFDF
  2029                           postinc2	equ	0xFDE
  2030                           postdec2	equ	0xFDD
  2031                           fsr2h	equ	0xFDA
  2032                           fsr2l	equ	0xFD9
  2033                           status	equ	0xFD8
  2034                           
  2035 ;; *************** function _lcdWriteLine *****************
  2036 ;; Defined at:
  2037 ;;		line 37 in file "test.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  data            2    3[BANK0 ] PTR unsigned char 
  2040 ;;		 -> STR_6(6), STR_5(6), STR_3(3), STR_2(2), 
  2041 ;;		 -> writeNum@numStr(10), 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  i               2    7[BANK0 ] int 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      void 
  2046 ;; Registers used:
  2047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2056 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;Total ram usage:        6 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; Hardware stack levels required when called:    4
  2060 ;; This function calls:
  2061 ;;		_LCD8send
  2062 ;; This function is called by:
  2063 ;;		_writeNum
  2064 ;;		_writeLCD
  2065 ;;		_main
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           	psect	text6
  2070  001596                     __ptext6:
  2071                           	opt stack 0
  2072  001596                     _lcdWriteLine:
  2073                           	opt stack 25
  2074                           
  2075                           ;test.c: 38: for (int i = 0; data[i] != 0; i++) {
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;incstack = 0
  2079  001596  0E00               	movlw	0
  2080  001598  0100               	movlb	0	; () banked
  2081  00159A  6F68               	movwf	(lcdWriteLine@i+1)& (0+255),b
  2082  00159C  0E00               	movlw	0
  2083  00159E  6F67               	movwf	lcdWriteLine@i& (0+255),b
  2084  0015A0  D024               	goto	l2124
  2085  0015A2                     l2120:
  2086                           
  2087                           ;test.c: 39: LCD8send(data[i], 1);
  2088  0015A2  0E01               	movlw	1
  2089  0015A4  6E23               	movwf	LCD8send@mode,c
  2090  0015A6  0100               	movlb	0	; () banked
  2091  0015A8  5167               	movf	lcdWriteLine@i& (0+255),w,b
  2092  0015AA  0100               	movlb	0	; () banked
  2093  0015AC  2563               	addwf	lcdWriteLine@data& (0+255),w,b
  2094  0015AE  0100               	movlb	0	; () banked
  2095  0015B0  6F65               	movwf	??_lcdWriteLine& (0+255),b
  2096  0015B2  0100               	movlb	0	; () banked
  2097  0015B4  5168               	movf	(lcdWriteLine@i+1)& (0+255),w,b
  2098  0015B6  0100               	movlb	0	; () banked
  2099  0015B8  2164               	addwfc	(lcdWriteLine@data+1)& (0+255),w,b
  2100  0015BA  0100               	movlb	0	; () banked
  2101  0015BC  6F66               	movwf	(??_lcdWriteLine+1)& (0+255),b
  2102  0015BE  C065  FFF6         	movff	??_lcdWriteLine,tblptrl
  2103  0015C2  C066  FFF7         	movff	??_lcdWriteLine+1,tblptrh
  2104  0015C6  0E00               	movlw	low (__smallconst shr (0+16))
  2105  0015C8  6EF8               	movwf	tblptru,c
  2106  0015CA  0E0F               	movlw	(high __ramtop+-1)
  2107  0015CC  64F7               	cpfsgt	tblptrh,c
  2108  0015CE  D003               	bra	u1487
  2109  0015D0  0008               	tblrd		*
  2110  0015D2  50F5               	movf	tablat,w,c
  2111  0015D4  D005               	bra	u1480
  2112  0015D6                     u1487:
  2113  0015D6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2114  0015DA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2115  0015DE  50EF               	movf	indf0,w,c
  2116  0015E0                     u1480:
  2117  0015E0  EC70  F00C         	call	_LCD8send
  2118  0015E4  0100               	movlb	0	; () banked
  2119  0015E6  4B67               	infsnz	lcdWriteLine@i& (0+255),f,b
  2120  0015E8  2B68               	incf	(lcdWriteLine@i+1)& (0+255),f,b
  2121  0015EA                     l2124:
  2122                           
  2123                           ; BSR set to: 0
  2124  0015EA  0100               	movlb	0	; () banked
  2125  0015EC  5167               	movf	lcdWriteLine@i& (0+255),w,b
  2126  0015EE  0100               	movlb	0	; () banked
  2127  0015F0  2563               	addwf	lcdWriteLine@data& (0+255),w,b
  2128  0015F2  0100               	movlb	0	; () banked
  2129  0015F4  6F65               	movwf	??_lcdWriteLine& (0+255),b
  2130  0015F6  0100               	movlb	0	; () banked
  2131  0015F8  5168               	movf	(lcdWriteLine@i+1)& (0+255),w,b
  2132  0015FA  0100               	movlb	0	; () banked
  2133  0015FC  2164               	addwfc	(lcdWriteLine@data+1)& (0+255),w,b
  2134  0015FE  0100               	movlb	0	; () banked
  2135  001600  6F66               	movwf	(??_lcdWriteLine+1)& (0+255),b
  2136  001602  C065  FFF6         	movff	??_lcdWriteLine,tblptrl
  2137  001606  C066  FFF7         	movff	??_lcdWriteLine+1,tblptrh
  2138  00160A  0E00               	movlw	low (__smallconst shr (0+16))
  2139  00160C  6EF8               	movwf	tblptru,c
  2140  00160E  0E0F               	movlw	(high __ramtop+-1)
  2141  001610  64F7               	cpfsgt	tblptrh,c
  2142  001612  D003               	bra	u1497
  2143  001614  0008               	tblrd		*
  2144  001616  50F5               	movf	tablat,w,c
  2145  001618  D005               	bra	u1490
  2146  00161A                     u1497:
  2147  00161A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2148  00161E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2149  001622  50EF               	movf	indf0,w,c
  2150  001624                     u1490:
  2151  001624  0900               	iorlw	0
  2152  001626  B4D8               	btfsc	status,2,c
  2153  001628  0012               	return	
  2154  00162A  D7BB               	goto	l2120
  2155  00162C                     __end_of_lcdWriteLine:
  2156                           	opt stack 0
  2157                           tblptru	equ	0xFF8
  2158                           tblptrh	equ	0xFF7
  2159                           tblptrl	equ	0xFF6
  2160                           tablat	equ	0xFF5
  2161                           prodh	equ	0xFF4
  2162                           prodl	equ	0xFF3
  2163                           indf0	equ	0xFEF
  2164                           postinc0	equ	0xFEE
  2165                           fsr0h	equ	0xFEA
  2166                           fsr0l	equ	0xFE9
  2167                           postdec1	equ	0xFE5
  2168                           fsr1l	equ	0xFE1
  2169                           indf2	equ	0xFDF
  2170                           postinc2	equ	0xFDE
  2171                           postdec2	equ	0xFDD
  2172                           fsr2h	equ	0xFDA
  2173                           fsr2l	equ	0xFD9
  2174                           status	equ	0xFD8
  2175                           
  2176 ;; *************** function _ee_read_char *****************
  2177 ;; Defined at:
  2178 ;;		line 68 in file "EEPROM.h"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;  address         1    wreg     unsigned char 
  2181 ;;  _data           2    0[BANK0 ] PTR unsigned char 
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  address         1   34[COMRAM] unsigned char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      void 
  2186 ;; Registers used:
  2187 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2193 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;Total ram usage:        3 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    4
  2200 ;; This function calls:
  2201 ;;		_eepromRead
  2202 ;; This function is called by:
  2203 ;;		_writeLCD
  2204 ;;		_readEEPROM
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text7
  2209  001A50                     __ptext7:
  2210                           	opt stack 0
  2211  001A50                     _ee_read_char:
  2212                           	opt stack 25
  2213                           
  2214                           ;incstack = 0
  2215                           ;ee_read_char@address stored from wreg
  2216  001A50  6E23               	movwf	ee_read_char@address,c
  2217                           
  2218                           ;EEPROM.h: 69: *_data = eepromRead(address);
  2219  001A52  5023               	movf	ee_read_char@address,w,c
  2220  001A54  ECFB  F00C         	call	_eepromRead
  2221  001A58  C060  FFD9         	movff	ee_read_char@_data,fsr2l
  2222  001A5C  C061  FFDA         	movff	ee_read_char@_data+1,fsr2h
  2223  001A60  6EDF               	movwf	indf2,c
  2224  001A62  0012               	return		;funcret
  2225  001A64                     __end_of_ee_read_char:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           indf0	equ	0xFEF
  2234                           postinc0	equ	0xFEE
  2235                           fsr0h	equ	0xFEA
  2236                           fsr0l	equ	0xFE9
  2237                           postdec1	equ	0xFE5
  2238                           fsr1l	equ	0xFE1
  2239                           indf2	equ	0xFDF
  2240                           postinc2	equ	0xFDE
  2241                           postdec2	equ	0xFDD
  2242                           fsr2h	equ	0xFDA
  2243                           fsr2l	equ	0xFD9
  2244                           status	equ	0xFD8
  2245                           
  2246 ;; *************** function _eepromRead *****************
  2247 ;; Defined at:
  2248 ;;		line 48 in file "exprom.h"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  address         1    wreg     unsigned char 
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;  address         1   32[COMRAM] unsigned char 
  2253 ;;  buffer          1   33[COMRAM] unsigned char 
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  1    wreg      unsigned char 
  2256 ;; Registers used:
  2257 ;;		wreg, status,2, cstack
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;Total ram usage:        2 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    3
  2270 ;; This function calls:
  2271 ;;		_SPI1out
  2272 ;;		_eeWait
  2273 ;; This function is called by:
  2274 ;;		_ee_read_char
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text8
  2279  0019F6                     __ptext8:
  2280                           	opt stack 0
  2281  0019F6                     _eepromRead:
  2282                           	opt stack 25
  2283                           
  2284                           ;incstack = 0
  2285                           ;eepromRead@address stored from wreg
  2286  0019F6  6E21               	movwf	eepromRead@address,c
  2287                           
  2288                           ;exprom.h: 51: (PORTCbits.RC6) = 0;
  2289  0019F8  9C82               	bcf	3970,6,c	;volatile
  2290                           
  2291                           ;exprom.h: 53: SPI1out(0x03);
  2292  0019FA  0E03               	movlw	3
  2293  0019FC  EC4C  F00D         	call	_SPI1out
  2294                           
  2295                           ;exprom.h: 54: SPI1out(((address)>>8)&0xFF);
  2296  001A00  0E00               	movlw	0
  2297  001A02  EC4C  F00D         	call	_SPI1out
  2298                           
  2299                           ;exprom.h: 55: SPI1out(address&0xFF);
  2300  001A06  5021               	movf	eepromRead@address,w,c
  2301  001A08  EC4C  F00D         	call	_SPI1out
  2302                           
  2303                           ;exprom.h: 57: (SSP1BUF) = 0x00;
  2304  001A0C  0E00               	movlw	0
  2305  001A0E  6EC9               	movwf	4041,c	;volatile
  2306                           
  2307                           ;exprom.h: 58: eeWait();
  2308  001A10  EC54  F00D         	call	_eeWait	;wreg free
  2309                           
  2310                           ;exprom.h: 60: unsigned char buffer = (SSP1BUF);
  2311  001A14  CFC9 F022          	movff	4041,eepromRead@buffer	;volatile
  2312                           
  2313                           ;exprom.h: 62: (PORTCbits.RC6) = 1;
  2314  001A18  8C82               	bsf	3970,6,c	;volatile
  2315                           
  2316                           ;exprom.h: 63: return buffer;
  2317  001A1A  5022               	movf	eepromRead@buffer,w,c
  2318  001A1C  0012               	return	
  2319  001A1E                     __end_of_eepromRead:
  2320                           	opt stack 0
  2321                           tblptru	equ	0xFF8
  2322                           tblptrh	equ	0xFF7
  2323                           tblptrl	equ	0xFF6
  2324                           tablat	equ	0xFF5
  2325                           prodh	equ	0xFF4
  2326                           prodl	equ	0xFF3
  2327                           indf0	equ	0xFEF
  2328                           postinc0	equ	0xFEE
  2329                           fsr0h	equ	0xFEA
  2330                           fsr0l	equ	0xFE9
  2331                           postdec1	equ	0xFE5
  2332                           fsr1l	equ	0xFE1
  2333                           indf2	equ	0xFDF
  2334                           postinc2	equ	0xFDE
  2335                           postdec2	equ	0xFDD
  2336                           fsr2h	equ	0xFDA
  2337                           fsr2l	equ	0xFD9
  2338                           status	equ	0xFD8
  2339                           
  2340 ;; *************** function _eepromInit *****************
  2341 ;; Defined at:
  2342 ;;		line 34 in file "exprom.h"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;		None
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;		None
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  1    wreg      void 
  2349 ;; Registers used:
  2350 ;;		wreg, status,2, cstack
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2360 ;;Total ram usage:        0 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    4
  2363 ;; This function calls:
  2364 ;;		_SPI1init
  2365 ;;		_SPI1out
  2366 ;; This function is called by:
  2367 ;;		_main
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           	psect	text9
  2372  001A1E                     __ptext9:
  2373                           	opt stack 0
  2374  001A1E                     _eepromInit:
  2375                           	opt stack 26
  2376                           
  2377                           ;exprom.h: 35: (PORTCbits.RC6) = 1;
  2378                           
  2379                           ;incstack = 0
  2380  001A1E  8C82               	bsf	3970,6,c	;volatile
  2381                           
  2382                           ;exprom.h: 36: (TRISCbits.TRISC6) = 0;
  2383  001A20  9C94               	bcf	3988,6,c	;volatile
  2384                           
  2385                           ;exprom.h: 38: (TRISCbits.TRISC3) = 0;
  2386  001A22  9694               	bcf	3988,3,c	;volatile
  2387                           
  2388                           ;exprom.h: 39: (TRISCbits.TRISC4) = 1;
  2389  001A24  8894               	bsf	3988,4,c	;volatile
  2390                           
  2391                           ;exprom.h: 40: (TRISCbits.TRISC5) = 0;
  2392  001A26  9A94               	bcf	3988,5,c	;volatile
  2393                           
  2394                           ;exprom.h: 42: BAUDCON1 = 0x00;
  2395  001A28  0E00               	movlw	0
  2396  001A2A  6E7E               	movwf	3966,c	;volatile
  2397                           
  2398                           ;exprom.h: 44: SPI1init();
  2399  001A2C  EC32  F00D         	call	_SPI1init	;wreg free
  2400                           
  2401                           ;exprom.h: 45: SPI1out(0x00);
  2402  001A30  0E00               	movlw	0
  2403  001A32  EC4C  F00D         	call	_SPI1out
  2404  001A36  0012               	return		;funcret
  2405  001A38                     __end_of_eepromInit:
  2406                           	opt stack 0
  2407                           tblptru	equ	0xFF8
  2408                           tblptrh	equ	0xFF7
  2409                           tblptrl	equ	0xFF6
  2410                           tablat	equ	0xFF5
  2411                           prodh	equ	0xFF4
  2412                           prodl	equ	0xFF3
  2413                           indf0	equ	0xFEF
  2414                           postinc0	equ	0xFEE
  2415                           fsr0h	equ	0xFEA
  2416                           fsr0l	equ	0xFE9
  2417                           postdec1	equ	0xFE5
  2418                           fsr1l	equ	0xFE1
  2419                           indf2	equ	0xFDF
  2420                           postinc2	equ	0xFDE
  2421                           postdec2	equ	0xFDD
  2422                           fsr2h	equ	0xFDA
  2423                           fsr2l	equ	0xFD9
  2424                           status	equ	0xFD8
  2425                           
  2426 ;; *************** function _SPI1init *****************
  2427 ;; Defined at:
  2428 ;;		line 6 in file "SPI.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;		None
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  1    wreg      void 
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, cstack
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;Total ram usage:        0 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    3
  2449 ;; This function calls:
  2450 ;;		_SPI1out
  2451 ;; This function is called by:
  2452 ;;		_eepromInit
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text10
  2457  001A64                     __ptext10:
  2458                           	opt stack 0
  2459  001A64                     _SPI1init:
  2460                           	opt stack 26
  2461                           
  2462                           ;SPI.c: 8: SSP1CON1 = 0b00100010;
  2463                           
  2464                           ;incstack = 0
  2465  001A64  0E22               	movlw	34
  2466  001A66  6EC6               	movwf	4038,c	;volatile
  2467                           
  2468                           ;SPI.c: 9: SSP1STATbits.CKE = 1;
  2469  001A68  8CC7               	bsf	4039,6,c	;volatile
  2470                           
  2471                           ;SPI.c: 10: TRISCbits.TRISC3 = 0;
  2472  001A6A  9694               	bcf	3988,3,c	;volatile
  2473                           
  2474                           ;SPI.c: 11: TRISCbits.TRISC5 = 0;
  2475  001A6C  9A94               	bcf	3988,5,c	;volatile
  2476                           
  2477                           ;SPI.c: 12: SPI1out(0x00);
  2478  001A6E  0E00               	movlw	0
  2479  001A70  EC4C  F00D         	call	_SPI1out
  2480  001A74  0012               	return		;funcret
  2481  001A76                     __end_of_SPI1init:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           prodh	equ	0xFF4
  2488                           prodl	equ	0xFF3
  2489                           indf0	equ	0xFEF
  2490                           postinc0	equ	0xFEE
  2491                           fsr0h	equ	0xFEA
  2492                           fsr0l	equ	0xFE9
  2493                           postdec1	equ	0xFE5
  2494                           fsr1l	equ	0xFE1
  2495                           indf2	equ	0xFDF
  2496                           postinc2	equ	0xFDE
  2497                           postdec2	equ	0xFDD
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _ee_write_char *****************
  2503 ;; Defined at:
  2504 ;;		line 54 in file "EEPROM.h"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  address         1    wreg     unsigned char 
  2507 ;;  chunk           1    0[BANK0 ] const unsigned char 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  address         1    1[BANK0 ] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      void 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2519 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;Total ram usage:        2 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    4
  2526 ;; This function calls:
  2527 ;;		_eepromWrite
  2528 ;; This function is called by:
  2529 ;;		_main
  2530 ;;		_writeEEPROM
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text11
  2535  001A76                     __ptext11:
  2536                           	opt stack 0
  2537  001A76                     _ee_write_char:
  2538                           	opt stack 26
  2539                           
  2540                           ;incstack = 0
  2541                           ;ee_write_char@address stored from wreg
  2542  001A76  0100               	movlb	0	; () banked
  2543  001A78  6F61               	movwf	ee_write_char@address& (0+255),b
  2544                           
  2545                           ;EEPROM.h: 55: eepromWrite(address, chunk);
  2546  001A7A  C060  F021         	movff	ee_write_char@chunk,eepromWrite@value
  2547  001A7E  0100               	movlb	0	; () banked
  2548  001A80  5161               	movf	ee_write_char@address& (0+255),w,b
  2549  001A82  EC4E  F00C         	call	_eepromWrite
  2550  001A86  0012               	return		;funcret
  2551  001A88                     __end_of_ee_write_char:
  2552                           	opt stack 0
  2553                           tblptru	equ	0xFF8
  2554                           tblptrh	equ	0xFF7
  2555                           tblptrl	equ	0xFF6
  2556                           tablat	equ	0xFF5
  2557                           prodh	equ	0xFF4
  2558                           prodl	equ	0xFF3
  2559                           indf0	equ	0xFEF
  2560                           postinc0	equ	0xFEE
  2561                           fsr0h	equ	0xFEA
  2562                           fsr0l	equ	0xFE9
  2563                           postdec1	equ	0xFE5
  2564                           fsr1l	equ	0xFE1
  2565                           indf2	equ	0xFDF
  2566                           postinc2	equ	0xFDE
  2567                           postdec2	equ	0xFDD
  2568                           fsr2h	equ	0xFDA
  2569                           fsr2l	equ	0xFD9
  2570                           status	equ	0xFD8
  2571                           
  2572 ;; *************** function _eepromWrite *****************
  2573 ;; Defined at:
  2574 ;;		line 66 in file "exprom.h"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  address         1    wreg     unsigned char 
  2577 ;;  value           1   32[COMRAM] unsigned char 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;  address         1   33[COMRAM] unsigned char 
  2580 ;;  sr              1   34[COMRAM] unsigned char 
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  1    wreg      void 
  2583 ;; Registers used:
  2584 ;;		wreg, status,2, cstack
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2590 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;Total ram usage:        3 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    3
  2597 ;; This function calls:
  2598 ;;		_SPI1out
  2599 ;;		_eeWait
  2600 ;; This function is called by:
  2601 ;;		_ee_write_char
  2602 ;; This function uses a non-reentrant model
  2603 ;;
  2604                           
  2605                           	psect	text12
  2606  00189C                     __ptext12:
  2607                           	opt stack 0
  2608  00189C                     _eepromWrite:
  2609                           	opt stack 26
  2610                           
  2611                           ;incstack = 0
  2612                           ;eepromWrite@address stored from wreg
  2613  00189C  6E22               	movwf	eepromWrite@address,c
  2614                           
  2615                           ;exprom.h: 71: unsigned char sr = 0x00;
  2616  00189E  0E00               	movlw	0
  2617  0018A0  6E23               	movwf	eepromWrite@sr,c
  2618  0018A2                     l2218:
  2619                           
  2620                           ;exprom.h: 83: (PORTCbits.RC6) = 0;
  2621  0018A2  9C82               	bcf	3970,6,c	;volatile
  2622                           
  2623                           ;exprom.h: 84: SPI1out(0x06);
  2624  0018A4  0E06               	movlw	6
  2625  0018A6  EC4C  F00D         	call	_SPI1out
  2626                           
  2627                           ;exprom.h: 85: SPI1out(0x05);
  2628  0018AA  0E05               	movlw	5
  2629  0018AC  EC4C  F00D         	call	_SPI1out
  2630                           
  2631                           ;exprom.h: 88: (PORTCbits.RC6) = 1;
  2632  0018B0  8C82               	bsf	3970,6,c	;volatile
  2633                           
  2634                           ;exprom.h: 89: (SSP1BUF) = 0x00;
  2635  0018B2  0E00               	movlw	0
  2636  0018B4  6EC9               	movwf	4041,c	;volatile
  2637                           
  2638                           ;exprom.h: 91: eeWait();
  2639  0018B6  EC54  F00D         	call	_eeWait	;wreg free
  2640                           
  2641                           ;exprom.h: 94: sr = (SSP1BUF);
  2642  0018BA  CFC9 F023          	movff	4041,eepromWrite@sr	;volatile
  2643                           
  2644                           ;exprom.h: 96: if (sr & 0x02 == 0x02) { break; }
  2645  0018BE  A023               	btfss	eepromWrite@sr,0,c
  2646  0018C0  D7F0               	goto	l2218
  2647                           
  2648                           ;exprom.h: 97: }
  2649                           ;exprom.h: 101: (PORTCbits.RC6) = 0;
  2650  0018C2  9C82               	bcf	3970,6,c	;volatile
  2651                           
  2652                           ;exprom.h: 102: SPI1out(0x02);
  2653  0018C4  0E02               	movlw	2
  2654  0018C6  EC4C  F00D         	call	_SPI1out
  2655                           
  2656                           ;exprom.h: 103: SPI1out(((address)>>8)&0xFF);
  2657  0018CA  0E00               	movlw	0
  2658  0018CC  EC4C  F00D         	call	_SPI1out
  2659                           
  2660                           ;exprom.h: 104: SPI1out(address&0xFF);
  2661  0018D0  5022               	movf	eepromWrite@address,w,c
  2662  0018D2  EC4C  F00D         	call	_SPI1out
  2663                           
  2664                           ;exprom.h: 105: SPI1out(value);
  2665  0018D6  5021               	movf	eepromWrite@value,w,c
  2666  0018D8  EC4C  F00D         	call	_SPI1out
  2667                           
  2668                           ;exprom.h: 107: (PORTCbits.RC6) = 1;
  2669  0018DC  8C82               	bsf	3970,6,c	;volatile
  2670  0018DE  0012               	return		;funcret
  2671  0018E0                     __end_of_eepromWrite:
  2672                           	opt stack 0
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           prodh	equ	0xFF4
  2678                           prodl	equ	0xFF3
  2679                           indf0	equ	0xFEF
  2680                           postinc0	equ	0xFEE
  2681                           fsr0h	equ	0xFEA
  2682                           fsr0l	equ	0xFE9
  2683                           postdec1	equ	0xFE5
  2684                           fsr1l	equ	0xFE1
  2685                           indf2	equ	0xFDF
  2686                           postinc2	equ	0xFDE
  2687                           postdec2	equ	0xFDD
  2688                           fsr2h	equ	0xFDA
  2689                           fsr2l	equ	0xFD9
  2690                           status	equ	0xFD8
  2691                           
  2692 ;; *************** function _eeWait *****************
  2693 ;; Defined at:
  2694 ;;		line 30 in file "exprom.h"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;		None
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;		None
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		None
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;Total ram usage:        0 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    2
  2715 ;; This function calls:
  2716 ;;		Nothing
  2717 ;; This function is called by:
  2718 ;;		_eepromRead
  2719 ;;		_eepromWrite
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text13
  2724  001AA8                     __ptext13:
  2725                           	opt stack 0
  2726  001AA8                     _eeWait:
  2727                           	opt stack 25
  2728  001AA8                     l129:
  2729  001AA8  B0C7               	btfsc	4039,0,c	;volatile
  2730  001AAA  0012               	return	
  2731  001AAC  D7FD               	goto	l129
  2732  001AAE                     __end_of_eeWait:
  2733                           	opt stack 0
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           prodh	equ	0xFF4
  2739                           prodl	equ	0xFF3
  2740                           indf0	equ	0xFEF
  2741                           postinc0	equ	0xFEE
  2742                           fsr0h	equ	0xFEA
  2743                           fsr0l	equ	0xFE9
  2744                           postdec1	equ	0xFE5
  2745                           fsr1l	equ	0xFE1
  2746                           indf2	equ	0xFDF
  2747                           postinc2	equ	0xFDE
  2748                           postdec2	equ	0xFDD
  2749                           fsr2h	equ	0xFDA
  2750                           fsr2l	equ	0xFD9
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function _SPI1out *****************
  2754 ;; Defined at:
  2755 ;;		line 15 in file "SPI.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;  Code            1    wreg     unsigned char 
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;  Code            1   31[COMRAM] unsigned char 
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;Total ram usage:        1 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    2
  2776 ;; This function calls:
  2777 ;;		Nothing
  2778 ;; This function is called by:
  2779 ;;		_SPI1init
  2780 ;;		_eepromInit
  2781 ;;		_eepromRead
  2782 ;;		_eepromWrite
  2783 ;;		_SPI_LCD4send
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text14
  2788  001A98                     __ptext14:
  2789                           	opt stack 0
  2790  001A98                     _SPI1out:
  2791                           	opt stack 25
  2792                           
  2793                           ;incstack = 0
  2794                           ;SPI1out@Code stored from wreg
  2795  001A98  6E20               	movwf	SPI1out@Code,c
  2796                           
  2797                           ;SPI.c: 17: SSP1BUF = Code;
  2798  001A9A  C020  FFC9         	movff	SPI1out@Code,4041	;volatile
  2799  001A9E                     l61:
  2800  001A9E  A0C7               	btfss	4039,0,c	;volatile
  2801  001AA0  D7FE               	goto	l61
  2802                           
  2803                           ;SPI.c: 19: Code = SSP1BUF;
  2804  001AA2  CFC9 F020          	movff	4041,SPI1out@Code	;volatile
  2805  001AA6  0012               	return		;funcret
  2806  001AA8                     __end_of_SPI1out:
  2807                           	opt stack 0
  2808                           tblptru	equ	0xFF8
  2809                           tblptrh	equ	0xFF7
  2810                           tblptrl	equ	0xFF6
  2811                           tablat	equ	0xFF5
  2812                           prodh	equ	0xFF4
  2813                           prodl	equ	0xFF3
  2814                           indf0	equ	0xFEF
  2815                           postinc0	equ	0xFEE
  2816                           fsr0h	equ	0xFEA
  2817                           fsr0l	equ	0xFE9
  2818                           postdec1	equ	0xFE5
  2819                           fsr1l	equ	0xFE1
  2820                           indf2	equ	0xFDF
  2821                           postinc2	equ	0xFDE
  2822                           postdec2	equ	0xFDD
  2823                           fsr2h	equ	0xFDA
  2824                           fsr2l	equ	0xFD9
  2825                           status	equ	0xFD8
  2826                           
  2827 ;; *************** function _Read_KeyPad *****************
  2828 ;; Defined at:
  2829 ;;		line 14 in file "Keypad.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;		None
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  i               2    1[BANK0 ] int 
  2834 ;;  code            1    4[BANK0 ] unsigned char 
  2835 ;;  Col             1    3[BANK0 ] unsigned char 
  2836 ;;  value           1    0[BANK0 ] unsigned char 
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      unsigned char 
  2839 ;; Registers used:
  2840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;Total ram usage:        5 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    3
  2853 ;; This function calls:
  2854 ;;		_process_key
  2855 ;; This function is called by:
  2856 ;;		_main
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text15
  2861  0016BE                     __ptext15:
  2862                           	opt stack 0
  2863  0016BE                     _Read_KeyPad:
  2864                           	opt stack 27
  2865                           
  2866                           ;Keypad.c: 16: unsigned char code,Col,value;
  2867                           ;Keypad.c: 17: int i;
  2868                           ;Keypad.c: 18: value = 0xFF;
  2869                           
  2870                           ;incstack = 0
  2871  0016BE  0100               	movlb	0	; () banked
  2872  0016C0  6960               	setf	Read_KeyPad@value& (0+255),b
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;Keypad.c: 19: Col = 0b11111110;
  2876  0016C2  0EFE               	movlw	254
  2877  0016C4  0100               	movlb	0	; () banked
  2878  0016C6  6F63               	movwf	Read_KeyPad@Col& (0+255),b
  2879                           
  2880                           ;Keypad.c: 20: for (i=0;i<4;i++)
  2881  0016C8  0E00               	movlw	0
  2882  0016CA  0100               	movlb	0	; () banked
  2883  0016CC  6F62               	movwf	(Read_KeyPad@i+1)& (0+255),b
  2884  0016CE  0E00               	movlw	0
  2885  0016D0  6F61               	movwf	Read_KeyPad@i& (0+255),b
  2886  0016D2                     l2254:
  2887                           
  2888                           ; BSR set to: 0
  2889  0016D2  0100               	movlb	0	; () banked
  2890  0016D4  BF62               	btfsc	(Read_KeyPad@i+1)& (0+255),7,b
  2891  0016D6  D008               	goto	l16
  2892  0016D8  0100               	movlb	0	; () banked
  2893  0016DA  5162               	movf	(Read_KeyPad@i+1)& (0+255),w,b
  2894  0016DC  E128               	bnz	l2268
  2895  0016DE  0E04               	movlw	4
  2896  0016E0  0100               	movlb	0	; () banked
  2897  0016E2  5D61               	subwf	Read_KeyPad@i& (0+255),w,b
  2898  0016E4  B0D8               	btfsc	status,0,c
  2899  0016E6  D023               	goto	l2268
  2900  0016E8                     l16:
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;Keypad.c: 21: {
  2904                           ;Keypad.c: 22: LATD = Col;
  2905  0016E8  C063  FF8C         	movff	Read_KeyPad@Col,3980	;volatile
  2906                           
  2907                           ;Keypad.c: 23: code = PORTD;
  2908  0016EC  CF83 F064          	movff	3971,Read_KeyPad@code	;volatile
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;Keypad.c: 24: code = code | 0b00001111;
  2912  0016F0  0100               	movlb	0	; () banked
  2913  0016F2  5164               	movf	Read_KeyPad@code& (0+255),w,b
  2914  0016F4  090F               	iorlw	15
  2915  0016F6  0100               	movlb	0	; () banked
  2916  0016F8  6F64               	movwf	Read_KeyPad@code& (0+255),b
  2917                           
  2918                           ;Keypad.c: 25: code = code & Col;
  2919  0016FA  0100               	movlb	0	; () banked
  2920  0016FC  5164               	movf	Read_KeyPad@code& (0+255),w,b
  2921  0016FE  0100               	movlb	0	; () banked
  2922  001700  1563               	andwf	Read_KeyPad@Col& (0+255),w,b
  2923  001702  0100               	movlb	0	; () banked
  2924  001704  6F64               	movwf	Read_KeyPad@code& (0+255),b
  2925                           
  2926                           ;Keypad.c: 26: if (code!=Col)
  2927  001706  0100               	movlb	0	; () banked
  2928  001708  5163               	movf	Read_KeyPad@Col& (0+255),w,b
  2929  00170A  0100               	movlb	0	; () banked
  2930  00170C  1964               	xorwf	Read_KeyPad@code& (0+255),w,b
  2931  00170E  B4D8               	btfsc	status,2,c
  2932  001710  D007               	goto	l2262
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;Keypad.c: 27: {
  2936                           ;Keypad.c: 28: value = process_key(code);
  2937  001712  0100               	movlb	0	; () banked
  2938  001714  5164               	movf	Read_KeyPad@code& (0+255),w,b
  2939  001716  ECC9  F00C         	call	_process_key
  2940  00171A  0100               	movlb	0	; () banked
  2941  00171C  6F60               	movwf	Read_KeyPad@value& (0+255),b
  2942                           
  2943                           ;Keypad.c: 29: break;
  2944  00171E  D007               	goto	l2268
  2945  001720                     l2262:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;Keypad.c: 30: }
  2949                           ;Keypad.c: 31: Col = (Col << 1) | 0x01;
  2950  001720  80D8               	bsf	status,0,c
  2951  001722  0100               	movlb	0	; () banked
  2952  001724  3763               	rlcf	Read_KeyPad@Col& (0+255),f,b
  2953                           
  2954                           ; BSR set to: 0
  2955  001726  0100               	movlb	0	; () banked
  2956  001728  4B61               	infsnz	Read_KeyPad@i& (0+255),f,b
  2957  00172A  2B62               	incf	(Read_KeyPad@i+1)& (0+255),f,b
  2958  00172C  D7D2               	goto	l2254
  2959  00172E                     l2268:
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;Keypad.c: 32: }
  2963                           ;Keypad.c: 34: return(value);
  2964  00172E  0100               	movlb	0	; () banked
  2965  001730  5160               	movf	Read_KeyPad@value& (0+255),w,b
  2966  001732  0012               	return	
  2967  001734                     __end_of_Read_KeyPad:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           prodh	equ	0xFF4
  2974                           prodl	equ	0xFF3
  2975                           indf0	equ	0xFEF
  2976                           postinc0	equ	0xFEE
  2977                           fsr0h	equ	0xFEA
  2978                           fsr0l	equ	0xFE9
  2979                           postdec1	equ	0xFE5
  2980                           fsr1l	equ	0xFE1
  2981                           indf2	equ	0xFDF
  2982                           postinc2	equ	0xFDE
  2983                           postdec2	equ	0xFDD
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function _process_key *****************
  2989 ;; Defined at:
  2990 ;;		line 37 in file "Keypad.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  code            1    wreg     unsigned char 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  code            1   32[COMRAM] unsigned char 
  2995 ;;  i               1   33[COMRAM] unsigned char 
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      unsigned char 
  2998 ;; Registers used:
  2999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;Total ram usage:        3 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    2
  3012 ;; This function calls:
  3013 ;;		Nothing
  3014 ;; This function is called by:
  3015 ;;		_Read_KeyPad
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text16
  3020  001992                     __ptext16:
  3021                           	opt stack 0
  3022  001992                     _process_key:
  3023                           	opt stack 27
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;incstack = 0
  3027                           ;process_key@code stored from wreg
  3028  001992  6E21               	movwf	process_key@code,c
  3029                           
  3030                           ;Keypad.c: 39: unsigned char i;
  3031                           ;Keypad.c: 40: for (i=0;i<16;i++)
  3032  001994  0E00               	movlw	0
  3033  001996  6E22               	movwf	process_key@i,c
  3034  001998                     l2188:
  3035  001998  0E0F               	movlw	15
  3036  00199A  6422               	cpfsgt	process_key@i,c
  3037  00199C  D001               	goto	l2192
  3038  00199E  D010               	goto	l2202
  3039  0019A0                     l2192:
  3040                           
  3041                           ;Keypad.c: 41: {
  3042                           ;Keypad.c: 42: if (code==scan_code[i]) return i;
  3043  0019A0  5022               	movf	process_key@i,w,c
  3044  0019A2  0D01               	mullw	1
  3045  0019A4  0E24               	movlw	low _scan_code
  3046  0019A6  24F3               	addwf	prodl,w,c
  3047  0019A8  6ED9               	movwf	fsr2l,c
  3048  0019AA  0E00               	movlw	high _scan_code
  3049  0019AC  20F4               	addwfc	prodh,w,c
  3050  0019AE  6EDA               	movwf	fsr2h,c
  3051  0019B0  5021               	movf	process_key@code,w,c
  3052  0019B2  18DE               	xorwf	postinc2,w,c
  3053  0019B4  A4D8               	btfss	status,2,c
  3054  0019B6  D002               	goto	l2198
  3055  0019B8  5022               	movf	process_key@i,w,c
  3056  0019BA  0012               	return	
  3057  0019BC                     l2198:
  3058  0019BC  2A22               	incf	process_key@i,f,c
  3059  0019BE  D7EC               	goto	l2188
  3060  0019C0                     l2202:
  3061                           
  3062                           ;Keypad.c: 43: }
  3063                           ;Keypad.c: 44: return(0xFF);
  3064  0019C0  0EFF               	movlw	255
  3065  0019C2  0012               	return	
  3066  0019C4                     __end_of_process_key:
  3067                           	opt stack 0
  3068                           tblptru	equ	0xFF8
  3069                           tblptrh	equ	0xFF7
  3070                           tblptrl	equ	0xFF6
  3071                           tablat	equ	0xFF5
  3072                           prodh	equ	0xFF4
  3073                           prodl	equ	0xFF3
  3074                           indf0	equ	0xFEF
  3075                           postinc0	equ	0xFEE
  3076                           fsr0h	equ	0xFEA
  3077                           fsr0l	equ	0xFE9
  3078                           postdec1	equ	0xFE5
  3079                           fsr1l	equ	0xFE1
  3080                           indf2	equ	0xFDF
  3081                           postinc2	equ	0xFDE
  3082                           postdec2	equ	0xFDD
  3083                           fsr2h	equ	0xFDA
  3084                           fsr2l	equ	0xFD9
  3085                           status	equ	0xFD8
  3086                           
  3087 ;; *************** function _LCD8init *****************
  3088 ;; Defined at:
  3089 ;;		line 12 in file "LCD8.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;		None
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;		None
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      void 
  3096 ;; Registers used:
  3097 ;;		wreg, status,2, status,0, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;Total ram usage:        0 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    4
  3110 ;; This function calls:
  3111 ;;		_LCD8send
  3112 ;;		_delay_ms
  3113 ;; This function is called by:
  3114 ;;		_main
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text17
  3119  0014D8                     __ptext17:
  3120                           	opt stack 0
  3121  0014D8                     _LCD8init:
  3122                           	opt stack 26
  3123                           
  3124                           ;LCD8.c: 14: TRISE = 0x00;
  3125                           
  3126                           ;incstack = 0
  3127  0014D8  0E00               	movlw	0
  3128  0014DA  6E96               	movwf	3990,c	;volatile
  3129                           
  3130                           ;LCD8.c: 15: TRISH = 0b11111000;
  3131  0014DC  0EF8               	movlw	248
  3132  0014DE  6E99               	movwf	3993,c	;volatile
  3133                           
  3134                           ;LCD8.c: 16: LATHbits.LATH1 = 0;
  3135  0014E0  9290               	bcf	3984,1,c	;volatile
  3136                           
  3137                           ;LCD8.c: 17: LATHbits.LATH0 = 0;
  3138  0014E2  9090               	bcf	3984,0,c	;volatile
  3139                           
  3140                           ;LCD8.c: 18: LATHbits.LATH2 = 0;
  3141  0014E4  9490               	bcf	3984,2,c	;volatile
  3142                           
  3143                           ;LCD8.c: 19: delay_ms(200);
  3144  0014E6  0E00               	movlw	0
  3145  0014E8  6E21               	movwf	delay_ms@x+1,c
  3146  0014EA  0EC8               	movlw	200
  3147  0014EC  6E20               	movwf	delay_ms@x,c
  3148  0014EE  EC8E  F00C         	call	_delay_ms	;wreg free
  3149                           
  3150                           ;LCD8.c: 21: LCD8send(0x30,0);
  3151  0014F2  0E00               	movlw	0
  3152  0014F4  6E23               	movwf	LCD8send@mode,c
  3153  0014F6  0E30               	movlw	48
  3154  0014F8  EC70  F00C         	call	_LCD8send
  3155                           
  3156                           ;LCD8.c: 22: LCD8send(0x30,0);
  3157  0014FC  0E00               	movlw	0
  3158  0014FE  6E23               	movwf	LCD8send@mode,c
  3159  001500  0E30               	movlw	48
  3160  001502  EC70  F00C         	call	_LCD8send
  3161                           
  3162                           ;LCD8.c: 23: LCD8send(0x30,0);
  3163  001506  0E00               	movlw	0
  3164  001508  6E23               	movwf	LCD8send@mode,c
  3165  00150A  0E30               	movlw	48
  3166  00150C  EC70  F00C         	call	_LCD8send
  3167                           
  3168                           ;LCD8.c: 24: LCD8send(0x38,0);
  3169  001510  0E00               	movlw	0
  3170  001512  6E23               	movwf	LCD8send@mode,c
  3171  001514  0E38               	movlw	56
  3172  001516  EC70  F00C         	call	_LCD8send
  3173                           
  3174                           ;LCD8.c: 25: LCD8send(0x10,0);
  3175  00151A  0E00               	movlw	0
  3176  00151C  6E23               	movwf	LCD8send@mode,c
  3177  00151E  0E10               	movlw	16
  3178  001520  EC70  F00C         	call	_LCD8send
  3179                           
  3180                           ;LCD8.c: 26: LCD8send(0x0F,0);
  3181  001524  0E00               	movlw	0
  3182  001526  6E23               	movwf	LCD8send@mode,c
  3183  001528  0E0F               	movlw	15
  3184  00152A  EC70  F00C         	call	_LCD8send
  3185                           
  3186                           ;LCD8.c: 27: LCD8send(0x06,0);
  3187  00152E  0E00               	movlw	0
  3188  001530  6E23               	movwf	LCD8send@mode,c
  3189  001532  0E06               	movlw	6
  3190  001534  EC70  F00C         	call	_LCD8send
  3191                           
  3192                           ;LCD8.c: 28: LCD8send(0x01,0);
  3193  001538  0E00               	movlw	0
  3194  00153A  6E23               	movwf	LCD8send@mode,c
  3195  00153C  0E01               	movlw	1
  3196  00153E  EC70  F00C         	call	_LCD8send
  3197                           
  3198                           ;LCD8.c: 29: delay_ms(100);
  3199  001542  0E00               	movlw	0
  3200  001544  6E21               	movwf	delay_ms@x+1,c
  3201  001546  0E64               	movlw	100
  3202  001548  6E20               	movwf	delay_ms@x,c
  3203  00154A  EC8E  F00C         	call	_delay_ms	;wreg free
  3204                           
  3205                           ;LCD8.c: 31: LCD8send(0x8A,0);
  3206  00154E  0E00               	movlw	0
  3207  001550  6E23               	movwf	LCD8send@mode,c
  3208  001552  0E8A               	movlw	138
  3209  001554  EC70  F00C         	call	_LCD8send
  3210                           
  3211                           ;LCD8.c: 33: LCD8send('N',1);
  3212  001558  0E01               	movlw	1
  3213  00155A  6E23               	movwf	LCD8send@mode,c
  3214  00155C  0E4E               	movlw	78
  3215  00155E  EC70  F00C         	call	_LCD8send
  3216                           
  3217                           ;LCD8.c: 34: LCD8send('A',1);
  3218  001562  0E01               	movlw	1
  3219  001564  6E23               	movwf	LCD8send@mode,c
  3220  001566  0E41               	movlw	65
  3221  001568  EC70  F00C         	call	_LCD8send
  3222                           
  3223                           ;LCD8.c: 35: LCD8send('M',1);
  3224  00156C  0E01               	movlw	1
  3225  00156E  6E23               	movwf	LCD8send@mode,c
  3226  001570  0E4D               	movlw	77
  3227  001572  EC70  F00C         	call	_LCD8send
  3228                           
  3229                           ;LCD8.c: 36: LCD8send('E',1);
  3230  001576  0E01               	movlw	1
  3231  001578  6E23               	movwf	LCD8send@mode,c
  3232  00157A  0E45               	movlw	69
  3233  00157C  EC70  F00C         	call	_LCD8send
  3234                           
  3235                           ;LCD8.c: 38: LCD8send(0xC0,0);
  3236  001580  0E00               	movlw	0
  3237  001582  6E23               	movwf	LCD8send@mode,c
  3238  001584  0EC0               	movlw	192
  3239  001586  EC70  F00C         	call	_LCD8send
  3240                           
  3241                           ;LCD8.c: 39: LCD8send('#',1);
  3242  00158A  0E01               	movlw	1
  3243  00158C  6E23               	movwf	LCD8send@mode,c
  3244  00158E  0E23               	movlw	35
  3245  001590  EC70  F00C         	call	_LCD8send
  3246  001594  0012               	return		;funcret
  3247  001596                     __end_of_LCD8init:
  3248                           	opt stack 0
  3249                           tblptru	equ	0xFF8
  3250                           tblptrh	equ	0xFF7
  3251                           tblptrl	equ	0xFF6
  3252                           tablat	equ	0xFF5
  3253                           prodh	equ	0xFF4
  3254                           prodl	equ	0xFF3
  3255                           indf0	equ	0xFEF
  3256                           postinc0	equ	0xFEE
  3257                           fsr0h	equ	0xFEA
  3258                           fsr0l	equ	0xFE9
  3259                           postdec1	equ	0xFE5
  3260                           fsr1l	equ	0xFE1
  3261                           indf2	equ	0xFDF
  3262                           postinc2	equ	0xFDE
  3263                           postdec2	equ	0xFDD
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function _LCD8send *****************
  3269 ;; Defined at:
  3270 ;;		line 42 in file "LCD8.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  c               1    wreg     unsigned char 
  3273 ;;  mode            1   34[COMRAM] unsigned char 
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  c               1    2[BANK0 ] unsigned char 
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  1    wreg      void 
  3278 ;; Registers used:
  3279 ;;		wreg, status,2, status,0, cstack
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3285 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;Total ram usage:        2 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; Hardware stack levels required when called:    3
  3292 ;; This function calls:
  3293 ;;		_delay_ms
  3294 ;;		_delay_us
  3295 ;; This function is called by:
  3296 ;;		_LCD8init
  3297 ;;		_lcdWriteLine
  3298 ;;		_writeLCD
  3299 ;;		_main
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text18
  3304  0018E0                     __ptext18:
  3305                           	opt stack 0
  3306  0018E0                     _LCD8send:
  3307                           	opt stack 25
  3308                           
  3309                           ;incstack = 0
  3310                           ;LCD8send@c stored from wreg
  3311  0018E0  0100               	movlb	0	; () banked
  3312  0018E2  6F62               	movwf	LCD8send@c& (0+255),b
  3313                           
  3314                           ;LCD8.c: 43: LATHbits.LATH2 = mode;
  3315  0018E4  B023               	btfsc	LCD8send@mode,0,c
  3316  0018E6  D002               	bra	u1395
  3317  0018E8  9490               	bcf	3984,2,c	;volatile
  3318  0018EA  D001               	bra	u1396
  3319  0018EC                     u1395:
  3320  0018EC  8490               	bsf	3984,2,c	;volatile
  3321  0018EE                     u1396:
  3322                           
  3323                           ;LCD8.c: 44: delay_ms(1);
  3324  0018EE  0E00               	movlw	0
  3325  0018F0  6E21               	movwf	delay_ms@x+1,c
  3326  0018F2  0E01               	movlw	1
  3327  0018F4  6E20               	movwf	delay_ms@x,c
  3328  0018F6  EC8E  F00C         	call	_delay_ms	;wreg free
  3329                           
  3330                           ;LCD8.c: 46: LATE = c;
  3331  0018FA  C062  FF8D         	movff	LCD8send@c,3981	;volatile
  3332                           
  3333                           ;LCD8.c: 47: LATHbits.LATH0 = 1;
  3334  0018FE  8090               	bsf	3984,0,c	;volatile
  3335                           
  3336                           ;LCD8.c: 48: delay_us(1);
  3337  001900  0E00               	movlw	0
  3338  001902  6E21               	movwf	delay_us@x+1,c
  3339  001904  0E01               	movlw	1
  3340  001906  6E20               	movwf	delay_us@x,c
  3341  001908  ECE2  F00C         	call	_delay_us	;wreg free
  3342                           
  3343                           ;LCD8.c: 49: LATHbits.LATH0 = 0;
  3344  00190C  9090               	bcf	3984,0,c	;volatile
  3345                           
  3346                           ;LCD8.c: 50: delay_us(50);
  3347  00190E  0E00               	movlw	0
  3348  001910  6E21               	movwf	delay_us@x+1,c
  3349  001912  0E32               	movlw	50
  3350  001914  6E20               	movwf	delay_us@x,c
  3351  001916  ECE2  F00C         	call	_delay_us	;wreg free
  3352  00191A  0012               	return		;funcret
  3353  00191C                     __end_of_LCD8send:
  3354                           	opt stack 0
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           prodh	equ	0xFF4
  3360                           prodl	equ	0xFF3
  3361                           indf0	equ	0xFEF
  3362                           postinc0	equ	0xFEE
  3363                           fsr0h	equ	0xFEA
  3364                           fsr0l	equ	0xFE9
  3365                           postdec1	equ	0xFE5
  3366                           fsr1l	equ	0xFE1
  3367                           indf2	equ	0xFDF
  3368                           postinc2	equ	0xFDE
  3369                           postdec2	equ	0xFDD
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _delay_us *****************
  3375 ;; Defined at:
  3376 ;;		line 87 in file "delay.h"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  x               2   31[COMRAM] int 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  i               2    0[BANK0 ] int 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;Total ram usage:        5 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    2
  3397 ;; This function calls:
  3398 ;;		Nothing
  3399 ;; This function is called by:
  3400 ;;		_LCD8send
  3401 ;;		_SPI_LCD4send
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text19
  3406  0019C4                     __ptext19:
  3407                           	opt stack 0
  3408  0019C4                     _delay_us:
  3409                           	opt stack 25
  3410                           
  3411                           ;delay.h: 89: for (int i = 0; i < x; i++)
  3412                           
  3413                           ;incstack = 0
  3414  0019C4  0E00               	movlw	0
  3415  0019C6  0100               	movlb	0	; () banked
  3416  0019C8  6F61               	movwf	(delay_us@i+1)& (0+255),b
  3417  0019CA  0E00               	movlw	0
  3418  0019CC  6F60               	movwf	delay_us@i& (0+255),b
  3419  0019CE  D006               	goto	l2044
  3420  0019D0                     l122:
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;delay.h: 90: {
  3424                           ;delay.h: 91: _delay((unsigned long)((1)*(25000000/4000000.0)));
  3425  0019D0  D000               	nop2		;2 cycle nop
  3426  0019D2  D000               	nop2		;2 cycle nop
  3427  0019D4  D000               	nop2		;2 cycle nop
  3428  0019D6  0100               	movlb	0	; () banked
  3429  0019D8  4B60               	infsnz	delay_us@i& (0+255),f,b
  3430  0019DA  2B61               	incf	(delay_us@i+1)& (0+255),f,b
  3431  0019DC                     l2044:
  3432                           
  3433                           ; BSR set to: 0
  3434  0019DC  5020               	movf	delay_us@x,w,c
  3435  0019DE  0100               	movlb	0	; () banked
  3436  0019E0  5D60               	subwf	delay_us@i& (0+255),w,b
  3437  0019E2  0100               	movlb	0	; () banked
  3438  0019E4  5161               	movf	(delay_us@i+1)& (0+255),w,b
  3439  0019E6  0A80               	xorlw	128
  3440  0019E8  6E22               	movwf	??_delay_us& (0+255),c
  3441  0019EA  5021               	movf	delay_us@x+1,w,c
  3442  0019EC  0A80               	xorlw	128
  3443  0019EE  5822               	subwfb	??_delay_us& (0+255),w,c
  3444  0019F0  B0D8               	btfsc	status,0,c
  3445  0019F2  0012               	return	
  3446  0019F4  D7ED               	goto	l122
  3447  0019F6                     __end_of_delay_us:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           indf0	equ	0xFEF
  3456                           postinc0	equ	0xFEE
  3457                           fsr0h	equ	0xFEA
  3458                           fsr0l	equ	0xFE9
  3459                           postdec1	equ	0xFE5
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           postinc2	equ	0xFDE
  3463                           postdec2	equ	0xFDD
  3464                           fsr2h	equ	0xFDA
  3465                           fsr2l	equ	0xFD9
  3466                           status	equ	0xFD8
  3467                           
  3468 ;; *************** function _delay_ms *****************
  3469 ;; Defined at:
  3470 ;;		line 79 in file "delay.h"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  x               2   31[COMRAM] int 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  i               2    0[BANK0 ] int 
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      void 
  3477 ;; Registers used:
  3478 ;;		wreg, status,2, status,0
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3484 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;Total ram usage:        5 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    2
  3491 ;; This function calls:
  3492 ;;		Nothing
  3493 ;; This function is called by:
  3494 ;;		_LCD8init
  3495 ;;		_LCD8send
  3496 ;;		_main
  3497 ;;		_SPI_LCD4send
  3498 ;;		_SPI_LCD4init
  3499 ;;		_writeEEPROM
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text20
  3504  00191C                     __ptext20:
  3505                           	opt stack 0
  3506  00191C                     _delay_ms:
  3507                           	opt stack 25
  3508                           
  3509                           ;delay.h: 81: for (int i = 0; i < x; i++)
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;incstack = 0
  3513  00191C  0E00               	movlw	0
  3514  00191E  0100               	movlb	0	; () banked
  3515  001920  6F61               	movwf	(delay_ms@i+1)& (0+255),b
  3516  001922  0E00               	movlw	0
  3517  001924  6F60               	movwf	delay_ms@i& (0+255),b
  3518  001926  D00B               	goto	l115
  3519  001928                     l2036:
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;delay.h: 82: {
  3523                           ;delay.h: 83: _delay((unsigned long)((1)*(25000000/4000.0)));
  3524  001928  0E09               	movlw	9
  3525  00192A  6E22               	movwf	??_delay_ms& (0+255),c
  3526  00192C  0E1C               	movlw	28
  3527  00192E                     u1907:
  3528  00192E  2EE8               	decfsz	wreg,f,c
  3529  001930  D7FE               	goto	u1907
  3530  001932  2E22               	decfsz	??_delay_ms& (0+255),f,c
  3531  001934  D7FC               	goto	u1907
  3532  001936  D000               	nop2	
  3533  001938  0100               	movlb	0	; () banked
  3534  00193A  4B60               	infsnz	delay_ms@i& (0+255),f,b
  3535  00193C  2B61               	incf	(delay_ms@i+1)& (0+255),f,b
  3536  00193E                     l115:
  3537                           
  3538                           ; BSR set to: 0
  3539  00193E  5020               	movf	delay_ms@x,w,c
  3540  001940  0100               	movlb	0	; () banked
  3541  001942  5D60               	subwf	delay_ms@i& (0+255),w,b
  3542  001944  0100               	movlb	0	; () banked
  3543  001946  5161               	movf	(delay_ms@i+1)& (0+255),w,b
  3544  001948  0A80               	xorlw	128
  3545  00194A  6E22               	movwf	??_delay_ms& (0+255),c
  3546  00194C  5021               	movf	delay_ms@x+1,w,c
  3547  00194E  0A80               	xorlw	128
  3548  001950  5822               	subwfb	??_delay_ms& (0+255),w,c
  3549  001952  B0D8               	btfsc	status,0,c
  3550  001954  0012               	return	
  3551  001956  D7E8               	goto	l2036
  3552  001958                     __end_of_delay_ms:
  3553                           	opt stack 0
  3554                           tblptru	equ	0xFF8
  3555                           tblptrh	equ	0xFF7
  3556                           tblptrl	equ	0xFF6
  3557                           tablat	equ	0xFF5
  3558                           prodh	equ	0xFF4
  3559                           prodl	equ	0xFF3
  3560                           indf0	equ	0xFEF
  3561                           postinc0	equ	0xFEE
  3562                           fsr0h	equ	0xFEA
  3563                           fsr0l	equ	0xFE9
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           postdec2	equ	0xFDD
  3570                           fsr2h	equ	0xFDA
  3571                           fsr2l	equ	0xFD9
  3572                           status	equ	0xFD8
  3573                           
  3574 ;; *************** function _KeyPadinit *****************
  3575 ;; Defined at:
  3576 ;;		line 10 in file "Keypad.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;		None
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;		None
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;Total ram usage:        0 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    2
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_main
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text21
  3605  001AAE                     __ptext21:
  3606                           	opt stack 0
  3607  001AAE                     _KeyPadinit:
  3608                           	opt stack 28
  3609                           
  3610                           ;Keypad.c: 11: TRISD = 0xF0;
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;incstack = 0
  3614  001AAE  0EF0               	movlw	240
  3615  001AB0  6E95               	movwf	3989,c	;volatile
  3616  001AB2  0012               	return		;funcret
  3617  001AB4                     __end_of_KeyPadinit:
  3618                           	opt stack 0
  3619                           tblptru	equ	0xFF8
  3620                           tblptrh	equ	0xFF7
  3621                           tblptrl	equ	0xFF6
  3622                           tablat	equ	0xFF5
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           indf0	equ	0xFEF
  3626                           postinc0	equ	0xFEE
  3627                           fsr0h	equ	0xFEA
  3628                           fsr0l	equ	0xFE9
  3629                           wreg	equ	0xFE8
  3630                           postdec1	equ	0xFE5
  3631                           fsr1l	equ	0xFE1
  3632                           indf2	equ	0xFDF
  3633                           postinc2	equ	0xFDE
  3634                           postdec2	equ	0xFDD
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           
  3639 ;; *************** function _LowIsr *****************
  3640 ;; Defined at:
  3641 ;;		line 32 in file "test.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;		None
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		None
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;Total ram usage:       17 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    1
  3662 ;; This function calls:
  3663 ;;		Nothing
  3664 ;; This function is called by:
  3665 ;;		Interrupt level 1
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           	psect	intcodelo
  3670  000018                     __pintcodelo:
  3671                           	opt stack 0
  3672  000018                     _LowIsr:
  3673                           	opt stack 24
  3674                           
  3675                           ;incstack = 0
  3676  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3677  00001A  CFD8 F00F          	movff	status,??_LowIsr
  3678  00001E  CFE8 F010          	movff	wreg,??_LowIsr+1
  3679  000022  CFE0 F011          	movff	bsr,??_LowIsr+2
  3680  000026  CFFA F012          	movff	pclath,??_LowIsr+3
  3681  00002A  CFFB F013          	movff	pclatu,??_LowIsr+4
  3682  00002E  CFE9 F014          	movff	fsr0l,??_LowIsr+5
  3683  000032  CFEA F015          	movff	fsr0h,??_LowIsr+6
  3684  000036  CFE1 F016          	movff	fsr1l,??_LowIsr+7
  3685  00003A  CFE2 F017          	movff	fsr1h,??_LowIsr+8
  3686  00003E  CFD9 F018          	movff	fsr2l,??_LowIsr+9
  3687  000042  CFDA F019          	movff	fsr2h,??_LowIsr+10
  3688  000046  CFF3 F01A          	movff	prodl,??_LowIsr+11
  3689  00004A  CFF4 F01B          	movff	prodh,??_LowIsr+12
  3690  00004E  CFF6 F01C          	movff	tblptrl,??_LowIsr+13
  3691  000052  CFF7 F01D          	movff	tblptrh,??_LowIsr+14
  3692  000056  CFF8 F01E          	movff	tblptru,??_LowIsr+15
  3693  00005A  CFF5 F01F          	movff	tablat,??_LowIsr+16
  3694  00005E  C01F  FFF5         	movff	??_LowIsr+16,tablat
  3695  000062  C01E  FFF8         	movff	??_LowIsr+15,tblptru
  3696  000066  C01D  FFF7         	movff	??_LowIsr+14,tblptrh
  3697  00006A  C01C  FFF6         	movff	??_LowIsr+13,tblptrl
  3698  00006E  C01B  FFF4         	movff	??_LowIsr+12,prodh
  3699  000072  C01A  FFF3         	movff	??_LowIsr+11,prodl
  3700  000076  C019  FFDA         	movff	??_LowIsr+10,fsr2h
  3701  00007A  C018  FFD9         	movff	??_LowIsr+9,fsr2l
  3702  00007E  C017  FFE2         	movff	??_LowIsr+8,fsr1h
  3703  000082  C016  FFE1         	movff	??_LowIsr+7,fsr1l
  3704  000086  C015  FFEA         	movff	??_LowIsr+6,fsr0h
  3705  00008A  C014  FFE9         	movff	??_LowIsr+5,fsr0l
  3706  00008E  C013  FFFB         	movff	??_LowIsr+4,pclatu
  3707  000092  C012  FFFA         	movff	??_LowIsr+3,pclath
  3708  000096  C011  FFE0         	movff	??_LowIsr+2,bsr
  3709  00009A  C010  FFE8         	movff	??_LowIsr+1,wreg
  3710  00009E  C00F  FFD8         	movff	??_LowIsr,status
  3711  0000A2  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3712  0000A4  0010               	retfie	
  3713  0000A6                     __end_of_LowIsr:
  3714                           	opt stack 0
  3715                           pclatu	equ	0xFFB
  3716                           pclath	equ	0xFFA
  3717                           tblptru	equ	0xFF8
  3718                           tblptrh	equ	0xFF7
  3719                           tblptrl	equ	0xFF6
  3720                           tablat	equ	0xFF5
  3721                           prodh	equ	0xFF4
  3722                           prodl	equ	0xFF3
  3723                           indf0	equ	0xFEF
  3724                           postinc0	equ	0xFEE
  3725                           fsr0h	equ	0xFEA
  3726                           fsr0l	equ	0xFE9
  3727                           wreg	equ	0xFE8
  3728                           postdec1	equ	0xFE5
  3729                           fsr1h	equ	0xFE2
  3730                           fsr1l	equ	0xFE1
  3731                           bsr	equ	0xFE0
  3732                           indf2	equ	0xFDF
  3733                           postinc2	equ	0xFDE
  3734                           postdec2	equ	0xFDD
  3735                           fsr2h	equ	0xFDA
  3736                           fsr2l	equ	0xFD9
  3737                           status	equ	0xFD8
  3738                           
  3739 ;; *************** function _HighIsr *****************
  3740 ;; Defined at:
  3741 ;;		line 18 in file "test.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;		None
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;		None
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      void 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;Total ram usage:       14 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; This function calls:
  3762 ;;		Nothing
  3763 ;; This function is called by:
  3764 ;;		Interrupt level 2
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           	psect	intcode
  3769  000008                     __pintcode:
  3770                           	opt stack 0
  3771  000008                     _HighIsr:
  3772                           	opt stack 24
  3773                           
  3774                           ;incstack = 0
  3775  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3776  00000A  CFFA F001          	movff	pclath,??_HighIsr
  3777  00000E  CFFB F002          	movff	pclatu,??_HighIsr+1
  3778  000012  EF16  F00B         	goto	int_func
  3779                           pclatu	equ	0xFFB
  3780                           pclath	equ	0xFFA
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           indf0	equ	0xFEF
  3788                           postinc0	equ	0xFEE
  3789                           fsr0h	equ	0xFEA
  3790                           fsr0l	equ	0xFE9
  3791                           wreg	equ	0xFE8
  3792                           postdec1	equ	0xFE5
  3793                           fsr1h	equ	0xFE2
  3794                           fsr1l	equ	0xFE1
  3795                           bsr	equ	0xFE0
  3796                           indf2	equ	0xFDF
  3797                           postinc2	equ	0xFDE
  3798                           postdec2	equ	0xFDD
  3799                           fsr2h	equ	0xFDA
  3800                           fsr2l	equ	0xFD9
  3801                           status	equ	0xFD8
  3802                           
  3803                           	psect	intcode_body
  3804  00162C                     __pintcode_body:
  3805                           	opt stack 24
  3806  00162C                     int_func:
  3807                           	opt stack 24
  3808  00162C  CFE9 F003          	movff	fsr0l,??_HighIsr+2
  3809  001630  CFEA F004          	movff	fsr0h,??_HighIsr+3
  3810  001634  CFE1 F005          	movff	fsr1l,??_HighIsr+4
  3811  001638  CFE2 F006          	movff	fsr1h,??_HighIsr+5
  3812  00163C  CFD9 F007          	movff	fsr2l,??_HighIsr+6
  3813  001640  CFDA F008          	movff	fsr2h,??_HighIsr+7
  3814  001644  CFF3 F009          	movff	prodl,??_HighIsr+8
  3815  001648  CFF4 F00A          	movff	prodh,??_HighIsr+9
  3816  00164C  CFF6 F00B          	movff	tblptrl,??_HighIsr+10
  3817  001650  CFF7 F00C          	movff	tblptrh,??_HighIsr+11
  3818  001654  CFF8 F00D          	movff	tblptru,??_HighIsr+12
  3819  001658  CFF5 F00E          	movff	tablat,??_HighIsr+13
  3820                           
  3821                           ;test.c: 20: if (PIR3bits.TMR4IF==1)
  3822  00165C  A6A4               	btfss	4004,3,c	;volatile
  3823  00165E  D011               	goto	i2l220
  3824                           
  3825                           ;test.c: 21: {
  3826                           ;test.c: 22: counter++;
  3827  001660  4A3C               	infsnz	_counter,f,c
  3828  001662  2A3D               	incf	_counter+1,f,c
  3829                           
  3830                           ;test.c: 23: if (counter>=1000)
  3831  001664  BE3D               	btfsc	_counter+1,7,c
  3832  001666  D00C               	goto	i2l1444
  3833  001668  0EE8               	movlw	232
  3834  00166A  5C3C               	subwf	_counter,w,c
  3835  00166C  0E03               	movlw	3
  3836  00166E  583D               	subwfb	_counter+1,w,c
  3837  001670  A0D8               	btfss	status,0,c
  3838  001672  D006               	goto	i2l1444
  3839                           
  3840                           ;test.c: 24: {
  3841                           ;test.c: 25: sec++;
  3842  001674  4A3E               	infsnz	_sec,f,c
  3843  001676  2A3F               	incf	_sec+1,f,c
  3844                           
  3845                           ;test.c: 26: counter=0;
  3846  001678  0E00               	movlw	0
  3847  00167A  6E3D               	movwf	_counter+1,c
  3848  00167C  0E00               	movlw	0
  3849  00167E  6E3C               	movwf	_counter,c
  3850  001680                     i2l1444:
  3851                           
  3852                           ;test.c: 27: }
  3853                           ;test.c: 28: PIR3bits.TMR4IF = 0;
  3854  001680  96A4               	bcf	4004,3,c	;volatile
  3855  001682                     i2l220:
  3856  001682  C00E  FFF5         	movff	??_HighIsr+13,tablat
  3857  001686  C00D  FFF8         	movff	??_HighIsr+12,tblptru
  3858  00168A  C00C  FFF7         	movff	??_HighIsr+11,tblptrh
  3859  00168E  C00B  FFF6         	movff	??_HighIsr+10,tblptrl
  3860  001692  C00A  FFF4         	movff	??_HighIsr+9,prodh
  3861  001696  C009  FFF3         	movff	??_HighIsr+8,prodl
  3862  00169A  C008  FFDA         	movff	??_HighIsr+7,fsr2h
  3863  00169E  C007  FFD9         	movff	??_HighIsr+6,fsr2l
  3864  0016A2  C006  FFE2         	movff	??_HighIsr+5,fsr1h
  3865  0016A6  C005  FFE1         	movff	??_HighIsr+4,fsr1l
  3866  0016AA  C004  FFEA         	movff	??_HighIsr+3,fsr0h
  3867  0016AE  C003  FFE9         	movff	??_HighIsr+2,fsr0l
  3868  0016B2  C002  FFFB         	movff	??_HighIsr+1,pclatu
  3869  0016B6  C001  FFFA         	movff	??_HighIsr,pclath
  3870  0016BA  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3871  0016BC  0011               	retfie		f
  3872  0016BE                     __end_of_HighIsr:
  3873                           	opt stack 0
  3874                           pclatu	equ	0xFFB
  3875                           pclath	equ	0xFFA
  3876                           tblptru	equ	0xFF8
  3877                           tblptrh	equ	0xFF7
  3878                           tblptrl	equ	0xFF6
  3879                           tablat	equ	0xFF5
  3880                           prodh	equ	0xFF4
  3881                           prodl	equ	0xFF3
  3882                           indf0	equ	0xFEF
  3883                           postinc0	equ	0xFEE
  3884                           fsr0h	equ	0xFEA
  3885                           fsr0l	equ	0xFE9
  3886                           wreg	equ	0xFE8
  3887                           postdec1	equ	0xFE5
  3888                           fsr1h	equ	0xFE2
  3889                           fsr1l	equ	0xFE1
  3890                           bsr	equ	0xFE0
  3891                           indf2	equ	0xFDF
  3892                           postinc2	equ	0xFDE
  3893                           postdec2	equ	0xFDD
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           pclatu	equ	0xFFB
  3898                           pclath	equ	0xFFA
  3899                           tblptru	equ	0xFF8
  3900                           tblptrh	equ	0xFF7
  3901                           tblptrl	equ	0xFF6
  3902                           tablat	equ	0xFF5
  3903                           prodh	equ	0xFF4
  3904                           prodl	equ	0xFF3
  3905                           indf0	equ	0xFEF
  3906                           postinc0	equ	0xFEE
  3907                           fsr0h	equ	0xFEA
  3908                           fsr0l	equ	0xFE9
  3909                           wreg	equ	0xFE8
  3910                           postdec1	equ	0xFE5
  3911                           fsr1h	equ	0xFE2
  3912                           fsr1l	equ	0xFE1
  3913                           bsr	equ	0xFE0
  3914                           indf2	equ	0xFDF
  3915                           postinc2	equ	0xFDE
  3916                           postdec2	equ	0xFDD
  3917                           fsr2h	equ	0xFDA
  3918                           fsr2l	equ	0xFD9
  3919                           status	equ	0xFD8
  3920                           
  3921                           	psect	rparam
  3922  0000                     pclatu	equ	0xFFB
  3923                           pclath	equ	0xFFA
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           indf0	equ	0xFEF
  3931                           postinc0	equ	0xFEE
  3932                           fsr0h	equ	0xFEA
  3933                           fsr0l	equ	0xFE9
  3934                           wreg	equ	0xFE8
  3935                           postdec1	equ	0xFE5
  3936                           fsr1h	equ	0xFE2
  3937                           fsr1l	equ	0xFE1
  3938                           bsr	equ	0xFE0
  3939                           indf2	equ	0xFDF
  3940                           postinc2	equ	0xFDE
  3941                           postdec2	equ	0xFDD
  3942                           fsr2h	equ	0xFDA
  3943                           fsr2l	equ	0xFD9
  3944                           status	equ	0xFD8
  3945                           
  3946                           	psect	temp
  3947  000040                     btemp:
  3948                           	opt stack 0
  3949  000040                     	ds	1
  3950  0000                     int$flags	set	btemp
  3951                           pclatu	equ	0xFFB
  3952                           pclath	equ	0xFFA
  3953                           tblptru	equ	0xFF8
  3954                           tblptrh	equ	0xFF7
  3955                           tblptrl	equ	0xFF6
  3956                           tablat	equ	0xFF5
  3957                           prodh	equ	0xFF4
  3958                           prodl	equ	0xFF3
  3959                           indf0	equ	0xFEF
  3960                           postinc0	equ	0xFEE
  3961                           fsr0h	equ	0xFEA
  3962                           fsr0l	equ	0xFE9
  3963                           wreg	equ	0xFE8
  3964                           postdec1	equ	0xFE5
  3965                           fsr1h	equ	0xFE2
  3966                           fsr1l	equ	0xFE1
  3967                           bsr	equ	0xFE0
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           postdec2	equ	0xFDD
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    18
    Data        40
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      63
    BANK0           160     45      61
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> writeNum@numStr(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcdWriteLine@data	PTR unsigned char  size(2) Largest target is 10
		 -> STR_6(CODE[6]), STR_5(CODE[6]), STR_3(CODE[3]), STR_2(CODE[2]), 
		 -> writeNum@numStr(BANK0[10]), 

    ee_read_char@_data	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_LCD8send
    _writeLCD->_LCD8send
    _writeLCD->_ee_read_char
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _lcdWriteLine->_LCD8send
    _ee_read_char->_eepromRead
    _eepromRead->_SPI1out
    _eepromInit->_SPI1out
    _SPI1init->_SPI1out
    _ee_write_char->_eepromWrite
    _eepromWrite->_SPI1out
    _Read_KeyPad->_process_key
    _LCD8init->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in COMRAM

    None.

Critical Paths under _HighIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_writeLCD
    _writeLCD->_writeNum
    _writeNum->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdWriteLine->_LCD8send
    _LCD8init->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in BANK0

    None.

Critical Paths under _HighIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowIsr in BANK1

    None.

Critical Paths under _HighIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowIsr in BANK2

    None.

Critical Paths under _HighIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowIsr in BANK3

    None.

Critical Paths under _HighIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowIsr in BANK4

    None.

Critical Paths under _HighIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowIsr in BANK5

    None.

Critical Paths under _HighIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowIsr in BANK6

    None.

Critical Paths under _HighIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowIsr in BANK7

    None.

Critical Paths under _HighIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowIsr in BANK8

    None.

Critical Paths under _HighIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowIsr in BANK9

    None.

Critical Paths under _HighIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowIsr in BANK10

    None.

Critical Paths under _HighIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowIsr in BANK11

    None.

Critical Paths under _HighIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowIsr in BANK12

    None.

Critical Paths under _HighIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowIsr in BANK13

    None.

Critical Paths under _HighIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _LowIsr in BANK14

    None.

Critical Paths under _HighIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _LowIsr in BANK15

    None.

Critical Paths under _HighIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   29307
                                             36 BANK0      9     9      0
                         _KeyPadinit
                           _LCD8init
                           _LCD8send
                        _Read_KeyPad
                           _delay_ms
                      _ee_write_char
                         _eepromInit
                       _lcdWriteLine
                           _writeLCD
                           _writeNum
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             3     3      0   11671
                                             33 BANK0      3     3      0
                           _LCD8send
                       _ee_read_char
                       _lcdWriteLine
                           _writeNum
 ---------------------------------------------------------------------------------
 (1) _writeNum                                            11    11      0    5085
                                             22 BANK0     11    11      0
                       _lcdWriteLine
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    1631
                                              8 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              3 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             31 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcdWriteLine                                         6     4      2    3331
                                              3 BANK0      6     4      2
                           _LCD8send
 ---------------------------------------------------------------------------------
 (2) _ee_read_char                                         3     1      2     315
                                             34 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                         _eepromRead
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           2     2      0      99
                                             32 COMRAM     2     2      0
                            _SPI1out
                             _eeWait
 ---------------------------------------------------------------------------------
 (1) _eepromInit                                           0     0      0      68
                           _SPI1init
                            _SPI1out
 ---------------------------------------------------------------------------------
 (2) _SPI1init                                             0     0      0      34
                            _SPI1out
 ---------------------------------------------------------------------------------
 (1) _ee_write_char                                        2     1      1     426
                                              0 BANK0      2     1      1
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          3     2      1     210
                                             32 COMRAM     3     2      1
                            _SPI1out
                             _eeWait
 ---------------------------------------------------------------------------------
 (4) _eeWait                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI1out                                              1     1      0      34
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Read_KeyPad                                          5     5      0     529
                                              0 BANK0      5     5      0
                        _process_key
 ---------------------------------------------------------------------------------
 (2) _process_key                                          3     3      0     161
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD8init                                             0     0      0    3577
                           _LCD8send
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _LCD8send                                             2     1      1    2816
                                             34 COMRAM     1     0      1
                                              2 BANK0      1     1      0
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             5     3      2     453
                                             31 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             5     3      2     761
                                             31 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeyPadinit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowIsr                                              17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighIsr                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeyPadinit
   _LCD8init
     _LCD8send
       _delay_ms
       _delay_us
     _delay_ms
   _LCD8send
     _delay_ms
     _delay_us
   _Read_KeyPad
     _process_key
   _delay_ms
   _ee_write_char
     _eepromWrite
       _SPI1out
       _eeWait
   _eepromInit
     _SPI1init
       _SPI1out
     _SPI1out
   _lcdWriteLine
     _LCD8send
       _delay_ms
       _delay_us
   _writeLCD
     _LCD8send
       _delay_ms
       _delay_us
     _ee_read_char
       _eepromRead
         _SPI1out
         _eeWait
     _lcdWriteLine
       _LCD8send
         _delay_ms
         _delay_us
     _writeNum
       _lcdWriteLine
         _LCD8send
           _delay_ms
           _delay_us
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _writeNum
     _lcdWriteLine
       _LCD8send
         _delay_ms
         _delay_us
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)

 _LowIsr (ROOT)

 _HighIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0       0      38        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2D      3D       5       38.1%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      3F       1       67.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7C      29        0.0%
DATA                 0      0      7C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Aug 14 14:22:01 2017

                     l16 16E8                       l61 1A9E                       bsr 000FE0  
             _WRITE_MODE 1011                      l122 19D0                      l115 193E  
                    l129 1AA8                      l767 17EA                      l777 178C  
                    _sec 003E          __end_of_EEDELAY 100F                      prod 000FF3  
                    wreg 000FE8               _TXSTA1bits 000FAC             __CFG_FOSC$HS 000000  
            main@address 0086     __end_of_ee_read_char 1A64           ??_lcdWriteLine 0065  
           __CFG_WDT$OFF 000000                     l2120 15A2                     l2202 19C0  
                   l2036 1928                     l2044 19DC                     l2124 15EA  
                   l2140 13A4                     l2070 17BA                     l2150 13D4  
                   l2134 1370                     l2080 17DE                     l2072 17BE  
                   l2152 13DA                     l2128 1352                     l2218 18A2  
                   l2090 1754                     l2170 1436                     l2068 17B0  
                   l2092 175A                     l2172 143C                     l2164 1416  
                   l2180 14AA                     l2420 113A                     l2412 10FA  
                   l2262 1720                     l2254 16D2                     l2182 14CA  
                   l2430 1194                     l2414 1108                     l2192 19A0  
                   l2096 177E                     l2088 1748                     l2440 11EC  
                   l2424 1164                     l2408 10C6                     l2178 149E  
                   l2450 124C                     l2434 11BC                     l2188 1998  
                   l2268 172E                     l2444 1214                     l2460 12C0  
                   l2198 19BC                     l2454 1288                     l2464 12D4  
                   l2396 1074                     l2478 1336            lcdWriteLine@i 0067  
                   STR_1 1025                     STR_2 1028                     STR_3 1022  
                   STR_4 101F                     STR_5 1019                     STR_6 1013  
                   _LATD 000F8C                     _LATE 000F8D                     u1480 15E0  
                   u1801 11B4                     u1490 1624                     u1395 18EC  
                   u1396 18EE                     u1487 15D6                     u1497 161A  
                   u1907 192E                     u1771 115A          __end_of_SPI1out 1AA8  
                   _main 102C            eepromWrite@sr 0023                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr0l 000FE9  
                   fsr2h 000FDA                     fsr1l 000FE1                     indf2 000FDF  
                   fsr2l 000FD9              main@prevKey 0085                     btemp 0040  
                   pclat 000FFA             process_key@i 0022                     prodh 000FF4  
                   prodl 000FF3                     start 00A6          __end_of_HighIsr 16BE  
           ___param_bank 000010         __end_of_LCD8init 1596            ??_Read_KeyPad 0023  
       __end_of_LCD8send 191C                    ?_main 0001          __end_of___lwdiv 17F4  
        __end_of___lwmod 1796                    i2l220 1682                    _PORTD 000F83  
                  _PORTJ 000F88                    _TRISD 000F95                    _TRISE 000F96  
                  _TRISH 000F99                    _TRISJ 000F9A      ee_read_char@address 0023  
       __end_of_SPI1init 1A76          __end_of_dpowers 100B          clr_screen@F6532 0034  
                  tablat 000FF5               _KeyPadinit 1AAE                    status 000FD8  
        __end_of_sprintf 14D8          __initialization 184A             __end_of_main 1344  
       eepromRead@buffer 0022                   ??_main 0084            __activetblptr 000003  
    __end_of_Read_KeyPad 1734        __end_of_READ_MODE 1011                ??_SPI1out 0020  
                 i2l1444 1680                   _SPBRG1 000FAF                ??_HighIsr 0001  
                 _TXREG1 000FAD                   _TXSTA1 000FAC         __end_of_delay_ms 1958  
       __end_of_delay_us 19F6           __CFG_XINST$OFF 000000                   _LowIsr 0018  
   __size_of_eepromWrite 0044    __end_of_ee_write_char 1A88                   _eeWait 1AA8  
   __end_of_lcdWriteLine 162C                ??___lwdiv 0024                ??___lwmod 0024  
  __size_of_ee_read_char 0014             __pdataCOMRAM 0024             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
           Read_KeyPad@i 0061                ??_sprintf 006E                LCD8send@c 0062  
       __end_of_writeLCD 184A                ?_LCD8init 0001                ?_LCD8send 0023  
           ?_process_key 0001         __end_of_writeNum 1992              ?_KeyPadinit 0001  
             __accesstop 0060  __end_of__initialization 1892            ___rparam_used 000001  
   ee_write_char@address 0061           __pcstackCOMRAM 0001             _ee_read_char 1A50  
           __pidataBANK0 1A88                ?_SPI1init 0001              _Read_KeyPad 16BE  
      eepromRead@address 0021               ??_LCD8init 0024               ??_LCD8send 0024  
        writeLCD@address 0083                  ?_LowIsr 0001                  ?_eeWait 0001  
             ??_SPI1init 0021         lcdWriteLine@data 0063                  _EEDELAY 100B  
    __size_of_KeyPadinit 0006               _eepromInit 1A1E               _eepromRead 19F6  
              ?_delay_ms 0020                ?_delay_us 0020                  _SSP1BUF 000FC9  
                _SPI1out 1A98                  _HighIsr 0008    __size_of_lcdWriteLine 0096  
                __Hparam 0000                  __Lparam 0000          __size_of_LowIsr 008E  
        __size_of_eeWait 0006                  ___lwdiv 1796                  ___lwmod 1734  
           __psmallconst 1000             writeLCD@data 0081                  __pcinit 184A  
                __ramtop 1000                ?_writeLCD 0001                  __ptext0 102C  
                __ptext1 17F4                  __ptext2 1958                  __ptext3 1344  
                __ptext4 1734                  __ptext5 1796                  __ptext6 1596  
                __ptext7 1A50                  __ptext8 19F6                  __ptext9 1A1E  
              ?_writeNum 0001                  _counter 003C                  _dpowers 1001  
             ??_delay_ms 0022               ??_delay_us 0022         eepromWrite@value 0021  
                _sprintf 1344                  main@key 008A           __pintcode_body 162C  
           _lcdWriteLine 1596     end_of_initialization 1892                _READ_MODE 100F  
            SPI1out@Code 0020                  int_func 162C     __size_of_process_key 0032  
     __end_of_WRITE_MODE 1013          process_key@code 0021                _RCSTAbits 000FAB  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE               ??_writeLCD 0024                _PORTCbits 000F82  
             ??_writeNum 0024              ?_eepromInit 0001              ?_eepromRead 0001  
              _TRISCbits 000F94           main@writeValue 0087             ??_KeyPadinit 0020  
          ??_eepromWrite 0022        __size_of_LCD8init 00BE        __size_of_LCD8send 003C  
      ee_read_char@_data 0060           __end_of_LowIsr 00A6             ?_Read_KeyPad 0001  
         __end_of_eeWait 1AAE            __pidataCOMRAM 1A38        __size_of_SPI1init 0012  
     __end_of_KeyPadinit 1AB4      start_initialization 184A       ee_write_char@chunk 0060  
 __size_of_ee_write_char 0012      __size_of_eepromInit 001A      __size_of_eepromRead 0028  
               ??_LowIsr 000F                 ??_eeWait 0020      __end_of_eepromWrite 18E0  
            __pdataBANK0 008D              __pbssCOMRAM 003C            __pcstackBANK0 0060  
               ?_SPI1out 0001        __size_of_delay_ms 003C        __size_of_delay_us 0032  
            sprintf@flag 0071                 ?_HighIsr 0001              sprintf@prec 0072  
       ___lwdiv@dividend 0020                __pintcode 0008            _ee_write_char 1A76  
               ?___lwdiv 0020                 ?___lwmod 0063              __pintcodelo 0018  
            __smallconst 1000                 _BAUDCON1 000F7E        __size_of_writeLCD 0056  
      __size_of_writeNum 003A                _keyValues 008D         ___lwdiv@quotient 0061  
               ?_sprintf 0068                 _LCD8init 14D8                _scan_code 0024  
               _LCD8send 18E0       eepromWrite@address 0022                 _LATCbits 000F8B  
              delay_ms@i 0060                delay_ms@x 0020                 _LATHbits 000F90  
              delay_us@i 0060                delay_us@x 0020              _eepromWrite 189C  
               _IPR1bits 000F9F                 _PIE1bits 000F9D                 _IPR3bits 000FA5  
               _PIE3bits 000FA3                 _PIR1bits 000F9E                 _PIR3bits 000FA4  
         ?_ee_write_char 0060                 _RCONbits 000FD0                 _SSP1CON1 000FC6  
               _SPI1init 1A64     __size_of_Read_KeyPad 0076             ??_eepromInit 0021  
           ??_eepromRead 0021                main@keyNo 0088                copy_data0 1866  
              copy_data1 1886         __size_of_SPI1out 0010            ??_process_key 0020  
       __size_of_HighIsr 16B6                 __Hrparam 0000                 __Lrparam 0000  
          ?_ee_read_char 0060       __end_of_eepromInit 1A38       __end_of_eepromRead 1A1E  
       Read_KeyPad@value 0060         __size_of___lwdiv 005E         __size_of___lwmod 0062  
       cursor_home@F6537 0038               sprintf@val 0073                 _delay_ms 191C  
               _delay_us 19C4          ___lwdiv@divisor 0022          ___lwdiv@counter 0060  
               __ptext10 1A64                 __ptext11 1A76                 __ptext20 191C  
               __ptext12 189C                 __ptext21 1AAE                 __ptext13 1AA8  
               __ptext14 1A98                 __ptext15 16BE                 __ptext16 1992  
               __ptext17 14D8                 __ptext18 18E0                 __ptext19 19C4  
       __size_of_sprintf 0194            __size_of_main 0318          ??_ee_write_char 0024  
    __end_of_process_key 19C4           ??_ee_read_char 0023                 int$flags 0040  
           _SSP1STATbits 000FC7                 main@mode 008B                 _writeLCD 17F4  
               _writeNum 1958               _INTCONbits 000FF2          Read_KeyPad@code 0064  
               intlevel1 0000                 intlevel2 0000                sprintf@ap 006F  
              sprintf@sp 0068         ___lwmod@dividend 0063               _RCSTA1bits 000FAB  
         Read_KeyPad@Col 0063             LCD8send@mode 0023                 sprintf@c 0075  
               sprintf@f 006A          ___lwmod@divisor 0065          ___lwmod@counter 0067  
          ?_lcdWriteLine 0063              _process_key 1992           writeNum@numStr 0076  
         writeNum@number 0080             ?_eepromWrite 0021  
