

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Aug 14 16:32:42 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           	psect	idataCOMRAM
    49  001F0E                     __pidataCOMRAM:
    50                           	opt stack 0
    51                           
    52                           ;initializer for _scan_code
    53  001F0E  EB                 	db	235
    54  001F0F  77                 	db	119
    55  001F10  7B                 	db	123
    56  001F11  7D                 	db	125
    57  001F12  B7                 	db	183
    58  001F13  BB                 	db	187
    59  001F14  BD                 	db	189
    60  001F15  D7                 	db	215
    61  001F16  DB                 	db	219
    62  001F17  DD                 	db	221
    63  001F18  7E                 	db	126
    64  001F19  BE                 	db	190
    65  001F1A  DE                 	db	222
    66  001F1B  EE                 	db	238
    67  001F1C  E7                 	db	231
    68  001F1D  ED                 	db	237
    69                           
    70                           ;initializer for clr_screen@F6532
    71  001F1E  1B                 	db	27
    72  001F1F  5B                 	db	91
    73  001F20  32                 	db	50
    74  001F21  4A                 	db	74
    75                           
    76                           ;initializer for cursor_home@F6537
    77  001F22  1B                 	db	27
    78  001F23  5B                 	db	91
    79  001F24  32                 	db	50
    80  001F25  48                 	db	72
    81                           
    82                           	psect	idataBANK0
    83  001F5E                     __pidataBANK0:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _keyValues
    87  001F5E  30                 	db	48
    88  001F5F  31                 	db	49
    89  001F60  32                 	db	50
    90  001F61  33                 	db	51
    91  001F62  34                 	db	52
    92  001F63  35                 	db	53
    93  001F64  36                 	db	54
    94  001F65  37                 	db	55
    95  001F66  38                 	db	56
    96  001F67  39                 	db	57
    97  001F68  41                 	db	65
    98  001F69  42                 	db	66
    99  001F6A  43                 	db	67
   100  001F6B  44                 	db	68
   101  001F6C  2A                 	db	42
   102  001F6D  23                 	db	35
   103                           
   104                           	psect	smallconst
   105  001000                     __psmallconst:
   106                           	opt stack 0
   107  001000  00                 	db	0
   108  001001                     _dpowers:
   109                           	opt stack 0
   110  001001  0001               	dw	1
   111  001003  000A               	dw	10
   112  001005  0064               	dw	100
   113  001007  03E8               	dw	1000
   114  001009  2710               	dw	10000
   115  00100B                     __end_of_dpowers:
   116                           	opt stack 0
   117  00100B                     _EEDELAY:
   118                           	opt stack 0
   119  00100B  001E               	dw	30
   120  00100D  0000               	dw	0
   121  00100F                     __end_of_EEDELAY:
   122                           	opt stack 0
   123  00100F                     _READ_MODE:
   124                           	opt stack 0
   125  00100F  0001               	dw	1
   126  001011                     __end_of_READ_MODE:
   127                           	opt stack 0
   128  001011                     _WRITE_MODE:
   129                           	opt stack 0
   130  001011  0000               	dw	0
   131  001013                     __end_of_WRITE_MODE:
   132                           	opt stack 0
   133  0000                     _BAUDCON1	set	3966
   134  0000                     _INTCONbits	set	4082
   135  0000                     _IPR1bits	set	3999
   136  0000                     _IPR3bits	set	4005
   137  0000                     _LATCbits	set	3979
   138  0000                     _LATD	set	3980
   139  0000                     _LATE	set	3981
   140  0000                     _LATHbits	set	3984
   141  0000                     _PIE1bits	set	3997
   142  0000                     _PIE3bits	set	4003
   143  0000                     _PIR1bits	set	3998
   144  0000                     _PIR3bits	set	4004
   145  0000                     _PORTCbits	set	3970
   146  0000                     _PORTD	set	3971
   147  0000                     _PORTJ	set	3976
   148  0000                     _RCONbits	set	4048
   149  0000                     _RCSTA1bits	set	4011
   150  0000                     _RCSTAbits	set	4011
   151  0000                     _SPBRG1	set	4015
   152  0000                     _SSP1BUF	set	4041
   153  0000                     _SSP1CON1	set	4038
   154  0000                     _SSP1STATbits	set	4039
   155  0000                     _TRISCbits	set	3988
   156  0000                     _TRISD	set	3989
   157  0000                     _TRISE	set	3990
   158  0000                     _TRISH	set	3993
   159  0000                     _TRISJ	set	3994
   160  0000                     _TXREG1	set	4013
   161  0000                     _TXSTA1	set	4012
   162  0000                     _TXSTA1bits	set	4012
   163  001013                     STR_8:
   164  001013  20                 	db	32
   165  001014  76                 	db	118	;'v'
   166  001015  61                 	db	97	;'a'
   167  001016  6C                 	db	108	;'l'
   168  001017  3D                 	db	61	;'='
   169  001018  00                 	db	0
   170  001019                     STR_7:
   171  001019  20                 	db	32
   172  00101A  6B                 	db	107	;'k'
   173  00101B  65                 	db	101	;'e'
   174  00101C  79                 	db	121	;'y'
   175  00101D  3D                 	db	61	;'='
   176  00101E  00                 	db	0
   177  00101F                     STR_5:
   178  00101F  20                 	db	32
   179  001020  4E                 	db	78	;'N'
   180  001021  00                 	db	0
   181  001022                     STR_6:
   182  001022  57                 	db	87	;'W'
   183  001023  52                 	db	82	;'R'
   184  001024  00                 	db	0
   185  001025                     STR_3:
   186  001025  20                 	db	32
   187  001026  56                 	db	86	;'V'
   188  001027  00                 	db	0
   189  001028                     STR_1:
   190  001028  25                 	db	37
   191  001029  69                 	db	105	;'i'
   192  00102A  00                 	db	0
   193  00102B                     STR_2:
   194  00102B  23                 	db	35
   195  00102C  00                 	db	0
   196  0000                     
   197                           ; #config settings
   198  00102D  00                 	db	0	; dummy byte at the end
   199  0000                     
   200                           	psect	cinit
   201  001D60                     __pcinit:
   202                           	opt stack 0
   203  001D60                     start_initialization:
   204                           	opt stack 0
   205  001D60                     __initialization:
   206                           	opt stack 0
   207                           
   208                           ; Clear objects allocated to COMRAM (4 bytes)
   209  001D60  6A3F               	clrf	(__pbssCOMRAM+3)& (0+255),c
   210  001D62  6A3E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   211  001D64  6A3D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   212  001D66  6A3C               	clrf	__pbssCOMRAM& (0+255),c
   213                           
   214                           ; Initialize objects allocated to BANK0 (16 bytes)
   215                           ; load TBLPTR registers with __pidataBANK0
   216  001D68  0E5E               	movlw	low __pidataBANK0
   217  001D6A  6EF6               	movwf	tblptrl,c
   218  001D6C  0E1F               	movlw	high __pidataBANK0
   219  001D6E  6EF7               	movwf	tblptrh,c
   220  001D70  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   221  001D72  6EF8               	movwf	tblptru,c
   222  001D74  EE00  F0AB         	lfsr	0,__pdataBANK0
   223  001D78  EE10 F010          	lfsr	1,16
   224  001D7C                     copy_data0:
   225  001D7C  0009               	tblrd		*+
   226  001D7E  CFF5 FFEE          	movff	tablat,postinc0
   227  001D82  50E5               	movf	postdec1,w,c
   228  001D84  50E1               	movf	fsr1l,w,c
   229  001D86  E1FA               	bnz	copy_data0
   230                           
   231                           ; Initialize objects allocated to COMRAM (24 bytes)
   232                           ; load TBLPTR registers with __pidataCOMRAM
   233  001D88  0E0E               	movlw	low __pidataCOMRAM
   234  001D8A  6EF6               	movwf	tblptrl,c
   235  001D8C  0E1F               	movlw	high __pidataCOMRAM
   236  001D8E  6EF7               	movwf	tblptrh,c
   237  001D90  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   238  001D92  6EF8               	movwf	tblptru,c
   239  001D94  EE00  F024         	lfsr	0,__pdataCOMRAM
   240  001D98  EE10 F018          	lfsr	1,24
   241  001D9C                     copy_data1:
   242  001D9C  0009               	tblrd		*+
   243  001D9E  CFF5 FFEE          	movff	tablat,postinc0
   244  001DA2  50E5               	movf	postdec1,w,c
   245  001DA4  50E1               	movf	fsr1l,w,c
   246  001DA6  E1FA               	bnz	copy_data1
   247  001DA8                     end_of_initialization:
   248                           	opt stack 0
   249  001DA8                     __end_of__initialization:
   250                           	opt stack 0
   251  001DA8  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   252  001DAA  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   253  001DAC  0100               	movlb	0
   254  001DAE  EF17  F008         	goto	_main	;jump to C main() function
   255                           tblptru	equ	0xFF8
   256                           tblptrh	equ	0xFF7
   257                           tblptrl	equ	0xFF6
   258                           tablat	equ	0xFF5
   259                           postinc0	equ	0xFEE
   260                           postdec1	equ	0xFE5
   261                           fsr1l	equ	0xFE1
   262                           
   263                           	psect	bssCOMRAM
   264  00003C                     __pbssCOMRAM:
   265                           	opt stack 0
   266  00003C                     _counter:
   267                           	opt stack 0
   268  00003C                     	ds	2
   269  00003E                     _sec:
   270                           	opt stack 0
   271  00003E                     	ds	2
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           postdec1	equ	0xFE5
   278                           fsr1l	equ	0xFE1
   279                           
   280                           	psect	dataCOMRAM
   281  000024                     __pdataCOMRAM:
   282                           	opt stack 0
   283  000024                     _scan_code:
   284                           	opt stack 0
   285  000024                     	ds	16
   286  000034                     clr_screen@F6532:
   287                           	opt stack 0
   288  000034                     	ds	4
   289  000038                     cursor_home@F6537:
   290                           	opt stack 0
   291  000038                     	ds	4
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           postdec1	equ	0xFE5
   298                           fsr1l	equ	0xFE1
   299                           
   300                           	psect	dataBANK0
   301  0000AB                     __pdataBANK0:
   302                           	opt stack 0
   303  0000AB                     _keyValues:
   304                           	opt stack 0
   305  0000AB                     	ds	16
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	cstackBANK0
   315  000060                     __pcstackBANK0:
   316                           	opt stack 0
   317  000060                     ?___lmul:
   318                           	opt stack 0
   319  000060                     ?___lldiv:
   320                           	opt stack 0
   321  000060                     ?___llmod:
   322                           	opt stack 0
   323  000060                     Read_KeyPad@value:
   324                           	opt stack 0
   325  000060                     ___lwdiv@counter:
   326                           	opt stack 0
   327  000060                     delay_ms@i:
   328                           	opt stack 0
   329  000060                     delay_us@i:
   330                           	opt stack 0
   331  000060                     ee_read_char@_data:
   332                           	opt stack 0
   333  000060                     ___lmul@multiplier:
   334                           	opt stack 0
   335  000060                     ___lldiv@dividend:
   336                           	opt stack 0
   337  000060                     ___llmod@dividend:
   338                           	opt stack 0
   339                           
   340                           ; 4 bytes @ 0x0
   341  000060                     	ds	1
   342  000061                     Read_KeyPad@i:
   343                           	opt stack 0
   344  000061                     ___lwdiv@quotient:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x1
   348  000061                     	ds	1
   349  000062                     LCD8send@c:
   350                           	opt stack 0
   351  000062                     eepromWrite@address:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0x2
   355  000062                     	ds	1
   356  000063                     ?___lwmod:
   357                           	opt stack 0
   358  000063                     Read_KeyPad@Col:
   359                           	opt stack 0
   360  000063                     eepromWrite@sr:
   361                           	opt stack 0
   362  000063                     lcdWriteLine@data:
   363                           	opt stack 0
   364  000063                     ___lwmod@dividend:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x3
   368  000063                     	ds	1
   369  000064                     Read_KeyPad@code:
   370                           	opt stack 0
   371  000064                     ___lmul@multiplicand:
   372                           	opt stack 0
   373  000064                     ___lldiv@divisor:
   374                           	opt stack 0
   375  000064                     ___llmod@divisor:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x4
   379  000064                     	ds	1
   380  000065                     ??_lcdWriteLine:
   381  000065                     ___lwmod@divisor:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x5
   385  000065                     	ds	2
   386  000067                     ___lwmod@counter:
   387                           	opt stack 0
   388  000067                     lcdWriteLine@i:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x7
   392  000067                     	ds	1
   393  000068                     ?_sprintf:
   394                           	opt stack 0
   395  000068                     ?_ee_read_num:
   396                           	opt stack 0
   397  000068                     ee_write_char@chunk:
   398                           	opt stack 0
   399  000068                     sprintf@sp:
   400                           	opt stack 0
   401  000068                     ___lldiv@quotient:
   402                           	opt stack 0
   403                           
   404                           ; 4 bytes @ 0x8
   405  000068                     	ds	1
   406  000069                     ee_write_char@address:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x9
   410  000069                     	ds	1
   411  00006A                     sprintf@f:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0xA
   415  00006A                     	ds	2
   416  00006C                     ee_read_num@addr:
   417                           	opt stack 0
   418  00006C                     ___lldiv@counter:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0xC
   422  00006C                     	ds	1
   423  00006D                     ee_write_num@number:
   424                           	opt stack 0
   425  00006D                     ee_read_num@i:
   426                           	opt stack 0
   427                           
   428                           ; 4 bytes @ 0xD
   429  00006D                     	ds	3
   430  000070                     ??_sprintf:
   431                           
   432                           ; 1 bytes @ 0x10
   433  000070                     	ds	1
   434  000071                     ee_write_num@addr:
   435                           	opt stack 0
   436  000071                     sprintf@ap:
   437                           	opt stack 0
   438  000071                     ee_read_num@number:
   439                           	opt stack 0
   440                           
   441                           ; 4 bytes @ 0x11
   442  000071                     	ds	1
   443  000072                     ee_write_num@i:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x12
   447  000072                     	ds	1
   448  000073                     sprintf@flag:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x13
   452  000073                     	ds	1
   453  000074                     sprintf@prec:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x14
   457  000074                     	ds	1
   458  000075                     ee_read_num@byte:
   459                           	opt stack 0
   460  000075                     sprintf@val:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x15
   464  000075                     	ds	2
   465  000077                     sprintf@c:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x17
   469  000077                     	ds	1
   470  000078                     writeNum@number:
   471                           	opt stack 0
   472                           
   473                           ; 4 bytes @ 0x18
   474  000078                     	ds	4
   475  00007C                     writeNum@numStr:
   476                           	opt stack 0
   477                           
   478                           ; 20 bytes @ 0x1C
   479  00007C                     	ds	20
   480  000090                     writeLCD@valMode:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x30
   484  000090                     	ds	2
   485  000092                     ??_writeLCD:
   486                           
   487                           ; 1 bytes @ 0x32
   488  000092                     	ds	1
   489  000093                     writeLCD@num:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x33
   493  000093                     	ds	4
   494  000097                     writeLCD@data:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x37
   498  000097                     	ds	2
   499  000099                     writeLCD@address:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x39
   503  000099                     	ds	1
   504  00009A                     ??_main:
   505                           
   506                           ; 1 bytes @ 0x3A
   507  00009A                     	ds	4
   508  00009E                     main@valMode:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x3E
   512  00009E                     	ds	2
   513  0000A0                     main@prevKey:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x40
   517  0000A0                     	ds	1
   518  0000A1                     main@keyNo:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x41
   522  0000A1                     	ds	2
   523  0000A3                     main@writeValue:
   524                           	opt stack 0
   525                           
   526                           ; 4 bytes @ 0x43
   527  0000A3                     	ds	4
   528  0000A7                     main@address:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x47
   532  0000A7                     	ds	1
   533  0000A8                     main@key:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x48
   537  0000A8                     	ds	1
   538  0000A9                     main@mode:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x49
   542  0000A9                     	ds	2
   543                           tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           postinc0	equ	0xFEE
   548                           postdec1	equ	0xFE5
   549                           fsr1l	equ	0xFE1
   550                           
   551                           	psect	cstackCOMRAM
   552  000001                     __pcstackCOMRAM:
   553                           	opt stack 0
   554  000001                     ??_HighIsr:
   555  000001                     
   556                           ; 1 bytes @ 0x0
   557  000001                     	ds	14
   558  00000F                     ??_LowIsr:
   559                           
   560                           ; 1 bytes @ 0xE
   561  00000F                     	ds	17
   562  000020                     ?___lwdiv:
   563                           	opt stack 0
   564  000020                     SPI1out@Code:
   565                           	opt stack 0
   566  000020                     ___llmod@counter:
   567                           	opt stack 0
   568  000020                     delay_ms@x:
   569                           	opt stack 0
   570  000020                     delay_us@x:
   571                           	opt stack 0
   572  000020                     ___lwdiv@dividend:
   573                           	opt stack 0
   574  000020                     ___lmul@product:
   575                           	opt stack 0
   576                           
   577                           ; 4 bytes @ 0x1F
   578  000020                     	ds	1
   579  000021                     process_key@code:
   580                           	opt stack 0
   581  000021                     eepromRead@address:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x20
   585  000021                     	ds	1
   586  000022                     ??_delay_ms:
   587  000022                     ??_delay_us:
   588  000022                     process_key@i:
   589                           	opt stack 0
   590  000022                     eepromRead@buffer:
   591                           	opt stack 0
   592  000022                     ___lwdiv@divisor:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x21
   596  000022                     	ds	1
   597  000023                     LCD8send@mode:
   598                           	opt stack 0
   599  000023                     eepromWrite@value:
   600                           	opt stack 0
   601  000023                     ee_read_char@address:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x22
   605  000023                     	ds	1
   606  000024                     tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           postinc0	equ	0xFEE
   611                           postdec1	equ	0xFE5
   612                           fsr1l	equ	0xFE1
   613                           
   614                           ; 1 bytes @ 0x23
   615 ;;
   616 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   617 ;;
   618 ;; *************** function _main *****************
   619 ;; Defined at:
   620 ;;		line 71 in file "test.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;		None
   623 ;; Auto vars:     Size  Location     Type
   624 ;;  keyNo           2   65[BANK0 ] int 
   625 ;;  key             1   72[BANK0 ] unsigned char 
   626 ;;  writeValue      4   67[BANK0 ] unsigned long 
   627 ;;  mode            2   73[BANK0 ] unsigned int 
   628 ;;  valMode         2   62[BANK0 ] unsigned int 
   629 ;;  address         1   71[BANK0 ] unsigned char 
   630 ;;  prevKey         1   64[BANK0 ] unsigned char 
   631 ;; Return value:  Size  Location     Type
   632 ;;                  1    wreg      void 
   633 ;; Registers used:
   634 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   635 ;; Tracked objects:
   636 ;;		On entry : 0/0
   637 ;;		On exit  : 0/0
   638 ;;		Unchanged: 0/0
   639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   641 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   642 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   643 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   644 ;;Total ram usage:       17 bytes
   645 ;; Hardware stack levels required when called:    7
   646 ;; This function calls:
   647 ;;		_KeyPadinit
   648 ;;		_LCD8init
   649 ;;		_LCD8send
   650 ;;		_Read_KeyPad
   651 ;;		___lmul
   652 ;;		_delay_ms
   653 ;;		_ee_write_char
   654 ;;		_ee_write_num
   655 ;;		_eepromInit
   656 ;;		_lcdWriteLine
   657 ;;		_writeLCD
   658 ;;		_writeNum
   659 ;; This function is called by:
   660 ;;		Startup code after reset
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           	psect	text0
   665  00102E                     __ptext0:
   666                           	opt stack 0
   667  00102E                     _main:
   668                           	opt stack 24
   669                           
   670                           ;test.c: 72: LCD8init();
   671                           
   672                           ;incstack = 0
   673  00102E  EC69  F00B         	call	_LCD8init	;wreg free
   674                           
   675                           ;test.c: 73: KeyPadinit();
   676  001032  ECC2  F00F         	call	_KeyPadinit	;wreg free
   677                           
   678                           ;test.c: 74: eepromInit();
   679  001036  EC7A  F00F         	call	_eepromInit	;wreg free
   680                           
   681                           ;test.c: 76: delay_ms(1000);
   682  00103A  0E03               	movlw	3
   683  00103C  6E21               	movwf	delay_ms@x+1,c
   684  00103E  0EE8               	movlw	232
   685  001040  6E20               	movwf	delay_ms@x,c
   686  001042  EC16  F00F         	call	_delay_ms	;wreg free
   687                           
   688                           ;test.c: 78: TRISJ = 0x00;
   689  001046  0E00               	movlw	0
   690  001048  6E9A               	movwf	3994,c	;volatile
   691                           
   692                           ;test.c: 79: PORTJ = 0b0;
   693  00104A  0E00               	movlw	0
   694  00104C  6E88               	movwf	3976,c	;volatile
   695                           
   696                           ;test.c: 81: unsigned char address = 250;
   697  00104E  0EFA               	movlw	250
   698  001050  0100               	movlb	0	; () banked
   699  001052  6FA7               	movwf	main@address& (0+255),b
   700                           
   701                           ; BSR set to: 0
   702                           ;test.c: 82: unsigned long writeValue = 250;
   703  001054  0EFA               	movlw	250
   704  001056  0100               	movlb	0	; () banked
   705  001058  6FA3               	movwf	main@writeValue& (0+255),b
   706  00105A  0E00               	movlw	0
   707  00105C  6FA4               	movwf	(main@writeValue+1)& (0+255),b
   708  00105E  0E00               	movlw	0
   709  001060  6FA5               	movwf	(main@writeValue+2)& (0+255),b
   710  001062  0E00               	movlw	0
   711  001064  6FA6               	movwf	(main@writeValue+3)& (0+255),b
   712                           
   713                           ; BSR set to: 0
   714                           ;test.c: 83: unsigned int mode = READ_MODE;
   715  001066  0E0F               	movlw	low _READ_MODE
   716  001068  6EF6               	movwf	tblptrl,c
   717  00106A                     	if	1	;There is more than 1 active tblptr byte
   718  00106A  0E10               	movlw	high _READ_MODE
   719  00106C  6EF7               	movwf	tblptrh,c
   720  00106E                     	endif
   721  00106E                     	if	1	;There are 3 active tblptr bytes
   722  00106E  0E00               	movlw	low (_READ_MODE shr (0+16))
   723  001070  6EF8               	movwf	tblptru,c
   724  001072                     	endif
   725  001072  0009               	tblrd		*+
   726  001074  CFF5 F0A9          	movff	tablat,main@mode
   727  001078  000A               	tblrd		*-
   728  00107A  CFF5 F0AA          	movff	tablat,main@mode+1
   729                           
   730                           ; BSR set to: 0
   731                           ;test.c: 84: unsigned char prevKey = 0xFF;
   732  00107E  0100               	movlb	0	; () banked
   733  001080  69A0               	setf	main@prevKey& (0+255),b
   734  001082                     l2555:
   735                           
   736                           ;test.c: 88: int keyNo = Read_KeyPad();
   737  001082  ECB3  F00D         	call	_Read_KeyPad	;wreg free
   738  001086  0100               	movlb	0	; () banked
   739  001088  6F9A               	movwf	??_main& (0+255),b
   740  00108A  0100               	movlb	0	; () banked
   741  00108C  519A               	movf	??_main& (0+255),w,b
   742  00108E  0100               	movlb	0	; () banked
   743  001090  6FA1               	movwf	main@keyNo& (0+255),b
   744  001092  6BA2               	clrf	(main@keyNo+1)& (0+255),b
   745                           
   746                           ; BSR set to: 0
   747                           ;test.c: 89: unsigned char key = keyValues[keyNo];
   748  001094  0EAB               	movlw	low _keyValues
   749  001096  0100               	movlb	0	; () banked
   750  001098  25A1               	addwf	main@keyNo& (0+255),w,b
   751  00109A  6ED9               	movwf	fsr2l,c
   752  00109C  0E00               	movlw	high _keyValues
   753  00109E  0100               	movlb	0	; () banked
   754  0010A0  21A2               	addwfc	(main@keyNo+1)& (0+255),w,b
   755  0010A2  6EDA               	movwf	fsr2h,c
   756  0010A4  50DF               	movf	indf2,w,c
   757  0010A6  0100               	movlb	0	; () banked
   758  0010A8  6FA8               	movwf	main@key& (0+255),b
   759                           
   760                           ; BSR set to: 0
   761                           ;test.c: 90: valMode = 0;
   762  0010AA  0E00               	movlw	0
   763  0010AC  0100               	movlb	0	; () banked
   764  0010AE  6F9F               	movwf	(main@valMode+1)& (0+255),b
   765  0010B0  0E00               	movlw	0
   766  0010B2  6F9E               	movwf	main@valMode& (0+255),b
   767                           
   768                           ; BSR set to: 0
   769                           ;test.c: 92: if (key != prevKey) {
   770  0010B4  0100               	movlb	0	; () banked
   771  0010B6  51A0               	movf	main@prevKey& (0+255),w,b
   772  0010B8  0100               	movlb	0	; () banked
   773  0010BA  19A8               	xorwf	main@key& (0+255),w,b
   774  0010BC  B4D8               	btfsc	status,2,c
   775  0010BE  D1C3               	goto	l2649
   776                           
   777                           ; BSR set to: 0
   778                           ;test.c: 93: PORTJ++;
   779  0010C0  2A88               	incf	3976,f,c	;volatile
   780                           
   781                           ; BSR set to: 0
   782                           ;test.c: 95: if (keyNo >= 0 && 10 > keyNo) {
   783  0010C2  0100               	movlb	0	; () banked
   784  0010C4  BFA2               	btfsc	(main@keyNo+1)& (0+255),7,b
   785  0010C6  D05A               	goto	l2575
   786                           
   787                           ; BSR set to: 0
   788  0010C8  0100               	movlb	0	; () banked
   789  0010CA  BFA2               	btfsc	(main@keyNo+1)& (0+255),7,b
   790  0010CC  D008               	goto	l2569
   791  0010CE  0100               	movlb	0	; () banked
   792  0010D0  51A2               	movf	(main@keyNo+1)& (0+255),w,b
   793  0010D2  E154               	bnz	l2575
   794  0010D4  0E0A               	movlw	10
   795  0010D6  0100               	movlb	0	; () banked
   796  0010D8  5DA1               	subwf	main@keyNo& (0+255),w,b
   797  0010DA  B0D8               	btfsc	status,0,c
   798  0010DC  D04F               	goto	l2575
   799  0010DE                     l2569:
   800                           
   801                           ; BSR set to: 0
   802                           ;test.c: 96: if (mode == READ_MODE) {
   803  0010DE  0E0F               	movlw	low _READ_MODE
   804  0010E0  6EF6               	movwf	tblptrl,c
   805  0010E2                     	if	1	;There is more than 1 active tblptr byte
   806  0010E2  0E10               	movlw	high _READ_MODE
   807  0010E4  6EF7               	movwf	tblptrh,c
   808  0010E6                     	endif
   809  0010E6                     	if	1	;There are 3 active tblptr bytes
   810  0010E6  0E00               	movlw	low (_READ_MODE shr (0+16))
   811  0010E8  6EF8               	movwf	tblptru,c
   812  0010EA                     	endif
   813  0010EA  0100               	movlb	0	; () banked
   814  0010EC  51A9               	movf	main@mode& (0+255),w,b
   815  0010EE  0009               	tblrd		*+
   816  0010F0  18F5               	xorwf	tablat,w,c
   817  0010F2  E10F               	bnz	l2573
   818  0010F4  0100               	movlb	0	; () banked
   819  0010F6  51AA               	movf	(main@mode+1)& (0+255),w,b
   820  0010F8  0009               	tblrd		*+
   821  0010FA  18F5               	xorwf	tablat,w,c
   822  0010FC  A4D8               	btfss	status,2,c
   823  0010FE  D009               	goto	l2573
   824                           
   825                           ; BSR set to: 0
   826                           ;test.c: 97: address = address * 10 + keyNo;
   827  001100  0100               	movlb	0	; () banked
   828  001102  51A7               	movf	main@address& (0+255),w,b
   829  001104  0D0A               	mullw	10
   830  001106  50F3               	movf	prodl,w,c
   831  001108  0100               	movlb	0	; () banked
   832  00110A  25A1               	addwf	main@keyNo& (0+255),w,b
   833  00110C  0100               	movlb	0	; () banked
   834  00110E  6FA7               	movwf	main@address& (0+255),b
   835                           
   836                           ;test.c: 98: } else {
   837  001110  D15B               	goto	l2633
   838  001112                     l2573:
   839                           
   840                           ; BSR set to: 0
   841                           ;test.c: 99: writeValue = writeValue * 10 + keyNo;
   842  001112  C0A1  F09A         	movff	main@keyNo,??_main
   843  001116  C0A2  F09B         	movff	main@keyNo+1,??_main+1
   844  00111A  0E00               	movlw	0
   845  00111C  0100               	movlb	0	; () banked
   846  00111E  BF9B               	btfsc	(??_main+1)& (0+255),7,b
   847  001120  0EFF               	movlw	255
   848  001122  6F9C               	movwf	(??_main+2)& (0+255),b
   849  001124  6F9D               	movwf	(??_main+3)& (0+255),b
   850  001126  C0A3  F060         	movff	main@writeValue,___lmul@multiplier
   851  00112A  C0A4  F061         	movff	main@writeValue+1,___lmul@multiplier+1
   852  00112E  C0A5  F062         	movff	main@writeValue+2,___lmul@multiplier+2
   853  001132  C0A6  F063         	movff	main@writeValue+3,___lmul@multiplier+3
   854  001136  0E0A               	movlw	10
   855  001138  0100               	movlb	0	; () banked
   856  00113A  6F64               	movwf	___lmul@multiplicand& (0+255),b
   857  00113C  0E00               	movlw	0
   858  00113E  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
   859  001140  0E00               	movlw	0
   860  001142  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
   861  001144  0E00               	movlw	0
   862  001146  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
   863  001148  ECEE  F00D         	call	___lmul	;wreg free
   864  00114C  0100               	movlb	0	; () banked
   865  00114E  519A               	movf	??_main& (0+255),w,b
   866  001150  0100               	movlb	0	; () banked
   867  001152  2560               	addwf	?___lmul& (0+255),w,b
   868  001154  0100               	movlb	0	; () banked
   869  001156  6FA3               	movwf	main@writeValue& (0+255),b
   870  001158  0100               	movlb	0	; () banked
   871  00115A  519B               	movf	(??_main+1)& (0+255),w,b
   872  00115C  0100               	movlb	0	; () banked
   873  00115E  2161               	addwfc	(?___lmul+1)& (0+255),w,b
   874  001160  0100               	movlb	0	; () banked
   875  001162  6FA4               	movwf	(main@writeValue+1)& (0+255),b
   876  001164  0100               	movlb	0	; () banked
   877  001166  519C               	movf	(??_main+2)& (0+255),w,b
   878  001168  0100               	movlb	0	; () banked
   879  00116A  2162               	addwfc	(?___lmul+2)& (0+255),w,b
   880  00116C  0100               	movlb	0	; () banked
   881  00116E  6FA5               	movwf	(main@writeValue+2)& (0+255),b
   882  001170  0100               	movlb	0	; () banked
   883  001172  519D               	movf	(??_main+3)& (0+255),w,b
   884  001174  0100               	movlb	0	; () banked
   885  001176  2163               	addwfc	(?___lmul+3)& (0+255),w,b
   886  001178  0100               	movlb	0	; () banked
   887  00117A  D032               	goto	L1
   888  00117C                     l2575:
   889                           
   890                           ; BSR set to: 0
   891  00117C  0E41               	movlw	65
   892  00117E  0100               	movlb	0	; () banked
   893  001180  19A8               	xorwf	main@key& (0+255),w,b
   894  001182  A4D8               	btfss	status,2,c
   895  001184  D02F               	goto	l2585
   896                           
   897                           ; BSR set to: 0
   898                           ;test.c: 103: if (mode == READ_MODE) { address = 0; }
   899  001186  0E0F               	movlw	low _READ_MODE
   900  001188  6EF6               	movwf	tblptrl,c
   901  00118A                     	if	1	;There is more than 1 active tblptr byte
   902  00118A  0E10               	movlw	high _READ_MODE
   903  00118C  6EF7               	movwf	tblptrh,c
   904  00118E                     	endif
   905  00118E                     	if	1	;There are 3 active tblptr bytes
   906  00118E  0E00               	movlw	low (_READ_MODE shr (0+16))
   907  001190  6EF8               	movwf	tblptru,c
   908  001192                     	endif
   909  001192  0100               	movlb	0	; () banked
   910  001194  51A9               	movf	main@mode& (0+255),w,b
   911  001196  0009               	tblrd		*+
   912  001198  18F5               	xorwf	tablat,w,c
   913  00119A  E109               	bnz	l2581
   914  00119C  0100               	movlb	0	; () banked
   915  00119E  51AA               	movf	(main@mode+1)& (0+255),w,b
   916  0011A0  0009               	tblrd		*+
   917  0011A2  18F5               	xorwf	tablat,w,c
   918  0011A4  A4D8               	btfss	status,2,c
   919  0011A6  D003               	goto	l2581
   920                           
   921                           ; BSR set to: 0
   922  0011A8  0E00               	movlw	0
   923  0011AA  0100               	movlb	0	; () banked
   924  0011AC  6FA7               	movwf	main@address& (0+255),b
   925  0011AE                     l2581:
   926                           
   927                           ; BSR set to: 0
   928                           ;test.c: 104: if (mode == WRITE_MODE) { writeValue = 0; }
   929  0011AE  0E11               	movlw	low _WRITE_MODE
   930  0011B0  6EF6               	movwf	tblptrl,c
   931  0011B2                     	if	1	;There is more than 1 active tblptr byte
   932  0011B2  0E10               	movlw	high _WRITE_MODE
   933  0011B4  6EF7               	movwf	tblptrh,c
   934  0011B6                     	endif
   935  0011B6                     	if	1	;There are 3 active tblptr bytes
   936  0011B6  0E00               	movlw	low (_WRITE_MODE shr (0+16))
   937  0011B8  6EF8               	movwf	tblptru,c
   938  0011BA                     	endif
   939  0011BA  0100               	movlb	0	; () banked
   940  0011BC  51A9               	movf	main@mode& (0+255),w,b
   941  0011BE  0009               	tblrd		*+
   942  0011C0  18F5               	xorwf	tablat,w,c
   943  0011C2  E105               	bnz	u1921
   944  0011C4  0100               	movlb	0	; () banked
   945  0011C6  51AA               	movf	(main@mode+1)& (0+255),w,b
   946  0011C8  0009               	tblrd		*+
   947  0011CA  18F5               	xorwf	tablat,w,c
   948  0011CC  A4D8               	btfss	status,2,c
   949  0011CE                     u1921:
   950  0011CE  D0FC               	goto	l2633
   951                           
   952                           ; BSR set to: 0
   953  0011D0  0E00               	movlw	0
   954  0011D2  0100               	movlb	0	; () banked
   955  0011D4  6FA3               	movwf	main@writeValue& (0+255),b
   956  0011D6  0E00               	movlw	0
   957  0011D8  6FA4               	movwf	(main@writeValue+1)& (0+255),b
   958  0011DA  0E00               	movlw	0
   959  0011DC  6FA5               	movwf	(main@writeValue+2)& (0+255),b
   960  0011DE  0E00               	movlw	0
   961  0011E0                     L1:
   962  0011E0  6FA6               	movwf	(main@writeValue+3)& (0+255),b
   963                           
   964                           ; BSR set to: 0
   965                           ;test.c: 106: } else if (key == 'B') {
   966  0011E2  D0F2               	goto	l2633
   967  0011E4                     l2585:
   968                           
   969                           ; BSR set to: 0
   970  0011E4  0E42               	movlw	66
   971  0011E6  0100               	movlb	0	; () banked
   972  0011E8  19A8               	xorwf	main@key& (0+255),w,b
   973  0011EA  A4D8               	btfss	status,2,c
   974  0011EC  D02C               	goto	l2595
   975                           
   976                           ; BSR set to: 0
   977                           ;test.c: 107: if (mode == READ_MODE) { address++; }
   978  0011EE  0E0F               	movlw	low _READ_MODE
   979  0011F0  6EF6               	movwf	tblptrl,c
   980  0011F2                     	if	1	;There is more than 1 active tblptr byte
   981  0011F2  0E10               	movlw	high _READ_MODE
   982  0011F4  6EF7               	movwf	tblptrh,c
   983  0011F6                     	endif
   984  0011F6                     	if	1	;There are 3 active tblptr bytes
   985  0011F6  0E00               	movlw	low (_READ_MODE shr (0+16))
   986  0011F8  6EF8               	movwf	tblptru,c
   987  0011FA                     	endif
   988  0011FA  0100               	movlb	0	; () banked
   989  0011FC  51A9               	movf	main@mode& (0+255),w,b
   990  0011FE  0009               	tblrd		*+
   991  001200  18F5               	xorwf	tablat,w,c
   992  001202  E108               	bnz	l2591
   993  001204  0100               	movlb	0	; () banked
   994  001206  51AA               	movf	(main@mode+1)& (0+255),w,b
   995  001208  0009               	tblrd		*+
   996  00120A  18F5               	xorwf	tablat,w,c
   997  00120C  A4D8               	btfss	status,2,c
   998  00120E  D002               	goto	l2591
   999                           
  1000                           ; BSR set to: 0
  1001  001210  0100               	movlb	0	; () banked
  1002  001212  2BA7               	incf	main@address& (0+255),f,b
  1003  001214                     l2591:
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;test.c: 108: if (mode == WRITE_MODE) { writeValue++; }
  1007  001214  0E11               	movlw	low _WRITE_MODE
  1008  001216  6EF6               	movwf	tblptrl,c
  1009  001218                     	if	1	;There is more than 1 active tblptr byte
  1010  001218  0E10               	movlw	high _WRITE_MODE
  1011  00121A  6EF7               	movwf	tblptrh,c
  1012  00121C                     	endif
  1013  00121C                     	if	1	;There are 3 active tblptr bytes
  1014  00121C  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1015  00121E  6EF8               	movwf	tblptru,c
  1016  001220                     	endif
  1017  001220  0100               	movlb	0	; () banked
  1018  001222  51A9               	movf	main@mode& (0+255),w,b
  1019  001224  0009               	tblrd		*+
  1020  001226  18F5               	xorwf	tablat,w,c
  1021  001228  E105               	bnz	u1951
  1022  00122A  0100               	movlb	0	; () banked
  1023  00122C  51AA               	movf	(main@mode+1)& (0+255),w,b
  1024  00122E  0009               	tblrd		*+
  1025  001230  18F5               	xorwf	tablat,w,c
  1026  001232  A4D8               	btfss	status,2,c
  1027  001234                     u1951:
  1028  001234  D0C9               	goto	l2633
  1029                           
  1030                           ; BSR set to: 0
  1031  001236  0E01               	movlw	1
  1032  001238  0100               	movlb	0	; () banked
  1033  00123A  27A3               	addwf	main@writeValue& (0+255),f,b
  1034  00123C  0E00               	movlw	0
  1035  00123E  23A4               	addwfc	(main@writeValue+1)& (0+255),f,b
  1036  001240  23A5               	addwfc	(main@writeValue+2)& (0+255),f,b
  1037  001242  23A6               	addwfc	(main@writeValue+3)& (0+255),f,b
  1038                           
  1039                           ; BSR set to: 0
  1040                           ;test.c: 110: } else if (key == 'C') {
  1041  001244  D0C1               	goto	l2633
  1042  001246                     l2595:
  1043                           
  1044                           ; BSR set to: 0
  1045  001246  0E43               	movlw	67
  1046  001248  0100               	movlb	0	; () banked
  1047  00124A  19A8               	xorwf	main@key& (0+255),w,b
  1048  00124C  A4D8               	btfss	status,2,c
  1049  00124E  D02B               	goto	l2605
  1050                           
  1051                           ; BSR set to: 0
  1052                           ;test.c: 111: if (mode == READ_MODE) { address--; }
  1053  001250  0E0F               	movlw	low _READ_MODE
  1054  001252  6EF6               	movwf	tblptrl,c
  1055  001254                     	if	1	;There is more than 1 active tblptr byte
  1056  001254  0E10               	movlw	high _READ_MODE
  1057  001256  6EF7               	movwf	tblptrh,c
  1058  001258                     	endif
  1059  001258                     	if	1	;There are 3 active tblptr bytes
  1060  001258  0E00               	movlw	low (_READ_MODE shr (0+16))
  1061  00125A  6EF8               	movwf	tblptru,c
  1062  00125C                     	endif
  1063  00125C  0100               	movlb	0	; () banked
  1064  00125E  51A9               	movf	main@mode& (0+255),w,b
  1065  001260  0009               	tblrd		*+
  1066  001262  18F5               	xorwf	tablat,w,c
  1067  001264  E108               	bnz	l2601
  1068  001266  0100               	movlb	0	; () banked
  1069  001268  51AA               	movf	(main@mode+1)& (0+255),w,b
  1070  00126A  0009               	tblrd		*+
  1071  00126C  18F5               	xorwf	tablat,w,c
  1072  00126E  A4D8               	btfss	status,2,c
  1073  001270  D002               	goto	l2601
  1074                           
  1075                           ; BSR set to: 0
  1076  001272  0100               	movlb	0	; () banked
  1077  001274  07A7               	decf	main@address& (0+255),f,b
  1078  001276                     l2601:
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;test.c: 112: if (mode == WRITE_MODE) { writeValue--; }
  1082  001276  0E11               	movlw	low _WRITE_MODE
  1083  001278  6EF6               	movwf	tblptrl,c
  1084  00127A                     	if	1	;There is more than 1 active tblptr byte
  1085  00127A  0E10               	movlw	high _WRITE_MODE
  1086  00127C  6EF7               	movwf	tblptrh,c
  1087  00127E                     	endif
  1088  00127E                     	if	1	;There are 3 active tblptr bytes
  1089  00127E  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1090  001280  6EF8               	movwf	tblptru,c
  1091  001282                     	endif
  1092  001282  0100               	movlb	0	; () banked
  1093  001284  51A9               	movf	main@mode& (0+255),w,b
  1094  001286  0009               	tblrd		*+
  1095  001288  18F5               	xorwf	tablat,w,c
  1096  00128A  E105               	bnz	u1981
  1097  00128C  0100               	movlb	0	; () banked
  1098  00128E  51AA               	movf	(main@mode+1)& (0+255),w,b
  1099  001290  0009               	tblrd		*+
  1100  001292  18F5               	xorwf	tablat,w,c
  1101  001294  A4D8               	btfss	status,2,c
  1102  001296                     u1981:
  1103  001296  D098               	goto	l2633
  1104                           
  1105                           ; BSR set to: 0
  1106  001298  0100               	movlb	0	; () banked
  1107  00129A  07A3               	decf	main@writeValue& (0+255),f,b
  1108  00129C  0E00               	movlw	0
  1109  00129E  5BA4               	subwfb	(main@writeValue+1)& (0+255),f,b
  1110  0012A0  5BA5               	subwfb	(main@writeValue+2)& (0+255),f,b
  1111  0012A2  5BA6               	subwfb	(main@writeValue+3)& (0+255),f,b
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;test.c: 114: } else if (key == 'D') {
  1115  0012A4  D091               	goto	l2633
  1116  0012A6                     l2605:
  1117                           
  1118                           ; BSR set to: 0
  1119  0012A6  0E44               	movlw	68
  1120  0012A8  0100               	movlb	0	; () banked
  1121  0012AA  19A8               	xorwf	main@key& (0+255),w,b
  1122  0012AC  A4D8               	btfss	status,2,c
  1123  0012AE  D035               	goto	l2615
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;test.c: 115: if (mode == READ_MODE) { mode = WRITE_MODE; }
  1127  0012B0  0E0F               	movlw	low _READ_MODE
  1128  0012B2  6EF6               	movwf	tblptrl,c
  1129  0012B4                     	if	1	;There is more than 1 active tblptr byte
  1130  0012B4  0E10               	movlw	high _READ_MODE
  1131  0012B6  6EF7               	movwf	tblptrh,c
  1132  0012B8                     	endif
  1133  0012B8                     	if	1	;There are 3 active tblptr bytes
  1134  0012B8  0E00               	movlw	low (_READ_MODE shr (0+16))
  1135  0012BA  6EF8               	movwf	tblptru,c
  1136  0012BC                     	endif
  1137  0012BC  0100               	movlb	0	; () banked
  1138  0012BE  51A9               	movf	main@mode& (0+255),w,b
  1139  0012C0  0009               	tblrd		*+
  1140  0012C2  18F5               	xorwf	tablat,w,c
  1141  0012C4  E10C               	bnz	l2611
  1142  0012C6  0100               	movlb	0	; () banked
  1143  0012C8  51AA               	movf	(main@mode+1)& (0+255),w,b
  1144  0012CA  0009               	tblrd		*+
  1145  0012CC  18F5               	xorwf	tablat,w,c
  1146  0012CE  A4D8               	btfss	status,2,c
  1147  0012D0  D006               	goto	l2611
  1148                           
  1149                           ; BSR set to: 0
  1150  0012D2  0E11               	movlw	low _WRITE_MODE
  1151  0012D4  6EF6               	movwf	tblptrl,c
  1152  0012D6                     	if	1	;There is more than 1 active tblptr byte
  1153  0012D6  0E10               	movlw	high _WRITE_MODE
  1154  0012D8  6EF7               	movwf	tblptrh,c
  1155  0012DA                     	endif
  1156  0012DA                     	if	1	;There are 3 active tblptr bytes
  1157  0012DA  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1158  0012DC  D016               	goto	L2
  1159  0012DE                     l2611:
  1160                           
  1161                           ; BSR set to: 0
  1162                           ;test.c: 116: else if (mode == WRITE_MODE) { mode = READ_MODE; }
  1163  0012DE  0E11               	movlw	low _WRITE_MODE
  1164  0012E0  6EF6               	movwf	tblptrl,c
  1165  0012E2                     	if	1	;There is more than 1 active tblptr byte
  1166  0012E2  0E10               	movlw	high _WRITE_MODE
  1167  0012E4  6EF7               	movwf	tblptrh,c
  1168  0012E6                     	endif
  1169  0012E6                     	if	1	;There are 3 active tblptr bytes
  1170  0012E6  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1171  0012E8  6EF8               	movwf	tblptru,c
  1172  0012EA                     	endif
  1173  0012EA  0100               	movlb	0	; () banked
  1174  0012EC  51A9               	movf	main@mode& (0+255),w,b
  1175  0012EE  0009               	tblrd		*+
  1176  0012F0  18F5               	xorwf	tablat,w,c
  1177  0012F2  E16A               	bnz	l2633
  1178  0012F4  0100               	movlb	0	; () banked
  1179  0012F6  51AA               	movf	(main@mode+1)& (0+255),w,b
  1180  0012F8  0009               	tblrd		*+
  1181  0012FA  18F5               	xorwf	tablat,w,c
  1182  0012FC  A4D8               	btfss	status,2,c
  1183  0012FE  D064               	goto	l2633
  1184                           
  1185                           ; BSR set to: 0
  1186  001300  0E0F               	movlw	low _READ_MODE
  1187  001302  6EF6               	movwf	tblptrl,c
  1188  001304                     	if	1	;There is more than 1 active tblptr byte
  1189  001304  0E10               	movlw	high _READ_MODE
  1190  001306  6EF7               	movwf	tblptrh,c
  1191  001308                     	endif
  1192  001308                     	if	1	;There are 3 active tblptr bytes
  1193  001308  0E00               	movlw	low (_READ_MODE shr (0+16))
  1194  00130A                     L2:
  1195  00130A  6EF8               	movwf	tblptru,c
  1196  00130C                     	endif
  1197  00130C  0009               	tblrd		*+
  1198  00130E  CFF5 F0A9          	movff	tablat,main@mode
  1199  001312  000A               	tblrd		*-
  1200  001314  CFF5 F0AA          	movff	tablat,main@mode+1
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;test.c: 118: } else if (key == '#') {
  1204                           
  1205                           ; BSR set to: 0
  1206  001318  D057               	goto	l2633
  1207  00131A                     l2615:
  1208                           
  1209                           ; BSR set to: 0
  1210  00131A  0E23               	movlw	35
  1211  00131C  0100               	movlb	0	; () banked
  1212  00131E  19A8               	xorwf	main@key& (0+255),w,b
  1213  001320  A4D8               	btfss	status,2,c
  1214  001322  D029               	goto	l2623
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;test.c: 119: if (mode == WRITE_MODE) {
  1218  001324  0E11               	movlw	low _WRITE_MODE
  1219  001326  6EF6               	movwf	tblptrl,c
  1220  001328                     	if	1	;There is more than 1 active tblptr byte
  1221  001328  0E10               	movlw	high _WRITE_MODE
  1222  00132A  6EF7               	movwf	tblptrh,c
  1223  00132C                     	endif
  1224  00132C                     	if	1	;There are 3 active tblptr bytes
  1225  00132C  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1226  00132E  6EF8               	movwf	tblptru,c
  1227  001330                     	endif
  1228  001330  0100               	movlb	0	; () banked
  1229  001332  51A9               	movf	main@mode& (0+255),w,b
  1230  001334  0009               	tblrd		*+
  1231  001336  18F5               	xorwf	tablat,w,c
  1232  001338  E118               	bnz	l2621
  1233  00133A  0100               	movlb	0	; () banked
  1234  00133C  51AA               	movf	(main@mode+1)& (0+255),w,b
  1235  00133E  0009               	tblrd		*+
  1236  001340  18F5               	xorwf	tablat,w,c
  1237  001342  A4D8               	btfss	status,2,c
  1238  001344  D012               	goto	l2621
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;test.c: 120: ee_write_num(address, writeValue);
  1242  001346  C0A3  F06D         	movff	main@writeValue,ee_write_num@number
  1243  00134A  C0A4  F06E         	movff	main@writeValue+1,ee_write_num@number+1
  1244  00134E  C0A5  F06F         	movff	main@writeValue+2,ee_write_num@number+2
  1245  001352  C0A6  F070         	movff	main@writeValue+3,ee_write_num@number+3
  1246  001356  0100               	movlb	0	; () banked
  1247  001358  51A7               	movf	main@address& (0+255),w,b
  1248  00135A  EC81  F00C         	call	_ee_write_num
  1249                           
  1250                           ;test.c: 121: delay_ms(100);
  1251  00135E  0E00               	movlw	0
  1252  001360  6E21               	movwf	delay_ms@x+1,c
  1253  001362  0E64               	movlw	100
  1254  001364  6E20               	movwf	delay_ms@x,c
  1255  001366  EC16  F00F         	call	_delay_ms	;wreg free
  1256  00136A                     l2621:
  1257                           
  1258                           ;test.c: 122: }
  1259                           ;test.c: 124: valMode = 1;
  1260  00136A  0E00               	movlw	0
  1261  00136C  0100               	movlb	0	; () banked
  1262  00136E  6F9F               	movwf	(main@valMode+1)& (0+255),b
  1263  001370  0E01               	movlw	1
  1264  001372  6F9E               	movwf	main@valMode& (0+255),b
  1265                           
  1266                           ;test.c: 126: } else if (key == '*' && mode == WRITE_MODE) {
  1267  001374  D029               	goto	l2633
  1268  001376                     l2623:
  1269                           
  1270                           ; BSR set to: 0
  1271  001376  0E2A               	movlw	42
  1272  001378  0100               	movlb	0	; () banked
  1273  00137A  19A8               	xorwf	main@key& (0+255),w,b
  1274  00137C  A4D8               	btfss	status,2,c
  1275  00137E  D024               	goto	l2633
  1276                           
  1277                           ; BSR set to: 0
  1278  001380  0E11               	movlw	low _WRITE_MODE
  1279  001382  6EF6               	movwf	tblptrl,c
  1280  001384                     	if	1	;There is more than 1 active tblptr byte
  1281  001384  0E10               	movlw	high _WRITE_MODE
  1282  001386  6EF7               	movwf	tblptrh,c
  1283  001388                     	endif
  1284  001388                     	if	1	;There are 3 active tblptr bytes
  1285  001388  0E00               	movlw	low (_WRITE_MODE shr (0+16))
  1286  00138A  6EF8               	movwf	tblptru,c
  1287  00138C                     	endif
  1288  00138C  0100               	movlb	0	; () banked
  1289  00138E  51A9               	movf	main@mode& (0+255),w,b
  1290  001390  0009               	tblrd		*+
  1291  001392  18F5               	xorwf	tablat,w,c
  1292  001394  E119               	bnz	l2633
  1293  001396  0100               	movlb	0	; () banked
  1294  001398  51AA               	movf	(main@mode+1)& (0+255),w,b
  1295  00139A  0009               	tblrd		*+
  1296  00139C  18F5               	xorwf	tablat,w,c
  1297  00139E  A4D8               	btfss	status,2,c
  1298  0013A0  D013               	goto	l2633
  1299                           
  1300                           ; BSR set to: 0
  1301                           ;test.c: 127: ee_write_char(address, writeValue++);
  1302  0013A2  C0A3  F068         	movff	main@writeValue,ee_write_char@chunk
  1303  0013A6  0100               	movlb	0	; () banked
  1304  0013A8  51A7               	movf	main@address& (0+255),w,b
  1305  0013AA  ECA6  F00F         	call	_ee_write_char
  1306  0013AE  0E01               	movlw	1
  1307  0013B0  0100               	movlb	0	; () banked
  1308  0013B2  27A3               	addwf	main@writeValue& (0+255),f,b
  1309  0013B4  0E00               	movlw	0
  1310  0013B6  23A4               	addwfc	(main@writeValue+1)& (0+255),f,b
  1311  0013B8  23A5               	addwfc	(main@writeValue+2)& (0+255),f,b
  1312  0013BA  23A6               	addwfc	(main@writeValue+3)& (0+255),f,b
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;test.c: 128: delay_ms(100);
  1316  0013BC  0E00               	movlw	0
  1317  0013BE  6E21               	movwf	delay_ms@x+1,c
  1318  0013C0  0E64               	movlw	100
  1319  0013C2  6E20               	movwf	delay_ms@x,c
  1320  0013C4  EC16  F00F         	call	_delay_ms	;wreg free
  1321  0013C8                     l2633:
  1322                           
  1323                           ;test.c: 130: }
  1324                           ;test.c: 133: writeLCD(address, valMode);
  1325  0013C8  C09E  F090         	movff	main@valMode,writeLCD@valMode
  1326  0013CC  C09F  F091         	movff	main@valMode+1,writeLCD@valMode+1
  1327  0013D0  0100               	movlb	0	; () banked
  1328  0013D2  51A7               	movf	main@address& (0+255),w,b
  1329  0013D4  ECF4  F00A         	call	_writeLCD
  1330                           
  1331                           ;test.c: 136: LCD8send(0xC0, 0);
  1332  0013D8  0E00               	movlw	0
  1333  0013DA  6E23               	movwf	LCD8send@mode,c
  1334  0013DC  0EC0               	movlw	192
  1335  0013DE  ECF8  F00E         	call	_LCD8send
  1336                           
  1337                           ;test.c: 137: LCD8send("WR"[mode], 1);
  1338  0013E2  0E01               	movlw	1
  1339  0013E4  6E23               	movwf	LCD8send@mode,c
  1340  0013E6  0E22               	movlw	low STR_6
  1341  0013E8  0100               	movlb	0	; () banked
  1342  0013EA  25A9               	addwf	main@mode& (0+255),w,b
  1343  0013EC  6EF6               	movwf	tblptrl,c
  1344  0013EE  0E10               	movlw	high STR_6
  1345  0013F0  21AA               	addwfc	(main@mode+1)& (0+255),w,b
  1346  0013F2  6EF7               	movwf	tblptrh,c
  1347  0013F4                     	if	1	;There are 3 active tblptr bytes
  1348  0013F4  6AF8               	clrf	tblptru,c
  1349  0013F6  0E00               	movlw	low (__mediumconst shr (0+16))
  1350  0013F8  22F8               	addwfc	tblptru,f,c
  1351  0013FA                     	endif
  1352  0013FA  0008               	tblrd		*
  1353  0013FC  50F5               	movf	tablat,w,c
  1354  0013FE  ECF8  F00E         	call	_LCD8send
  1355                           
  1356                           ;test.c: 138: lcdWriteLine(" key=");
  1357  001402  0E19               	movlw	low STR_7
  1358  001404  0100               	movlb	0	; () banked
  1359  001406  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1360  001408  0E10               	movlw	high STR_7
  1361  00140A  0100               	movlb	0	; () banked
  1362  00140C  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1363  00140E  ECD5  F00C         	call	_lcdWriteLine	;wreg free
  1364                           
  1365                           ;test.c: 140: LCD8send(key, 1);
  1366  001412  0E01               	movlw	1
  1367  001414  6E23               	movwf	LCD8send@mode,c
  1368  001416  0100               	movlb	0	; () banked
  1369  001418  51A8               	movf	main@key& (0+255),w,b
  1370  00141A  ECF8  F00E         	call	_LCD8send
  1371                           
  1372                           ;test.c: 141: lcdWriteLine(" val=");
  1373  00141E  0E13               	movlw	low STR_8
  1374  001420  0100               	movlb	0	; () banked
  1375  001422  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1376  001424  0E10               	movlw	high STR_8
  1377  001426  0100               	movlb	0	; () banked
  1378  001428  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1379  00142A  ECD5  F00C         	call	_lcdWriteLine	;wreg free
  1380                           
  1381                           ;test.c: 142: writeNum(writeValue);
  1382  00142E  C0A3  F078         	movff	main@writeValue,writeNum@number
  1383  001432  C0A4  F079         	movff	main@writeValue+1,writeNum@number+1
  1384  001436  C0A5  F07A         	movff	main@writeValue+2,writeNum@number+2
  1385  00143A  C0A6  F07B         	movff	main@writeValue+3,writeNum@number+3
  1386  00143E  ECD9  F00E         	call	_writeNum	;wreg free
  1387                           
  1388                           ;test.c: 144: prevKey = key;
  1389  001442  C0A8  F0A0         	movff	main@key,main@prevKey
  1390  001446                     l2649:
  1391                           
  1392                           ;test.c: 145: }
  1393                           ;test.c: 147: delay_ms(100);
  1394  001446  0E00               	movlw	0
  1395  001448  6E21               	movwf	delay_ms@x+1,c
  1396  00144A  0E64               	movlw	100
  1397  00144C  6E20               	movwf	delay_ms@x,c
  1398  00144E  EC16  F00F         	call	_delay_ms	;wreg free
  1399  001452  D617               	goto	l2555
  1400  001454                     __end_of_main:
  1401                           	opt stack 0
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           prodl	equ	0xFF3
  1407                           postinc0	equ	0xFEE
  1408                           postdec1	equ	0xFE5
  1409                           fsr1l	equ	0xFE1
  1410                           indf2	equ	0xFDF
  1411                           fsr2h	equ	0xFDA
  1412                           fsr2l	equ	0xFD9
  1413                           status	equ	0xFD8
  1414                           
  1415 ;; *************** function _writeLCD *****************
  1416 ;; Defined at:
  1417 ;;		line 48 in file "test.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;  address         1    wreg     unsigned char 
  1420 ;;  valMode         2   48[BANK0 ] unsigned int 
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;  address         1   57[BANK0 ] unsigned char 
  1423 ;;  num             4   51[BANK0 ] unsigned long 
  1424 ;;  data            2   55[BANK0 ] PTR unsigned char 
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1434 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1435 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1437 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1438 ;;Total ram usage:       10 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    6
  1441 ;; This function calls:
  1442 ;;		_LCD8send
  1443 ;;		_ee_read_char
  1444 ;;		_ee_read_num
  1445 ;;		_lcdWriteLine
  1446 ;;		_writeNum
  1447 ;; This function is called by:
  1448 ;;		_main
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text1
  1453  0015E8                     __ptext1:
  1454                           	opt stack 0
  1455  0015E8                     _writeLCD:
  1456                           	opt stack 24
  1457                           
  1458                           ;incstack = 0
  1459                           ;writeLCD@address stored from wreg
  1460  0015E8  0100               	movlb	0	; () banked
  1461  0015EA  6F99               	movwf	writeLCD@address& (0+255),b
  1462                           
  1463                           ;test.c: 49: LCD8send(0x01, 0);
  1464  0015EC  0E00               	movlw	0
  1465  0015EE  6E23               	movwf	LCD8send@mode,c
  1466  0015F0  0E01               	movlw	1
  1467  0015F2  ECF8  F00E         	call	_LCD8send
  1468                           
  1469                           ;test.c: 50: unsigned char *data;
  1470                           ;test.c: 52: if (valMode == 0) {
  1471  0015F6  0100               	movlb	0	; () banked
  1472  0015F8  5190               	movf	writeLCD@valMode& (0+255),w,b
  1473  0015FA  0100               	movlb	0	; () banked
  1474  0015FC  1191               	iorwf	(writeLCD@valMode+1)& (0+255),w,b
  1475  0015FE  A4D8               	btfss	status,2,c
  1476  001600  D032               	goto	l2493
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;test.c: 53: ee_read_char(address, data);
  1480  001602  C097  F060         	movff	writeLCD@data,ee_read_char@_data
  1481  001606  C098  F061         	movff	writeLCD@data+1,ee_read_char@_data+1
  1482  00160A  0100               	movlb	0	; () banked
  1483  00160C  5199               	movf	writeLCD@address& (0+255),w,b
  1484  00160E  EC93  F00F         	call	_ee_read_char
  1485                           
  1486                           ;test.c: 54: lcdWriteLine("#");
  1487  001612  0E2B               	movlw	low STR_2
  1488  001614  0100               	movlb	0	; () banked
  1489  001616  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1490  001618  0E10               	movlw	high STR_2
  1491  00161A  0100               	movlb	0	; () banked
  1492  00161C  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1493  00161E  ECD5  F00C         	call	_lcdWriteLine	;wreg free
  1494                           
  1495                           ;test.c: 55: writeNum(address);
  1496  001622  0100               	movlb	0	; () banked
  1497  001624  5199               	movf	writeLCD@address& (0+255),w,b
  1498  001626  0100               	movlb	0	; () banked
  1499  001628  6F78               	movwf	writeNum@number& (0+255),b
  1500  00162A  6B79               	clrf	(writeNum@number+1)& (0+255),b
  1501  00162C  6B7A               	clrf	(writeNum@number+2)& (0+255),b
  1502  00162E  6B7B               	clrf	(writeNum@number+3)& (0+255),b
  1503  001630  ECD9  F00E         	call	_writeNum	;wreg free
  1504                           
  1505                           ;test.c: 57: lcdWriteLine(" V");
  1506  001634  0E25               	movlw	low STR_3
  1507  001636  0100               	movlb	0	; () banked
  1508  001638  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1509  00163A  0E10               	movlw	high STR_3
  1510  00163C  0100               	movlb	0	; () banked
  1511  00163E  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1512  001640  ECD5  F00C         	call	_lcdWriteLine	;wreg free
  1513                           
  1514                           ;test.c: 58: writeNum(*data);
  1515  001644  C097  FFD9         	movff	writeLCD@data,fsr2l
  1516  001648  C098  FFDA         	movff	writeLCD@data+1,fsr2h
  1517  00164C  50DF               	movf	indf2,w,c
  1518  00164E  0100               	movlb	0	; () banked
  1519  001650  6F92               	movwf	??_writeLCD& (0+255),b
  1520  001652  0100               	movlb	0	; () banked
  1521  001654  5192               	movf	??_writeLCD& (0+255),w,b
  1522  001656  0100               	movlb	0	; () banked
  1523  001658  6F78               	movwf	writeNum@number& (0+255),b
  1524  00165A  6B79               	clrf	(writeNum@number+1)& (0+255),b
  1525  00165C  6B7A               	clrf	(writeNum@number+2)& (0+255),b
  1526  00165E  6B7B               	clrf	(writeNum@number+3)& (0+255),b
  1527  001660  ECD9  F00E         	call	_writeNum	;wreg free
  1528                           
  1529                           ;test.c: 60: } else if (valMode == 1) {
  1530  001664  0012               	return	
  1531  001666                     l2493:
  1532  001666  0100               	movlb	0	; () banked
  1533  001668  0590               	decf	writeLCD@valMode& (0+255),w,b
  1534  00166A  0100               	movlb	0	; () banked
  1535  00166C  1191               	iorwf	(writeLCD@valMode+1)& (0+255),w,b
  1536  00166E  A4D8               	btfss	status,2,c
  1537  001670  0012               	return	
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;test.c: 61: unsigned long num = ee_read_num(address);
  1541  001672  0100               	movlb	0	; () banked
  1542  001674  5199               	movf	writeLCD@address& (0+255),w,b
  1543  001676  EC26  F00C         	call	_ee_read_num
  1544  00167A  C068  F093         	movff	?_ee_read_num,writeLCD@num
  1545  00167E  C069  F094         	movff	?_ee_read_num+1,writeLCD@num+1
  1546  001682  C06A  F095         	movff	?_ee_read_num+2,writeLCD@num+2
  1547  001686  C06B  F096         	movff	?_ee_read_num+3,writeLCD@num+3
  1548                           
  1549                           ;test.c: 62: lcdWriteLine("#");
  1550  00168A  0E2B               	movlw	low STR_2
  1551  00168C  0100               	movlb	0	; () banked
  1552  00168E  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1553  001690  0E10               	movlw	high STR_2
  1554  001692  0100               	movlb	0	; () banked
  1555  001694  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1556  001696  ECD5  F00C         	call	_lcdWriteLine	;wreg free
  1557                           
  1558                           ;test.c: 63: writeNum(address);
  1559  00169A  0100               	movlb	0	; () banked
  1560  00169C  5199               	movf	writeLCD@address& (0+255),w,b
  1561  00169E  0100               	movlb	0	; () banked
  1562  0016A0  6F78               	movwf	writeNum@number& (0+255),b
  1563  0016A2  6B79               	clrf	(writeNum@number+1)& (0+255),b
  1564  0016A4  6B7A               	clrf	(writeNum@number+2)& (0+255),b
  1565  0016A6  6B7B               	clrf	(writeNum@number+3)& (0+255),b
  1566  0016A8  ECD9  F00E         	call	_writeNum	;wreg free
  1567                           
  1568                           ;test.c: 65: lcdWriteLine(" N");
  1569  0016AC  0E1F               	movlw	low STR_5
  1570  0016AE  0100               	movlb	0	; () banked
  1571  0016B0  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1572  0016B2  0E10               	movlw	high STR_5
  1573  0016B4  0100               	movlb	0	; () banked
  1574  0016B6  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1575  0016B8  ECD5  F00C         	call	_lcdWriteLine	;wreg free
  1576                           
  1577                           ;test.c: 66: writeNum(num);
  1578  0016BC  C093  F078         	movff	writeLCD@num,writeNum@number
  1579  0016C0  C094  F079         	movff	writeLCD@num+1,writeNum@number+1
  1580  0016C4  C095  F07A         	movff	writeLCD@num+2,writeNum@number+2
  1581  0016C8  C096  F07B         	movff	writeLCD@num+3,writeNum@number+3
  1582  0016CC  ECD9  F00E         	call	_writeNum	;wreg free
  1583  0016D0  0012               	return	
  1584  0016D2                     __end_of_writeLCD:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           prodl	equ	0xFF3
  1591                           postinc0	equ	0xFEE
  1592                           postdec1	equ	0xFE5
  1593                           fsr1l	equ	0xFE1
  1594                           indf2	equ	0xFDF
  1595                           fsr2h	equ	0xFDA
  1596                           fsr2l	equ	0xFD9
  1597                           status	equ	0xFD8
  1598                           
  1599 ;; *************** function _writeNum *****************
  1600 ;; Defined at:
  1601 ;;		line 42 in file "test.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  number          4   24[BANK0 ] unsigned long 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  numStr         20   28[BANK0 ] unsigned char [20]
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1615 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1616 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1618 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;Total ram usage:       24 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    5
  1622 ;; This function calls:
  1623 ;;		_lcdWriteLine
  1624 ;;		_sprintf
  1625 ;; This function is called by:
  1626 ;;		_writeLCD
  1627 ;;		_main
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text2
  1632  001DB2                     __ptext2:
  1633                           	opt stack 0
  1634  001DB2                     _writeNum:
  1635                           	opt stack 25
  1636                           
  1637                           ;test.c: 43: char numStr[20];
  1638                           ;test.c: 44: sprintf(numStr, "%i", number);
  1639                           
  1640                           ;incstack = 0
  1641  001DB2  0E7C               	movlw	low writeNum@numStr
  1642  001DB4  0100               	movlb	0	; () banked
  1643  001DB6  6F68               	movwf	sprintf@sp& (0+255),b
  1644  001DB8  0E00               	movlw	high writeNum@numStr
  1645  001DBA  0100               	movlb	0	; () banked
  1646  001DBC  6F69               	movwf	(sprintf@sp+1)& (0+255),b
  1647  001DBE  0E28               	movlw	low STR_1
  1648  001DC0  0100               	movlb	0	; () banked
  1649  001DC2  6F6A               	movwf	sprintf@f& (0+255),b
  1650  001DC4  0E10               	movlw	high STR_1
  1651  001DC6  0100               	movlb	0	; () banked
  1652  001DC8  6F6B               	movwf	(sprintf@f+1)& (0+255),b
  1653  001DCA  C078  F06C         	movff	writeNum@number,?_sprintf+4
  1654  001DCE  C079  F06D         	movff	writeNum@number+1,?_sprintf+5
  1655  001DD2  C07A  F06E         	movff	writeNum@number+2,?_sprintf+6
  1656  001DD6  C07B  F06F         	movff	writeNum@number+3,?_sprintf+7
  1657  001DDA  EC2A  F00A         	call	_sprintf	;wreg free
  1658                           
  1659                           ;test.c: 45: lcdWriteLine(numStr);
  1660  001DDE  0E7C               	movlw	low writeNum@numStr
  1661  001DE0  0100               	movlb	0	; () banked
  1662  001DE2  6F63               	movwf	lcdWriteLine@data& (0+255),b
  1663  001DE4  0E00               	movlw	high writeNum@numStr
  1664  001DE6  0100               	movlb	0	; () banked
  1665  001DE8  6F64               	movwf	(lcdWriteLine@data+1)& (0+255),b
  1666  001DEA  ECD5  F00C         	call	_lcdWriteLine	;wreg free
  1667  001DEE  0012               	return		;funcret
  1668  001DF0                     __end_of_writeNum:
  1669                           	opt stack 0
  1670                           tblptru	equ	0xFF8
  1671                           tblptrh	equ	0xFF7
  1672                           tblptrl	equ	0xFF6
  1673                           tablat	equ	0xFF5
  1674                           prodl	equ	0xFF3
  1675                           postinc0	equ	0xFEE
  1676                           postdec1	equ	0xFE5
  1677                           fsr1l	equ	0xFE1
  1678                           indf2	equ	0xFDF
  1679                           fsr2h	equ	0xFDA
  1680                           fsr2l	equ	0xFD9
  1681                           status	equ	0xFD8
  1682                           
  1683 ;; *************** function _sprintf *****************
  1684 ;; Defined at:
  1685 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1686 ;; Parameters:    Size  Location     Type
  1687 ;;  sp              2    8[BANK0 ] PTR unsigned char 
  1688 ;;		 -> writeNum@numStr(20), 
  1689 ;;  f               2   10[BANK0 ] PTR const unsigned char 
  1690 ;;		 -> STR_1(3), 
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;  tmpval          4    0        struct .
  1693 ;;  cp              3    0        PTR const unsigned char 
  1694 ;;  val             2   21[BANK0 ] unsigned int 
  1695 ;;  ap              2   17[BANK0 ] PTR void [1]
  1696 ;;		 -> ?_sprintf(2), 
  1697 ;;  len             2    0        unsigned int 
  1698 ;;  c               1   23[BANK0 ] char 
  1699 ;;  prec            1   20[BANK0 ] char 
  1700 ;;  flag            1   19[BANK0 ] unsigned char 
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  2    8[BANK0 ] int 
  1703 ;; Registers used:
  1704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1710 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;Total ram usage:       16 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    3
  1717 ;; This function calls:
  1718 ;;		___lwdiv
  1719 ;;		___lwmod
  1720 ;; This function is called by:
  1721 ;;		_writeNum
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text3
  1726  001454                     __ptext3:
  1727                           	opt stack 0
  1728  001454                     _sprintf:
  1729                           	opt stack 26
  1730                           
  1731                           ;doprnt.c: 494: va_list ap;
  1732                           ;doprnt.c: 499: signed char c;
  1733                           ;doprnt.c: 506: signed char prec;
  1734                           ;doprnt.c: 508: unsigned char flag;
  1735                           ;doprnt.c: 523: union {
  1736                           ;doprnt.c: 524: unsigned long vd;
  1737                           ;doprnt.c: 525: double integ;
  1738                           ;doprnt.c: 526: } tmpval;
  1739                           ;doprnt.c: 528: unsigned int val;
  1740                           ;doprnt.c: 529: unsigned len;
  1741                           ;doprnt.c: 530: const char * cp;
  1742                           ;doprnt.c: 533: *ap = __va_start();
  1743                           
  1744                           ;incstack = 0
  1745  001454  0E6C               	movlw	low (?_sprintf+4)
  1746  001456  0100               	movlb	0	; () banked
  1747  001458  6F71               	movwf	sprintf@ap& (0+255),b
  1748  00145A  0E00               	movlw	high (?_sprintf+4)
  1749  00145C  0100               	movlb	0	; () banked
  1750  00145E  6F72               	movwf	(sprintf@ap+1)& (0+255),b
  1751                           
  1752                           ;doprnt.c: 536: while(c = *f++) {
  1753  001460  D0AC               	goto	l2281
  1754  001462                     l2229:
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;doprnt.c: 538: if(c != '%')
  1758  001462  0E25               	movlw	37
  1759  001464  0100               	movlb	0	; () banked
  1760  001466  1977               	xorwf	sprintf@c& (0+255),w,b
  1761  001468  B4D8               	btfsc	status,2,c
  1762  00146A  D00A               	goto	l2235
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;doprnt.c: 540: {
  1766                           ;doprnt.c: 541: ((*sp++ = (c)));
  1767  00146C  C068  FFD9         	movff	sprintf@sp,fsr2l
  1768  001470  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1769  001474  C077  FFDF         	movff	sprintf@c,indf2
  1770                           
  1771                           ; BSR set to: 0
  1772  001478  0100               	movlb	0	; () banked
  1773  00147A  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1774  00147C  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1775                           
  1776                           ;doprnt.c: 542: continue;
  1777  00147E  D09D               	goto	l2281
  1778  001480                     l2235:
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;doprnt.c: 543: }
  1782                           ;doprnt.c: 548: flag = 0;
  1783  001480  0E00               	movlw	0
  1784  001482  0100               	movlb	0	; () banked
  1785  001484  6F73               	movwf	sprintf@flag& (0+255),b
  1786                           
  1787                           ; BSR set to: 0
  1788                           
  1789                           ; BSR set to: 0
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;doprnt.c: 822: }
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;doprnt.c: 813: continue;
  1796                           
  1797                           ;doprnt.c: 802: default:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;doprnt.c: 698: case 'i':
  1801                           ;doprnt.c: 699: break;
  1802                           
  1803                           ; BSR set to: 0
  1804                           
  1805                           ;doprnt.c: 697: case 'd':
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;doprnt.c: 638: goto alldone;
  1809                           
  1810                           ;doprnt.c: 637: case 0:
  1811                           
  1812                           ;doprnt.c: 635: switch(c = *f++) {
  1813  001486  C06A  FFF6         	movff	sprintf@f,tblptrl
  1814  00148A  C06B  FFF7         	movff	sprintf@f+1,tblptrh
  1815  00148E  0100               	movlb	0	; () banked
  1816  001490  4B6A               	infsnz	sprintf@f& (0+255),f,b
  1817  001492  2B6B               	incf	(sprintf@f+1)& (0+255),f,b
  1818  001494                     	if	0	;tblptru may be non-zero
  1819  001494                     	endif
  1820  001494                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1821  001494  0E00               	movlw	low (__mediumconst shr (0+16))
  1822  001496  6EF8               	movwf	tblptru,c
  1823  001498                     	endif
  1824  001498  0008               	tblrd		*
  1825  00149A  CFF5 F077          	movff	tablat,sprintf@c
  1826  00149E  0100               	movlb	0	; () banked
  1827  0014A0  5177               	movf	sprintf@c& (0+255),w,b
  1828                           
  1829                           ; Switch size 1, requested type "space"
  1830                           ; Number of cases is 3, Range of values is 0 to 105
  1831                           ; switch strategies available:
  1832                           ; Name         Instructions Cycles
  1833                           ; simple_byte           10     6 (average)
  1834                           ;	Chosen strategy is simple_byte
  1835  0014A2  0A00               	xorlw	0	; case 0
  1836  0014A4  B4D8               	btfsc	status,2,c
  1837  0014A6  D099               	goto	l2283
  1838  0014A8  0A64               	xorlw	100	; case 100
  1839  0014AA  B4D8               	btfsc	status,2,c
  1840  0014AC  D003               	goto	l2241
  1841  0014AE  0A0D               	xorlw	13	; case 105
  1842  0014B0  A4D8               	btfss	status,2,c
  1843  0014B2  D083               	goto	l2281
  1844  0014B4                     l2241:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;doprnt.c: 1253: {
  1848                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1849  0014B4  C071  FFD9         	movff	sprintf@ap,fsr2l
  1850  0014B8  C072  FFDA         	movff	sprintf@ap+1,fsr2h
  1851  0014BC  CFDE F075          	movff	postinc2,sprintf@val
  1852  0014C0  CFDD F076          	movff	postdec2,sprintf@val+1
  1853                           
  1854                           ; BSR set to: 0
  1855  0014C4  0E02               	movlw	2
  1856  0014C6  0100               	movlb	0	; () banked
  1857  0014C8  2771               	addwf	sprintf@ap& (0+255),f,b
  1858  0014CA  0E00               	movlw	0
  1859  0014CC  2372               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;doprnt.c: 1261: if((int)val < 0) {
  1863  0014CE  0100               	movlb	0	; () banked
  1864  0014D0  AF76               	btfss	(sprintf@val+1)& (0+255),7,b
  1865  0014D2  D008               	goto	l2251
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;doprnt.c: 1262: flag |= 0x03;
  1869  0014D4  0E03               	movlw	3
  1870  0014D6  0100               	movlb	0	; () banked
  1871  0014D8  1373               	iorwf	sprintf@flag& (0+255),f,b
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;doprnt.c: 1263: val = -val;
  1875  0014DA  0100               	movlb	0	; () banked
  1876  0014DC  6D75               	negf	sprintf@val& (0+255),b
  1877  0014DE  1F76               	comf	(sprintf@val+1)& (0+255),f,b
  1878  0014E0  B0D8               	btfsc	status,0,c
  1879  0014E2  2B76               	incf	(sprintf@val+1)& (0+255),f,b
  1880  0014E4                     l2251:
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;doprnt.c: 1264: }
  1884                           ;doprnt.c: 1266: }
  1885                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1886  0014E4  0E01               	movlw	1
  1887  0014E6  0100               	movlb	0	; () banked
  1888  0014E8  6F77               	movwf	sprintf@c& (0+255),b
  1889  0014EA                     l2253:
  1890                           
  1891                           ; BSR set to: 0
  1892  0014EA  0E05               	movlw	5
  1893  0014EC  0100               	movlb	0	; () banked
  1894  0014EE  1977               	xorwf	sprintf@c& (0+255),w,b
  1895  0014F0  B4D8               	btfsc	status,2,c
  1896  0014F2  D019               	goto	l2265
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;doprnt.c: 1306: if(val < dpowers[c])
  1900                           
  1901                           ; BSR set to: 0
  1902                           
  1903                           ; BSR set to: 0
  1904  0014F4  0100               	movlb	0	; () banked
  1905  0014F6  5177               	movf	sprintf@c& (0+255),w,b
  1906  0014F8  0D02               	mullw	2
  1907  0014FA  0E01               	movlw	low _dpowers
  1908  0014FC  24F3               	addwf	prodl,w,c
  1909  0014FE  6EF6               	movwf	tblptrl,c
  1910  001500  0E10               	movlw	high _dpowers
  1911  001502  20F4               	addwfc	prodh,w,c
  1912  001504  6EF7               	movwf	tblptrh,c
  1913  001506                     	if	1	;There are 3 active tblptr bytes
  1914  001506  6AF8               	clrf	tblptru,c
  1915  001508  0E00               	movlw	low (__mediumconst shr (0+16))
  1916  00150A  22F8               	addwfc	tblptru,f,c
  1917  00150C                     	endif
  1918  00150C  0009               	tblrd		*+
  1919  00150E  50F5               	movf	tablat,w,c
  1920  001510  0100               	movlb	0	; () banked
  1921  001512  5D75               	subwf	sprintf@val& (0+255),w,b
  1922  001514  0009               	tblrd		*+
  1923  001516  50F5               	movf	tablat,w,c
  1924  001518  0100               	movlb	0	; () banked
  1925  00151A  5976               	subwfb	(sprintf@val+1)& (0+255),w,b
  1926  00151C  A0D8               	btfss	status,0,c
  1927  00151E  D003               	goto	l2265
  1928                           
  1929                           ; BSR set to: 0
  1930                           
  1931                           ; BSR set to: 0
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;doprnt.c: 1307: break;
  1935  001520  0100               	movlb	0	; () banked
  1936  001522  2B77               	incf	sprintf@c& (0+255),f,b
  1937  001524  D7E2               	goto	l2253
  1938  001526                     l2265:
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;doprnt.c: 1422: {
  1942                           ;doprnt.c: 1438: if(flag & 0x03)
  1943  001526  C073  F070         	movff	sprintf@flag,??_sprintf
  1944  00152A  0E03               	movlw	3
  1945  00152C  0100               	movlb	0	; () banked
  1946  00152E  1770               	andwf	??_sprintf& (0+255),f,b
  1947  001530  B4D8               	btfsc	status,2,c
  1948  001532  D009               	goto	l2271
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1952  001534  C068  FFD9         	movff	sprintf@sp,fsr2l
  1953  001538  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  1954  00153C  0E2D               	movlw	45
  1955  00153E  6EDF               	movwf	indf2,c
  1956                           
  1957                           ; BSR set to: 0
  1958  001540  0100               	movlb	0	; () banked
  1959  001542  4B68               	infsnz	sprintf@sp& (0+255),f,b
  1960  001544  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  1961  001546                     l2271:
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;doprnt.c: 1469: }
  1965                           ;doprnt.c: 1472: prec = c;
  1966  001546  C077  F074         	movff	sprintf@c,sprintf@prec
  1967                           
  1968                           ;doprnt.c: 1474: while(prec--) {
  1969  00154A  D031               	goto	l2279
  1970  00154C                     l2273:
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;doprnt.c: 1478: {
  1974                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1975  00154C  0100               	movlb	0	; () banked
  1976  00154E  5174               	movf	sprintf@prec& (0+255),w,b
  1977  001550  0D02               	mullw	2
  1978  001552  0E01               	movlw	low _dpowers
  1979  001554  24F3               	addwf	prodl,w,c
  1980  001556  6EF6               	movwf	tblptrl,c
  1981  001558  0E10               	movlw	high _dpowers
  1982  00155A  20F4               	addwfc	prodh,w,c
  1983  00155C  6EF7               	movwf	tblptrh,c
  1984  00155E                     	if	1	;There are 3 active tblptr bytes
  1985  00155E  6AF8               	clrf	tblptru,c
  1986  001560  0E00               	movlw	low (__mediumconst shr (0+16))
  1987  001562  22F8               	addwfc	tblptru,f,c
  1988  001564                     	endif
  1989  001564  0009               	tblrd		*+
  1990  001566  CFF5 F022          	movff	tablat,___lwdiv@divisor
  1991  00156A  000A               	tblrd		*-
  1992  00156C  CFF5 F023          	movff	tablat,___lwdiv@divisor+1
  1993  001570  C075  F020         	movff	sprintf@val,___lwdiv@dividend
  1994  001574  C076  F021         	movff	sprintf@val+1,___lwdiv@dividend+1
  1995  001578  EC55  F00E         	call	___lwdiv	;wreg free
  1996  00157C  C020  F063         	movff	?___lwdiv,___lwmod@dividend
  1997  001580  C021  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  1998  001584  0E00               	movlw	0
  1999  001586  0100               	movlb	0	; () banked
  2000  001588  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  2001  00158A  0E0A               	movlw	10
  2002  00158C  6F65               	movwf	___lwmod@divisor& (0+255),b
  2003  00158E  EC24  F00E         	call	___lwmod	;wreg free
  2004  001592  0100               	movlb	0	; () banked
  2005  001594  5163               	movf	?___lwmod& (0+255),w,b
  2006  001596  0F30               	addlw	48
  2007  001598  0100               	movlb	0	; () banked
  2008  00159A  6F77               	movwf	sprintf@c& (0+255),b
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;doprnt.c: 1523: }
  2012                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2013  00159C  C068  FFD9         	movff	sprintf@sp,fsr2l
  2014  0015A0  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  2015  0015A4  C077  FFDF         	movff	sprintf@c,indf2
  2016                           
  2017                           ; BSR set to: 0
  2018  0015A8  0100               	movlb	0	; () banked
  2019  0015AA  4B68               	infsnz	sprintf@sp& (0+255),f,b
  2020  0015AC  2B69               	incf	(sprintf@sp+1)& (0+255),f,b
  2021  0015AE                     l2279:
  2022                           
  2023                           ; BSR set to: 0
  2024  0015AE  0100               	movlb	0	; () banked
  2025  0015B0  0774               	decf	sprintf@prec& (0+255),f,b
  2026  0015B2  0100               	movlb	0	; () banked
  2027  0015B4  2974               	incf	sprintf@prec& (0+255),w,b
  2028  0015B6  A4D8               	btfss	status,2,c
  2029  0015B8  D7C9               	goto	l2273
  2030  0015BA                     l2281:
  2031                           
  2032                           ; BSR set to: 0
  2033  0015BA  C06A  FFF6         	movff	sprintf@f,tblptrl
  2034  0015BE  C06B  FFF7         	movff	sprintf@f+1,tblptrh
  2035  0015C2  0100               	movlb	0	; () banked
  2036  0015C4  4B6A               	infsnz	sprintf@f& (0+255),f,b
  2037  0015C6  2B6B               	incf	(sprintf@f+1)& (0+255),f,b
  2038  0015C8                     	if	0	;tblptru may be non-zero
  2039  0015C8                     	endif
  2040  0015C8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2041  0015C8  0E00               	movlw	low (__mediumconst shr (0+16))
  2042  0015CA  6EF8               	movwf	tblptru,c
  2043  0015CC                     	endif
  2044  0015CC  0008               	tblrd		*
  2045  0015CE  CFF5 F077          	movff	tablat,sprintf@c
  2046  0015D2  0100               	movlb	0	; () banked
  2047  0015D4  5177               	movf	sprintf@c& (0+255),w,b
  2048  0015D6  A4D8               	btfss	status,2,c
  2049  0015D8  D744               	goto	l2229
  2050  0015DA                     l2283:
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;doprnt.c: 1538: *sp = 0;
  2054  0015DA  C068  FFD9         	movff	sprintf@sp,fsr2l
  2055  0015DE  C069  FFDA         	movff	sprintf@sp+1,fsr2h
  2056  0015E2  0E00               	movlw	0
  2057  0015E4  6EDF               	movwf	indf2,c
  2058  0015E6  0012               	return	
  2059  0015E8                     __end_of_sprintf:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           prodh	equ	0xFF4
  2066                           prodl	equ	0xFF3
  2067                           postinc0	equ	0xFEE
  2068                           postdec1	equ	0xFE5
  2069                           fsr1l	equ	0xFE1
  2070                           indf2	equ	0xFDF
  2071                           postinc2	equ	0xFDE
  2072                           postdec2	equ	0xFDD
  2073                           fsr2h	equ	0xFDA
  2074                           fsr2l	equ	0xFD9
  2075                           status	equ	0xFD8
  2076                           
  2077 ;; *************** function ___lwmod *****************
  2078 ;; Defined at:
  2079 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  dividend        2    3[BANK0 ] unsigned int 
  2082 ;;  divisor         2    5[BANK0 ] unsigned int 
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;  counter         1    7[BANK0 ] unsigned char 
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  2    3[BANK0 ] unsigned int 
  2087 ;; Registers used:
  2088 ;;		wreg, status,2, status,0
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 0/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2094 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2097 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;Total ram usage:        5 bytes
  2099 ;; Hardware stack levels used:    1
  2100 ;; Hardware stack levels required when called:    2
  2101 ;; This function calls:
  2102 ;;		Nothing
  2103 ;; This function is called by:
  2104 ;;		_sprintf
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	text4
  2109  001C48                     __ptext4:
  2110                           	opt stack 0
  2111  001C48                     ___lwmod:
  2112                           	opt stack 26
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;incstack = 0
  2116  001C48  0100               	movlb	0	; () banked
  2117  001C4A  5165               	movf	___lwmod@divisor& (0+255),w,b
  2118  001C4C  0100               	movlb	0	; () banked
  2119  001C4E  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2120  001C50  B4D8               	btfsc	status,2,c
  2121  001C52  D026               	goto	l758
  2122                           
  2123                           ; BSR set to: 0
  2124  001C54  0E01               	movlw	1
  2125  001C56  0100               	movlb	0	; () banked
  2126  001C58  6F67               	movwf	___lwmod@counter& (0+255),b
  2127  001C5A  D006               	goto	l2161
  2128  001C5C                     l2159:
  2129                           
  2130                           ; BSR set to: 0
  2131  001C5C  0100               	movlb	0	; () banked
  2132  001C5E  90D8               	bcf	status,0,c
  2133  001C60  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  2134  001C62  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2135  001C64  0100               	movlb	0	; () banked
  2136  001C66  2B67               	incf	___lwmod@counter& (0+255),f,b
  2137  001C68                     l2161:
  2138                           
  2139                           ; BSR set to: 0
  2140  001C68  0100               	movlb	0	; () banked
  2141  001C6A  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2142  001C6C  D7F7               	goto	l2159
  2143  001C6E                     l2163:
  2144                           
  2145                           ; BSR set to: 0
  2146  001C6E  0100               	movlb	0	; () banked
  2147  001C70  5165               	movf	___lwmod@divisor& (0+255),w,b
  2148  001C72  0100               	movlb	0	; () banked
  2149  001C74  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  2150  001C76  0100               	movlb	0	; () banked
  2151  001C78  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2152  001C7A  0100               	movlb	0	; () banked
  2153  001C7C  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2154  001C7E  A0D8               	btfss	status,0,c
  2155  001C80  D008               	goto	l2167
  2156                           
  2157                           ; BSR set to: 0
  2158  001C82  0100               	movlb	0	; () banked
  2159  001C84  5165               	movf	___lwmod@divisor& (0+255),w,b
  2160  001C86  0100               	movlb	0	; () banked
  2161  001C88  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  2162  001C8A  0100               	movlb	0	; () banked
  2163  001C8C  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2164  001C8E  0100               	movlb	0	; () banked
  2165  001C90  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2166  001C92                     l2167:
  2167                           
  2168                           ; BSR set to: 0
  2169  001C92  0100               	movlb	0	; () banked
  2170  001C94  90D8               	bcf	status,0,c
  2171  001C96  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2172  001C98  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  2173                           
  2174                           ; BSR set to: 0
  2175  001C9A  0100               	movlb	0	; () banked
  2176  001C9C  2F67               	decfsz	___lwmod@counter& (0+255),f,b
  2177  001C9E  D7E7               	goto	l2163
  2178  001CA0                     l758:
  2179                           
  2180                           ; BSR set to: 0
  2181  001CA0  C063  F063         	movff	___lwmod@dividend,?___lwmod
  2182  001CA4  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  2183                           
  2184                           ; BSR set to: 0
  2185  001CA8  0012               	return		;funcret
  2186  001CAA                     __end_of___lwmod:
  2187                           	opt stack 0
  2188                           tblptru	equ	0xFF8
  2189                           tblptrh	equ	0xFF7
  2190                           tblptrl	equ	0xFF6
  2191                           tablat	equ	0xFF5
  2192                           prodh	equ	0xFF4
  2193                           prodl	equ	0xFF3
  2194                           postinc0	equ	0xFEE
  2195                           postdec1	equ	0xFE5
  2196                           fsr1l	equ	0xFE1
  2197                           indf2	equ	0xFDF
  2198                           postinc2	equ	0xFDE
  2199                           postdec2	equ	0xFDD
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function ___lwdiv *****************
  2205 ;; Defined at:
  2206 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  dividend        2   31[COMRAM] unsigned int 
  2209 ;;  divisor         2   33[COMRAM] unsigned int 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  quotient        2    1[BANK0 ] unsigned int 
  2212 ;;  counter         1    0[BANK0 ] unsigned char 
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  2   31[COMRAM] unsigned int 
  2215 ;; Registers used:
  2216 ;;		wreg, status,2, status,0
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2222 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;Total ram usage:        7 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:    2
  2229 ;; This function calls:
  2230 ;;		Nothing
  2231 ;; This function is called by:
  2232 ;;		_sprintf
  2233 ;; This function uses a non-reentrant model
  2234 ;;
  2235                           
  2236                           	psect	text5
  2237  001CAA                     __ptext5:
  2238                           	opt stack 0
  2239  001CAA                     ___lwdiv:
  2240                           	opt stack 26
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;incstack = 0
  2244  001CAA  0E00               	movlw	0
  2245  001CAC  0100               	movlb	0	; () banked
  2246  001CAE  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2247  001CB0  0E00               	movlw	0
  2248  001CB2  6F61               	movwf	___lwdiv@quotient& (0+255),b
  2249                           
  2250                           ; BSR set to: 0
  2251  001CB4  5022               	movf	___lwdiv@divisor,w,c
  2252  001CB6  1023               	iorwf	___lwdiv@divisor+1,w,c
  2253  001CB8  B4D8               	btfsc	status,2,c
  2254  001CBA  D021               	goto	l748
  2255                           
  2256                           ; BSR set to: 0
  2257  001CBC  0E01               	movlw	1
  2258  001CBE  0100               	movlb	0	; () banked
  2259  001CC0  6F60               	movwf	___lwdiv@counter& (0+255),b
  2260  001CC2  D005               	goto	l2141
  2261  001CC4                     l2139:
  2262                           
  2263                           ; BSR set to: 0
  2264  001CC4  90D8               	bcf	status,0,c
  2265  001CC6  3622               	rlcf	___lwdiv@divisor,f,c
  2266  001CC8  3623               	rlcf	___lwdiv@divisor+1,f,c
  2267  001CCA  0100               	movlb	0	; () banked
  2268  001CCC  2B60               	incf	___lwdiv@counter& (0+255),f,b
  2269  001CCE                     l2141:
  2270                           
  2271                           ; BSR set to: 0
  2272  001CCE  AE23               	btfss	___lwdiv@divisor+1,7,c
  2273  001CD0  D7F9               	goto	l2139
  2274  001CD2                     l2143:
  2275                           
  2276                           ; BSR set to: 0
  2277  001CD2  0100               	movlb	0	; () banked
  2278  001CD4  90D8               	bcf	status,0,c
  2279  001CD6  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  2280  001CD8  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2281                           
  2282                           ; BSR set to: 0
  2283  001CDA  5022               	movf	___lwdiv@divisor,w,c
  2284  001CDC  5C20               	subwf	___lwdiv@dividend,w,c
  2285  001CDE  5023               	movf	___lwdiv@divisor+1,w,c
  2286  001CE0  5821               	subwfb	___lwdiv@dividend+1,w,c
  2287  001CE2  A0D8               	btfss	status,0,c
  2288  001CE4  D006               	goto	l2151
  2289                           
  2290                           ; BSR set to: 0
  2291  001CE6  5022               	movf	___lwdiv@divisor,w,c
  2292  001CE8  5E20               	subwf	___lwdiv@dividend,f,c
  2293  001CEA  5023               	movf	___lwdiv@divisor+1,w,c
  2294  001CEC  5A21               	subwfb	___lwdiv@dividend+1,f,c
  2295                           
  2296                           ; BSR set to: 0
  2297  001CEE  0100               	movlb	0	; () banked
  2298  001CF0  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  2299  001CF2                     l2151:
  2300                           
  2301                           ; BSR set to: 0
  2302  001CF2  90D8               	bcf	status,0,c
  2303  001CF4  3223               	rrcf	___lwdiv@divisor+1,f,c
  2304  001CF6  3222               	rrcf	___lwdiv@divisor,f,c
  2305                           
  2306                           ; BSR set to: 0
  2307  001CF8  0100               	movlb	0	; () banked
  2308  001CFA  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  2309  001CFC  D7EA               	goto	l2143
  2310  001CFE                     l748:
  2311                           
  2312                           ; BSR set to: 0
  2313  001CFE  C061  F020         	movff	___lwdiv@quotient,?___lwdiv
  2314  001D02  C062  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2315                           
  2316                           ; BSR set to: 0
  2317  001D06  0012               	return		;funcret
  2318  001D08                     __end_of___lwdiv:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           prodh	equ	0xFF4
  2325                           prodl	equ	0xFF3
  2326                           postinc0	equ	0xFEE
  2327                           postdec1	equ	0xFE5
  2328                           fsr1l	equ	0xFE1
  2329                           indf2	equ	0xFDF
  2330                           postinc2	equ	0xFDE
  2331                           postdec2	equ	0xFDD
  2332                           fsr2h	equ	0xFDA
  2333                           fsr2l	equ	0xFD9
  2334                           status	equ	0xFD8
  2335                           
  2336 ;; *************** function _lcdWriteLine *****************
  2337 ;; Defined at:
  2338 ;;		line 36 in file "test.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;  data            2    3[BANK0 ] PTR unsigned char 
  2341 ;;		 -> STR_8(6), STR_7(6), STR_5(3), STR_4(2), 
  2342 ;;		 -> STR_3(3), STR_2(2), writeNum@numStr(20), 
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  i               2    7[BANK0 ] int 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2354 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;Total ram usage:        6 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    4
  2361 ;; This function calls:
  2362 ;;		_LCD8send
  2363 ;; This function is called by:
  2364 ;;		_writeNum
  2365 ;;		_writeLCD
  2366 ;;		_main
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text6
  2371  0019AA                     __ptext6:
  2372                           	opt stack 0
  2373  0019AA                     _lcdWriteLine:
  2374                           	opt stack 25
  2375                           
  2376                           ;test.c: 37: for (int i = 0; data[i] != 0; i++) {
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;incstack = 0
  2380  0019AA  0E00               	movlw	0
  2381  0019AC  0100               	movlb	0	; () banked
  2382  0019AE  6F68               	movwf	(lcdWriteLine@i+1)& (0+255),b
  2383  0019B0  0E00               	movlw	0
  2384  0019B2  6F67               	movwf	lcdWriteLine@i& (0+255),b
  2385  0019B4  D024               	goto	l2225
  2386  0019B6                     l2221:
  2387                           
  2388                           ;test.c: 38: LCD8send(data[i], 1);
  2389  0019B6  0E01               	movlw	1
  2390  0019B8  6E23               	movwf	LCD8send@mode,c
  2391  0019BA  0100               	movlb	0	; () banked
  2392  0019BC  5167               	movf	lcdWriteLine@i& (0+255),w,b
  2393  0019BE  0100               	movlb	0	; () banked
  2394  0019C0  2563               	addwf	lcdWriteLine@data& (0+255),w,b
  2395  0019C2  0100               	movlb	0	; () banked
  2396  0019C4  6F65               	movwf	??_lcdWriteLine& (0+255),b
  2397  0019C6  0100               	movlb	0	; () banked
  2398  0019C8  5168               	movf	(lcdWriteLine@i+1)& (0+255),w,b
  2399  0019CA  0100               	movlb	0	; () banked
  2400  0019CC  2164               	addwfc	(lcdWriteLine@data+1)& (0+255),w,b
  2401  0019CE  0100               	movlb	0	; () banked
  2402  0019D0  6F66               	movwf	(??_lcdWriteLine+1)& (0+255),b
  2403  0019D2  C065  FFF6         	movff	??_lcdWriteLine,tblptrl
  2404  0019D6  C066  FFF7         	movff	??_lcdWriteLine+1,tblptrh
  2405  0019DA  0E00               	movlw	low (__smallconst shr (0+16))
  2406  0019DC  6EF8               	movwf	tblptru,c
  2407  0019DE  0E0F               	movlw	(high __ramtop+-1)
  2408  0019E0  64F7               	cpfsgt	tblptrh,c
  2409  0019E2  D003               	bra	u1527
  2410  0019E4  0008               	tblrd		*
  2411  0019E6  50F5               	movf	tablat,w,c
  2412  0019E8  D005               	bra	u1520
  2413  0019EA                     u1527:
  2414  0019EA  CFF6 FFE9          	movff	tblptrl,fsr0l
  2415  0019EE  CFF7 FFEA          	movff	tblptrh,fsr0h
  2416  0019F2  50EF               	movf	indf0,w,c
  2417  0019F4                     u1520:
  2418  0019F4  ECF8  F00E         	call	_LCD8send
  2419  0019F8  0100               	movlb	0	; () banked
  2420  0019FA  4B67               	infsnz	lcdWriteLine@i& (0+255),f,b
  2421  0019FC  2B68               	incf	(lcdWriteLine@i+1)& (0+255),f,b
  2422  0019FE                     l2225:
  2423                           
  2424                           ; BSR set to: 0
  2425  0019FE  0100               	movlb	0	; () banked
  2426  001A00  5167               	movf	lcdWriteLine@i& (0+255),w,b
  2427  001A02  0100               	movlb	0	; () banked
  2428  001A04  2563               	addwf	lcdWriteLine@data& (0+255),w,b
  2429  001A06  0100               	movlb	0	; () banked
  2430  001A08  6F65               	movwf	??_lcdWriteLine& (0+255),b
  2431  001A0A  0100               	movlb	0	; () banked
  2432  001A0C  5168               	movf	(lcdWriteLine@i+1)& (0+255),w,b
  2433  001A0E  0100               	movlb	0	; () banked
  2434  001A10  2164               	addwfc	(lcdWriteLine@data+1)& (0+255),w,b
  2435  001A12  0100               	movlb	0	; () banked
  2436  001A14  6F66               	movwf	(??_lcdWriteLine+1)& (0+255),b
  2437  001A16  C065  FFF6         	movff	??_lcdWriteLine,tblptrl
  2438  001A1A  C066  FFF7         	movff	??_lcdWriteLine+1,tblptrh
  2439  001A1E  0E00               	movlw	low (__smallconst shr (0+16))
  2440  001A20  6EF8               	movwf	tblptru,c
  2441  001A22  0E0F               	movlw	(high __ramtop+-1)
  2442  001A24  64F7               	cpfsgt	tblptrh,c
  2443  001A26  D003               	bra	u1537
  2444  001A28  0008               	tblrd		*
  2445  001A2A  50F5               	movf	tablat,w,c
  2446  001A2C  D005               	bra	u1530
  2447  001A2E                     u1537:
  2448  001A2E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2449  001A32  CFF7 FFEA          	movff	tblptrh,fsr0h
  2450  001A36  50EF               	movf	indf0,w,c
  2451  001A38                     u1530:
  2452  001A38  0900               	iorlw	0
  2453  001A3A  B4D8               	btfsc	status,2,c
  2454  001A3C  0012               	return	
  2455  001A3E  D7BB               	goto	l2221
  2456  001A40                     __end_of_lcdWriteLine:
  2457                           	opt stack 0
  2458                           tblptru	equ	0xFF8
  2459                           tblptrh	equ	0xFF7
  2460                           tblptrl	equ	0xFF6
  2461                           tablat	equ	0xFF5
  2462                           prodh	equ	0xFF4
  2463                           prodl	equ	0xFF3
  2464                           indf0	equ	0xFEF
  2465                           postinc0	equ	0xFEE
  2466                           fsr0h	equ	0xFEA
  2467                           fsr0l	equ	0xFE9
  2468                           postdec1	equ	0xFE5
  2469                           fsr1l	equ	0xFE1
  2470                           indf2	equ	0xFDF
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _ee_read_num *****************
  2478 ;; Defined at:
  2479 ;;		line 53 in file "EEPROM.h"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  addr            1    wreg     unsigned char 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  addr            1   12[BANK0 ] unsigned char 
  2484 ;;  number          4   17[BANK0 ] unsigned long 
  2485 ;;  i               4   13[BANK0 ] unsigned long 
  2486 ;;  byte            1   21[BANK0 ] unsigned char 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  4    8[BANK0 ] unsigned long 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2496 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;Total ram usage:       14 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    4
  2503 ;; This function calls:
  2504 ;;		___lmul
  2505 ;;		_eepromRead
  2506 ;; This function is called by:
  2507 ;;		_writeLCD
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text7
  2512  00184C                     __ptext7:
  2513                           	opt stack 0
  2514  00184C                     _ee_read_num:
  2515                           	opt stack 25
  2516                           
  2517                           ;incstack = 0
  2518                           ;ee_read_num@addr stored from wreg
  2519  00184C  0100               	movlb	0	; () banked
  2520  00184E  6F6C               	movwf	ee_read_num@addr& (0+255),b
  2521                           
  2522                           ;EEPROM.h: 54: unsigned long i = 0;
  2523  001850  0E00               	movlw	0
  2524  001852  0100               	movlb	0	; () banked
  2525  001854  6F6D               	movwf	ee_read_num@i& (0+255),b
  2526  001856  0E00               	movlw	0
  2527  001858  6F6E               	movwf	(ee_read_num@i+1)& (0+255),b
  2528  00185A  0E00               	movlw	0
  2529  00185C  6F6F               	movwf	(ee_read_num@i+2)& (0+255),b
  2530  00185E  0E00               	movlw	0
  2531  001860  6F70               	movwf	(ee_read_num@i+3)& (0+255),b
  2532                           
  2533                           ;EEPROM.h: 55: unsigned long number = 0;
  2534  001862  0E00               	movlw	0
  2535  001864  0100               	movlb	0	; () banked
  2536  001866  6F71               	movwf	ee_read_num@number& (0+255),b
  2537  001868  0E00               	movlw	0
  2538  00186A  6F72               	movwf	(ee_read_num@number+1)& (0+255),b
  2539  00186C  0E00               	movlw	0
  2540  00186E  6F73               	movwf	(ee_read_num@number+2)& (0+255),b
  2541  001870  0E00               	movlw	0
  2542  001872  6F74               	movwf	(ee_read_num@number+3)& (0+255),b
  2543                           
  2544                           ;EEPROM.h: 56: unsigned char byte = 0;
  2545  001874  0E00               	movlw	0
  2546  001876  0100               	movlb	0	; () banked
  2547  001878  6F75               	movwf	ee_read_num@byte& (0+255),b
  2548  00187A                     l2333:
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;EEPROM.h: 59: number = number * 10 + byte;
  2552  00187A  C071  F060         	movff	ee_read_num@number,___lmul@multiplier
  2553  00187E  C072  F061         	movff	ee_read_num@number+1,___lmul@multiplier+1
  2554  001882  C073  F062         	movff	ee_read_num@number+2,___lmul@multiplier+2
  2555  001886  C074  F063         	movff	ee_read_num@number+3,___lmul@multiplier+3
  2556  00188A  0E0A               	movlw	10
  2557  00188C  0100               	movlb	0	; () banked
  2558  00188E  6F64               	movwf	___lmul@multiplicand& (0+255),b
  2559  001890  0E00               	movlw	0
  2560  001892  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  2561  001894  0E00               	movlw	0
  2562  001896  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  2563  001898  0E00               	movlw	0
  2564  00189A  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  2565  00189C  ECEE  F00D         	call	___lmul	;wreg free
  2566  0018A0  0100               	movlb	0	; () banked
  2567  0018A2  5175               	movf	ee_read_num@byte& (0+255),w,b
  2568  0018A4  0100               	movlb	0	; () banked
  2569  0018A6  2560               	addwf	?___lmul& (0+255),w,b
  2570  0018A8  0100               	movlb	0	; () banked
  2571  0018AA  6F71               	movwf	ee_read_num@number& (0+255),b
  2572  0018AC  0E00               	movlw	0
  2573  0018AE  0100               	movlb	0	; () banked
  2574  0018B0  2161               	addwfc	(?___lmul+1)& (0+255),w,b
  2575  0018B2  0100               	movlb	0	; () banked
  2576  0018B4  6F72               	movwf	(ee_read_num@number+1)& (0+255),b
  2577  0018B6  0E00               	movlw	0
  2578  0018B8  0100               	movlb	0	; () banked
  2579  0018BA  2162               	addwfc	(?___lmul+2)& (0+255),w,b
  2580  0018BC  0100               	movlb	0	; () banked
  2581  0018BE  6F73               	movwf	(ee_read_num@number+2)& (0+255),b
  2582  0018C0  0E00               	movlw	0
  2583  0018C2  0100               	movlb	0	; () banked
  2584  0018C4  2163               	addwfc	(?___lmul+3)& (0+255),w,b
  2585  0018C6  0100               	movlb	0	; () banked
  2586  0018C8  6F74               	movwf	(ee_read_num@number+3)& (0+255),b
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;EEPROM.h: 60: byte = eepromRead(addr + i);
  2590  0018CA  0100               	movlb	0	; () banked
  2591  0018CC  516C               	movf	ee_read_num@addr& (0+255),w,b
  2592  0018CE  0100               	movlb	0	; () banked
  2593  0018D0  256D               	addwf	ee_read_num@i& (0+255),w,b
  2594  0018D2  EC66  F00F         	call	_eepromRead
  2595  0018D6  0100               	movlb	0	; () banked
  2596  0018D8  6F75               	movwf	ee_read_num@byte& (0+255),b
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;EEPROM.h: 61: i++;
  2600  0018DA  0E01               	movlw	1
  2601  0018DC  0100               	movlb	0	; () banked
  2602  0018DE  276D               	addwf	ee_read_num@i& (0+255),f,b
  2603  0018E0  0E00               	movlw	0
  2604  0018E2  236E               	addwfc	(ee_read_num@i+1)& (0+255),f,b
  2605  0018E4  236F               	addwfc	(ee_read_num@i+2)& (0+255),f,b
  2606  0018E6  2370               	addwfc	(ee_read_num@i+3)& (0+255),f,b
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;EEPROM.h: 63: } while (byte != 0xFF);
  2610  0018E8  0100               	movlb	0	; () banked
  2611  0018EA  2975               	incf	ee_read_num@byte& (0+255),w,b
  2612  0018EC  A4D8               	btfss	status,2,c
  2613  0018EE  D7C5               	goto	l2333
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;EEPROM.h: 65: return number;
  2617  0018F0  C071  F068         	movff	ee_read_num@number,?_ee_read_num
  2618  0018F4  C072  F069         	movff	ee_read_num@number+1,?_ee_read_num+1
  2619  0018F8  C073  F06A         	movff	ee_read_num@number+2,?_ee_read_num+2
  2620  0018FC  C074  F06B         	movff	ee_read_num@number+3,?_ee_read_num+3
  2621                           
  2622                           ; BSR set to: 0
  2623  001900  0012               	return		;funcret
  2624  001902                     __end_of_ee_read_num:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           prodh	equ	0xFF4
  2631                           prodl	equ	0xFF3
  2632                           indf0	equ	0xFEF
  2633                           postinc0	equ	0xFEE
  2634                           fsr0h	equ	0xFEA
  2635                           fsr0l	equ	0xFE9
  2636                           postdec1	equ	0xFE5
  2637                           fsr1l	equ	0xFE1
  2638                           indf2	equ	0xFDF
  2639                           postinc2	equ	0xFDE
  2640                           postdec2	equ	0xFDD
  2641                           fsr2h	equ	0xFDA
  2642                           fsr2l	equ	0xFD9
  2643                           status	equ	0xFD8
  2644                           
  2645 ;; *************** function ___lmul *****************
  2646 ;; Defined at:
  2647 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2650 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  product         4   31[COMRAM] unsigned long 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  4    0[BANK0 ] unsigned long 
  2655 ;; Registers used:
  2656 ;;		wreg, status,2, status,0
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2662 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;Total ram usage:       12 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    2
  2669 ;; This function calls:
  2670 ;;		Nothing
  2671 ;; This function is called by:
  2672 ;;		_ee_read_num
  2673 ;;		_main
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text8
  2678  001BDC                     __ptext8:
  2679                           	opt stack 0
  2680  001BDC                     ___lmul:
  2681                           	opt stack 26
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;incstack = 0
  2685  001BDC  0E00               	movlw	0
  2686  001BDE  6E20               	movwf	___lmul@product,c
  2687  001BE0  0E00               	movlw	0
  2688  001BE2  6E21               	movwf	___lmul@product+1,c
  2689  001BE4  0E00               	movlw	0
  2690  001BE6  6E22               	movwf	___lmul@product+2,c
  2691  001BE8  0E00               	movlw	0
  2692  001BEA  6E23               	movwf	___lmul@product+3,c
  2693  001BEC                     l2289:
  2694  001BEC  0100               	movlb	0	; () banked
  2695  001BEE  A160               	btfss	___lmul@multiplier& (0+255),0,b
  2696  001BF0  D00C               	goto	l2293
  2697                           
  2698                           ; BSR set to: 0
  2699  001BF2  0100               	movlb	0	; () banked
  2700  001BF4  5164               	movf	___lmul@multiplicand& (0+255),w,b
  2701  001BF6  2620               	addwf	___lmul@product,f,c
  2702  001BF8  0100               	movlb	0	; () banked
  2703  001BFA  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  2704  001BFC  2221               	addwfc	___lmul@product+1,f,c
  2705  001BFE  0100               	movlb	0	; () banked
  2706  001C00  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  2707  001C02  2222               	addwfc	___lmul@product+2,f,c
  2708  001C04  0100               	movlb	0	; () banked
  2709  001C06  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  2710  001C08  2223               	addwfc	___lmul@product+3,f,c
  2711  001C0A                     l2293:
  2712                           
  2713                           ; BSR set to: 0
  2714  001C0A  0100               	movlb	0	; () banked
  2715  001C0C  90D8               	bcf	status,0,c
  2716  001C0E  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  2717  001C10  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  2718  001C12  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  2719  001C14  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  2720                           
  2721                           ; BSR set to: 0
  2722  001C16  0100               	movlb	0	; () banked
  2723  001C18  90D8               	bcf	status,0,c
  2724  001C1A  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  2725  001C1C  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  2726  001C1E  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  2727  001C20  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  2728  001C22  0100               	movlb	0	; () banked
  2729  001C24  5160               	movf	___lmul@multiplier& (0+255),w,b
  2730  001C26  0100               	movlb	0	; () banked
  2731  001C28  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  2732  001C2A  0100               	movlb	0	; () banked
  2733  001C2C  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  2734  001C2E  0100               	movlb	0	; () banked
  2735  001C30  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  2736  001C32  A4D8               	btfss	status,2,c
  2737  001C34  D7DB               	goto	l2289
  2738                           
  2739                           ; BSR set to: 0
  2740  001C36  C020  F060         	movff	___lmul@product,?___lmul
  2741  001C3A  C021  F061         	movff	___lmul@product+1,?___lmul+1
  2742  001C3E  C022  F062         	movff	___lmul@product+2,?___lmul+2
  2743  001C42  C023  F063         	movff	___lmul@product+3,?___lmul+3
  2744                           
  2745                           ; BSR set to: 0
  2746  001C46  0012               	return		;funcret
  2747  001C48                     __end_of___lmul:
  2748                           	opt stack 0
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           prodh	equ	0xFF4
  2754                           prodl	equ	0xFF3
  2755                           indf0	equ	0xFEF
  2756                           postinc0	equ	0xFEE
  2757                           fsr0h	equ	0xFEA
  2758                           fsr0l	equ	0xFE9
  2759                           postdec1	equ	0xFE5
  2760                           fsr1l	equ	0xFE1
  2761                           indf2	equ	0xFDF
  2762                           postinc2	equ	0xFDE
  2763                           postdec2	equ	0xFDD
  2764                           fsr2h	equ	0xFDA
  2765                           fsr2l	equ	0xFD9
  2766                           status	equ	0xFD8
  2767                           
  2768 ;; *************** function _ee_read_char *****************
  2769 ;; Defined at:
  2770 ;;		line 24 in file "EEPROM.h"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  address         1    wreg     unsigned char 
  2773 ;;  _data           2    0[BANK0 ] PTR unsigned char 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;  address         1   34[COMRAM] unsigned char 
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2785 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;Total ram usage:        3 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    4
  2792 ;; This function calls:
  2793 ;;		_eepromRead
  2794 ;; This function is called by:
  2795 ;;		_writeLCD
  2796 ;;		_ee_read_string
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text9
  2801  001F26                     __ptext9:
  2802                           	opt stack 0
  2803  001F26                     _ee_read_char:
  2804                           	opt stack 25
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;incstack = 0
  2808                           ;ee_read_char@address stored from wreg
  2809  001F26  6E23               	movwf	ee_read_char@address,c
  2810                           
  2811                           ;EEPROM.h: 25: *_data = eepromRead(address);
  2812  001F28  5023               	movf	ee_read_char@address,w,c
  2813  001F2A  EC66  F00F         	call	_eepromRead
  2814  001F2E  C060  FFD9         	movff	ee_read_char@_data,fsr2l
  2815  001F32  C061  FFDA         	movff	ee_read_char@_data+1,fsr2h
  2816  001F36  6EDF               	movwf	indf2,c
  2817  001F38  0012               	return		;funcret
  2818  001F3A                     __end_of_ee_read_char:
  2819                           	opt stack 0
  2820                           tblptru	equ	0xFF8
  2821                           tblptrh	equ	0xFF7
  2822                           tblptrl	equ	0xFF6
  2823                           tablat	equ	0xFF5
  2824                           prodh	equ	0xFF4
  2825                           prodl	equ	0xFF3
  2826                           indf0	equ	0xFEF
  2827                           postinc0	equ	0xFEE
  2828                           fsr0h	equ	0xFEA
  2829                           fsr0l	equ	0xFE9
  2830                           postdec1	equ	0xFE5
  2831                           fsr1l	equ	0xFE1
  2832                           indf2	equ	0xFDF
  2833                           postinc2	equ	0xFDE
  2834                           postdec2	equ	0xFDD
  2835                           fsr2h	equ	0xFDA
  2836                           fsr2l	equ	0xFD9
  2837                           status	equ	0xFD8
  2838                           
  2839 ;; *************** function _eepromRead *****************
  2840 ;; Defined at:
  2841 ;;		line 47 in file "exprom.h"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  address         1    wreg     unsigned char 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  address         1   32[COMRAM] unsigned char 
  2846 ;;  buffer          1   33[COMRAM] unsigned char 
  2847 ;; Return value:  Size  Location     Type
  2848 ;;                  1    wreg      unsigned char 
  2849 ;; Registers used:
  2850 ;;		wreg, status,2, cstack
  2851 ;; Tracked objects:
  2852 ;;		On entry : 0/0
  2853 ;;		On exit  : 0/0
  2854 ;;		Unchanged: 0/0
  2855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;Total ram usage:        2 bytes
  2861 ;; Hardware stack levels used:    1
  2862 ;; Hardware stack levels required when called:    3
  2863 ;; This function calls:
  2864 ;;		_SPI1out
  2865 ;;		_eeWait
  2866 ;; This function is called by:
  2867 ;;		_ee_read_char
  2868 ;;		_ee_read_num
  2869 ;; This function uses a non-reentrant model
  2870 ;;
  2871                           
  2872                           	psect	text10
  2873  001ECC                     __ptext10:
  2874                           	opt stack 0
  2875  001ECC                     _eepromRead:
  2876                           	opt stack 25
  2877                           
  2878                           ;incstack = 0
  2879                           ;eepromRead@address stored from wreg
  2880  001ECC  6E21               	movwf	eepromRead@address,c
  2881                           
  2882                           ;exprom.h: 50: (PORTCbits.RC6) = 0;
  2883  001ECE  9C82               	bcf	3970,6,c	;volatile
  2884                           
  2885                           ;exprom.h: 52: SPI1out(0x03);
  2886  001ED0  0E03               	movlw	3
  2887  001ED2  ECB7  F00F         	call	_SPI1out
  2888                           
  2889                           ;exprom.h: 53: SPI1out(((address)>>8)&0xFF);
  2890  001ED6  0E00               	movlw	0
  2891  001ED8  ECB7  F00F         	call	_SPI1out
  2892                           
  2893                           ;exprom.h: 54: SPI1out(address&0xFF);
  2894  001EDC  5021               	movf	eepromRead@address,w,c
  2895  001EDE  ECB7  F00F         	call	_SPI1out
  2896                           
  2897                           ;exprom.h: 56: (SSP1BUF) = 0x00;
  2898  001EE2  0E00               	movlw	0
  2899  001EE4  6EC9               	movwf	4041,c	;volatile
  2900                           
  2901                           ;exprom.h: 57: eeWait();
  2902  001EE6  ECBF  F00F         	call	_eeWait	;wreg free
  2903                           
  2904                           ;exprom.h: 59: unsigned char buffer = (SSP1BUF);
  2905  001EEA  CFC9 F022          	movff	4041,eepromRead@buffer	;volatile
  2906                           
  2907                           ;exprom.h: 61: (PORTCbits.RC6) = 1;
  2908  001EEE  8C82               	bsf	3970,6,c	;volatile
  2909                           
  2910                           ;exprom.h: 62: return buffer;
  2911  001EF0  5022               	movf	eepromRead@buffer,w,c
  2912  001EF2  0012               	return	
  2913  001EF4                     __end_of_eepromRead:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           prodh	equ	0xFF4
  2920                           prodl	equ	0xFF3
  2921                           indf0	equ	0xFEF
  2922                           postinc0	equ	0xFEE
  2923                           fsr0h	equ	0xFEA
  2924                           fsr0l	equ	0xFE9
  2925                           postdec1	equ	0xFE5
  2926                           fsr1l	equ	0xFE1
  2927                           indf2	equ	0xFDF
  2928                           postinc2	equ	0xFDE
  2929                           postdec2	equ	0xFDD
  2930                           fsr2h	equ	0xFDA
  2931                           fsr2l	equ	0xFD9
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function _eepromInit *****************
  2935 ;; Defined at:
  2936 ;;		line 33 in file "exprom.h"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  1    wreg      void 
  2943 ;; Registers used:
  2944 ;;		wreg, status,2, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;Total ram usage:        0 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    4
  2957 ;; This function calls:
  2958 ;;		_SPI1init
  2959 ;;		_SPI1out
  2960 ;; This function is called by:
  2961 ;;		_main
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text11
  2966  001EF4                     __ptext11:
  2967                           	opt stack 0
  2968  001EF4                     _eepromInit:
  2969                           	opt stack 26
  2970                           
  2971                           ;exprom.h: 34: (PORTCbits.RC6) = 1;
  2972                           
  2973                           ;incstack = 0
  2974  001EF4  8C82               	bsf	3970,6,c	;volatile
  2975                           
  2976                           ;exprom.h: 35: (TRISCbits.TRISC6) = 0;
  2977  001EF6  9C94               	bcf	3988,6,c	;volatile
  2978                           
  2979                           ;exprom.h: 37: (TRISCbits.TRISC3) = 0;
  2980  001EF8  9694               	bcf	3988,3,c	;volatile
  2981                           
  2982                           ;exprom.h: 38: (TRISCbits.TRISC4) = 1;
  2983  001EFA  8894               	bsf	3988,4,c	;volatile
  2984                           
  2985                           ;exprom.h: 39: (TRISCbits.TRISC5) = 0;
  2986  001EFC  9A94               	bcf	3988,5,c	;volatile
  2987                           
  2988                           ;exprom.h: 41: BAUDCON1 = 0x00;
  2989  001EFE  0E00               	movlw	0
  2990  001F00  6E7E               	movwf	3966,c	;volatile
  2991                           
  2992                           ;exprom.h: 43: SPI1init();
  2993  001F02  EC9D  F00F         	call	_SPI1init	;wreg free
  2994                           
  2995                           ;exprom.h: 44: SPI1out(0x00);
  2996  001F06  0E00               	movlw	0
  2997  001F08  ECB7  F00F         	call	_SPI1out
  2998  001F0C  0012               	return		;funcret
  2999  001F0E                     __end_of_eepromInit:
  3000                           	opt stack 0
  3001                           tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           prodh	equ	0xFF4
  3006                           prodl	equ	0xFF3
  3007                           indf0	equ	0xFEF
  3008                           postinc0	equ	0xFEE
  3009                           fsr0h	equ	0xFEA
  3010                           fsr0l	equ	0xFE9
  3011                           postdec1	equ	0xFE5
  3012                           fsr1l	equ	0xFE1
  3013                           indf2	equ	0xFDF
  3014                           postinc2	equ	0xFDE
  3015                           postdec2	equ	0xFDD
  3016                           fsr2h	equ	0xFDA
  3017                           fsr2l	equ	0xFD9
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function _SPI1init *****************
  3021 ;; Defined at:
  3022 ;;		line 6 in file "SPI.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;		None
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;		None
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg, status,2, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;Total ram usage:        0 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    3
  3043 ;; This function calls:
  3044 ;;		_SPI1out
  3045 ;; This function is called by:
  3046 ;;		_eepromInit
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text12
  3051  001F3A                     __ptext12:
  3052                           	opt stack 0
  3053  001F3A                     _SPI1init:
  3054                           	opt stack 26
  3055                           
  3056                           ;SPI.c: 8: SSP1CON1 = 0b00100010;
  3057                           
  3058                           ;incstack = 0
  3059  001F3A  0E22               	movlw	34
  3060  001F3C  6EC6               	movwf	4038,c	;volatile
  3061                           
  3062                           ;SPI.c: 9: SSP1STATbits.CKE = 1;
  3063  001F3E  8CC7               	bsf	4039,6,c	;volatile
  3064                           
  3065                           ;SPI.c: 10: TRISCbits.TRISC3 = 0;
  3066  001F40  9694               	bcf	3988,3,c	;volatile
  3067                           
  3068                           ;SPI.c: 11: TRISCbits.TRISC5 = 0;
  3069  001F42  9A94               	bcf	3988,5,c	;volatile
  3070                           
  3071                           ;SPI.c: 12: SPI1out(0x00);
  3072  001F44  0E00               	movlw	0
  3073  001F46  ECB7  F00F         	call	_SPI1out
  3074  001F4A  0012               	return		;funcret
  3075  001F4C                     __end_of_SPI1init:
  3076                           	opt stack 0
  3077                           tblptru	equ	0xFF8
  3078                           tblptrh	equ	0xFF7
  3079                           tblptrl	equ	0xFF6
  3080                           tablat	equ	0xFF5
  3081                           prodh	equ	0xFF4
  3082                           prodl	equ	0xFF3
  3083                           indf0	equ	0xFEF
  3084                           postinc0	equ	0xFEE
  3085                           fsr0h	equ	0xFEA
  3086                           fsr0l	equ	0xFE9
  3087                           postdec1	equ	0xFE5
  3088                           fsr1l	equ	0xFE1
  3089                           indf2	equ	0xFDF
  3090                           postinc2	equ	0xFDE
  3091                           postdec2	equ	0xFDD
  3092                           fsr2h	equ	0xFDA
  3093                           fsr2l	equ	0xFD9
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function _ee_write_num *****************
  3097 ;; Defined at:
  3098 ;;		line 41 in file "EEPROM.h"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;  addr            1    wreg     unsigned char 
  3101 ;;  number          4   13[BANK0 ] volatile unsigned long 
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  addr            1   17[BANK0 ] unsigned char 
  3104 ;;  i               1   18[BANK0 ] volatile unsigned char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		wreg, status,2, status,0, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3114 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;Total ram usage:        6 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    5
  3121 ;; This function calls:
  3122 ;;		___lldiv
  3123 ;;		___llmod
  3124 ;;		_ee_write_char
  3125 ;; This function is called by:
  3126 ;;		_main
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text13
  3131  001902                     __ptext13:
  3132                           	opt stack 0
  3133  001902                     _ee_write_num:
  3134                           	opt stack 25
  3135                           
  3136                           ;incstack = 0
  3137                           ;ee_write_num@addr stored from wreg
  3138  001902  0100               	movlb	0	; () banked
  3139  001904  6F71               	movwf	ee_write_num@addr& (0+255),b
  3140                           
  3141                           ;EEPROM.h: 42: volatile unsigned char i;
  3142                           ;EEPROM.h: 44: for (i = 0; number != 0; i++) {
  3143  001906  0E00               	movlw	0
  3144  001908  0100               	movlb	0	; () banked
  3145  00190A  6F72               	movwf	ee_write_num@i& (0+255),b	;volatile
  3146  00190C                     l2467:
  3147                           
  3148                           ; BSR set to: 0
  3149  00190C  0100               	movlb	0	; () banked
  3150  00190E  516D               	movf	ee_write_num@number& (0+255),w,b	;volatile
  3151  001910  0100               	movlb	0	; () banked
  3152  001912  116E               	iorwf	(ee_write_num@number+1)& (0+255),w,b	;volatile
  3153  001914  0100               	movlb	0	; () banked
  3154  001916  116F               	iorwf	(ee_write_num@number+2)& (0+255),w,b	;volatile
  3155  001918  0100               	movlb	0	; () banked
  3156  00191A  1170               	iorwf	(ee_write_num@number+3)& (0+255),w,b	;volatile
  3157  00191C  B4D8               	btfsc	status,2,c
  3158  00191E  D03B               	goto	l2477
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;EEPROM.h: 45: ee_write_char(addr + i, number % 10);
  3162                           
  3163                           ; BSR set to: 0
  3164                           
  3165                           ; BSR set to: 0
  3166  001920  C06D  F060         	movff	ee_write_num@number,___llmod@dividend	;volatile
  3167  001924  C06E  F061         	movff	ee_write_num@number+1,___llmod@dividend+1	;volatile
  3168  001928  C06F  F062         	movff	ee_write_num@number+2,___llmod@dividend+2	;volatile
  3169  00192C  C070  F063         	movff	ee_write_num@number+3,___llmod@dividend+3	;volatile
  3170  001930  0E0A               	movlw	10
  3171  001932  0100               	movlb	0	; () banked
  3172  001934  6F64               	movwf	___llmod@divisor& (0+255),b
  3173  001936  0E00               	movlw	0
  3174  001938  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  3175  00193A  0E00               	movlw	0
  3176  00193C  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  3177  00193E  0E00               	movlw	0
  3178  001940  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  3179  001942  EC20  F00D         	call	___llmod	;wreg free
  3180  001946  0100               	movlb	0	; () banked
  3181  001948  5160               	movf	?___llmod& (0+255),w,b
  3182  00194A  0100               	movlb	0	; () banked
  3183  00194C  6F68               	movwf	ee_write_char@chunk& (0+255),b
  3184  00194E  0100               	movlb	0	; () banked
  3185  001950  5171               	movf	ee_write_num@addr& (0+255),w,b
  3186  001952  0100               	movlb	0	; () banked
  3187  001954  2572               	addwf	ee_write_num@i& (0+255),w,b	;volatile
  3188  001956  ECA6  F00F         	call	_ee_write_char
  3189                           
  3190                           ;EEPROM.h: 46: number /= 10;
  3191  00195A  C06D  F060         	movff	ee_write_num@number,___lldiv@dividend	;volatile
  3192  00195E  C06E  F061         	movff	ee_write_num@number+1,___lldiv@dividend+1	;volatile
  3193  001962  C06F  F062         	movff	ee_write_num@number+2,___lldiv@dividend+2	;volatile
  3194  001966  C070  F063         	movff	ee_write_num@number+3,___lldiv@dividend+3	;volatile
  3195  00196A  0E0A               	movlw	10
  3196  00196C  0100               	movlb	0	; () banked
  3197  00196E  6F64               	movwf	___lldiv@divisor& (0+255),b
  3198  001970  0E00               	movlw	0
  3199  001972  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  3200  001974  0E00               	movlw	0
  3201  001976  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  3202  001978  0E00               	movlw	0
  3203  00197A  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  3204  00197C  ECC8  F00B         	call	___lldiv	;wreg free
  3205  001980  C060  F06D         	movff	?___lldiv,ee_write_num@number	;volatile
  3206  001984  C061  F06E         	movff	?___lldiv+1,ee_write_num@number+1	;volatile
  3207  001988  C062  F06F         	movff	?___lldiv+2,ee_write_num@number+2	;volatile
  3208  00198C  C063  F070         	movff	?___lldiv+3,ee_write_num@number+3	;volatile
  3209  001990  0100               	movlb	0	; () banked
  3210  001992  2B72               	incf	ee_write_num@i& (0+255),f,b	;volatile
  3211  001994  D7BB               	goto	l2467
  3212  001996                     l2477:
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;EEPROM.h: 47: }
  3216                           ;EEPROM.h: 49: ee_write_char(addr + i, 255);
  3217  001996  0EFF               	movlw	255
  3218  001998  0100               	movlb	0	; () banked
  3219  00199A  6F68               	movwf	ee_write_char@chunk& (0+255),b
  3220  00199C  0100               	movlb	0	; () banked
  3221  00199E  5171               	movf	ee_write_num@addr& (0+255),w,b
  3222  0019A0  0100               	movlb	0	; () banked
  3223  0019A2  2572               	addwf	ee_write_num@i& (0+255),w,b	;volatile
  3224  0019A4  ECA6  F00F         	call	_ee_write_char
  3225  0019A8  0012               	return		;funcret
  3226  0019AA                     __end_of_ee_write_num:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           tblptrl	equ	0xFF6
  3231                           tablat	equ	0xFF5
  3232                           prodh	equ	0xFF4
  3233                           prodl	equ	0xFF3
  3234                           indf0	equ	0xFEF
  3235                           postinc0	equ	0xFEE
  3236                           fsr0h	equ	0xFEA
  3237                           fsr0l	equ	0xFE9
  3238                           postdec1	equ	0xFE5
  3239                           fsr1l	equ	0xFE1
  3240                           indf2	equ	0xFDF
  3241                           postinc2	equ	0xFDE
  3242                           postdec2	equ	0xFDD
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _ee_write_char *****************
  3248 ;; Defined at:
  3249 ;;		line 14 in file "EEPROM.h"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  address         1    wreg     unsigned char 
  3252 ;;  chunk           1    8[BANK0 ] const unsigned char 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  address         1    9[BANK0 ] unsigned char 
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      void 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0, cstack
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3264 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;Total ram usage:        2 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    4
  3271 ;; This function calls:
  3272 ;;		_eepromWrite
  3273 ;; This function is called by:
  3274 ;;		_ee_write_num
  3275 ;;		_main
  3276 ;;		_ee_write_string
  3277 ;;		_ee_clear
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           	psect	text14
  3282  001F4C                     __ptext14:
  3283                           	opt stack 0
  3284  001F4C                     _ee_write_char:
  3285                           	opt stack 25
  3286                           
  3287                           ;incstack = 0
  3288                           ;ee_write_char@address stored from wreg
  3289  001F4C  0100               	movlb	0	; () banked
  3290  001F4E  6F69               	movwf	ee_write_char@address& (0+255),b
  3291                           
  3292                           ;EEPROM.h: 15: eepromWrite(address, chunk);
  3293  001F50  C068  F023         	movff	ee_write_char@chunk,eepromWrite@value
  3294  001F54  0100               	movlb	0	; () banked
  3295  001F56  5169               	movf	ee_write_char@address& (0+255),w,b
  3296  001F58  EC84  F00E         	call	_eepromWrite
  3297  001F5C  0012               	return		;funcret
  3298  001F5E                     __end_of_ee_write_char:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           indf0	equ	0xFEF
  3307                           postinc0	equ	0xFEE
  3308                           fsr0h	equ	0xFEA
  3309                           fsr0l	equ	0xFE9
  3310                           postdec1	equ	0xFE5
  3311                           fsr1l	equ	0xFE1
  3312                           indf2	equ	0xFDF
  3313                           postinc2	equ	0xFDE
  3314                           postdec2	equ	0xFDD
  3315                           fsr2h	equ	0xFDA
  3316                           fsr2l	equ	0xFD9
  3317                           status	equ	0xFD8
  3318                           
  3319 ;; *************** function _eepromWrite *****************
  3320 ;; Defined at:
  3321 ;;		line 65 in file "exprom.h"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  address         1    wreg     unsigned char 
  3324 ;;  value           1   34[COMRAM] unsigned char 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;  address         1    2[BANK0 ] unsigned char 
  3327 ;;  sr              1    3[BANK0 ] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3337 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;Total ram usage:        3 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    3
  3344 ;; This function calls:
  3345 ;;		_SPI1out
  3346 ;;		_delay_ms
  3347 ;;		_eeWait
  3348 ;; This function is called by:
  3349 ;;		_ee_write_char
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           	psect	text15
  3354  001D08                     __ptext15:
  3355                           	opt stack 0
  3356  001D08                     _eepromWrite:
  3357                           	opt stack 25
  3358                           
  3359                           ;incstack = 0
  3360                           ;eepromWrite@address stored from wreg
  3361  001D08  0100               	movlb	0	; () banked
  3362  001D0A  6F62               	movwf	eepromWrite@address& (0+255),b
  3363                           
  3364                           ;exprom.h: 70: unsigned char sr = 0x00;
  3365  001D0C  0E00               	movlw	0
  3366  001D0E  0100               	movlb	0	; () banked
  3367  001D10  6F63               	movwf	eepromWrite@sr& (0+255),b
  3368  001D12                     l2191:
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;exprom.h: 82: (PORTCbits.RC6) = 0;
  3372  001D12  9C82               	bcf	3970,6,c	;volatile
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;exprom.h: 83: SPI1out(0x06);
  3376  001D14  0E06               	movlw	6
  3377  001D16  ECB7  F00F         	call	_SPI1out
  3378                           
  3379                           ;exprom.h: 84: SPI1out(0x05);
  3380  001D1A  0E05               	movlw	5
  3381  001D1C  ECB7  F00F         	call	_SPI1out
  3382                           
  3383                           ;exprom.h: 87: (PORTCbits.RC6) = 1;
  3384  001D20  8C82               	bsf	3970,6,c	;volatile
  3385                           
  3386                           ;exprom.h: 88: (SSP1BUF) = 0x00;
  3387  001D22  0E00               	movlw	0
  3388  001D24  6EC9               	movwf	4041,c	;volatile
  3389                           
  3390                           ;exprom.h: 90: eeWait();
  3391  001D26  ECBF  F00F         	call	_eeWait	;wreg free
  3392                           
  3393                           ;exprom.h: 93: sr = (SSP1BUF);
  3394  001D2A  CFC9 F063          	movff	4041,eepromWrite@sr	;volatile
  3395                           
  3396                           ;exprom.h: 95: if (sr & 0x02 == 0x02) { break; }
  3397  001D2E  0100               	movlb	0	; () banked
  3398  001D30  A163               	btfss	eepromWrite@sr& (0+255),0,b
  3399  001D32  D7EF               	goto	l2191
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;exprom.h: 96: }
  3403                           ;exprom.h: 100: (PORTCbits.RC6) = 0;
  3404                           
  3405                           ; BSR set to: 0
  3406                           
  3407                           ; BSR set to: 0
  3408                           
  3409                           ; BSR set to: 0
  3410  001D34  9C82               	bcf	3970,6,c	;volatile
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;exprom.h: 101: SPI1out(0x02);
  3414  001D36  0E02               	movlw	2
  3415  001D38  ECB7  F00F         	call	_SPI1out
  3416                           
  3417                           ;exprom.h: 102: SPI1out(((address)>>8)&0xFF);
  3418  001D3C  0E00               	movlw	0
  3419  001D3E  ECB7  F00F         	call	_SPI1out
  3420                           
  3421                           ;exprom.h: 103: SPI1out(address&0xFF);
  3422  001D42  0100               	movlb	0	; () banked
  3423  001D44  5162               	movf	eepromWrite@address& (0+255),w,b
  3424  001D46  ECB7  F00F         	call	_SPI1out
  3425                           
  3426                           ;exprom.h: 104: SPI1out(value);
  3427  001D4A  5023               	movf	eepromWrite@value,w,c
  3428  001D4C  ECB7  F00F         	call	_SPI1out
  3429                           
  3430                           ;exprom.h: 106: (PORTCbits.RC6) = 1;
  3431  001D50  8C82               	bsf	3970,6,c	;volatile
  3432                           
  3433                           ;exprom.h: 107: delay_ms(30);
  3434  001D52  0E00               	movlw	0
  3435  001D54  6E21               	movwf	delay_ms@x+1,c
  3436  001D56  0E1E               	movlw	30
  3437  001D58  6E20               	movwf	delay_ms@x,c
  3438  001D5A  EC16  F00F         	call	_delay_ms	;wreg free
  3439  001D5E  0012               	return		;funcret
  3440  001D60                     __end_of_eepromWrite:
  3441                           	opt stack 0
  3442                           tblptru	equ	0xFF8
  3443                           tblptrh	equ	0xFF7
  3444                           tblptrl	equ	0xFF6
  3445                           tablat	equ	0xFF5
  3446                           prodh	equ	0xFF4
  3447                           prodl	equ	0xFF3
  3448                           indf0	equ	0xFEF
  3449                           postinc0	equ	0xFEE
  3450                           fsr0h	equ	0xFEA
  3451                           fsr0l	equ	0xFE9
  3452                           postdec1	equ	0xFE5
  3453                           fsr1l	equ	0xFE1
  3454                           indf2	equ	0xFDF
  3455                           postinc2	equ	0xFDE
  3456                           postdec2	equ	0xFDD
  3457                           fsr2h	equ	0xFDA
  3458                           fsr2l	equ	0xFD9
  3459                           status	equ	0xFD8
  3460                           
  3461 ;; *************** function _eeWait *****************
  3462 ;; Defined at:
  3463 ;;		line 29 in file "exprom.h"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;		None
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;		None
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      void 
  3470 ;; Registers used:
  3471 ;;		None
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;Total ram usage:        0 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    2
  3484 ;; This function calls:
  3485 ;;		Nothing
  3486 ;; This function is called by:
  3487 ;;		_eepromRead
  3488 ;;		_eepromWrite
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text16
  3493  001F7E                     __ptext16:
  3494                           	opt stack 0
  3495  001F7E                     _eeWait:
  3496                           	opt stack 25
  3497  001F7E                     l129:
  3498  001F7E  B0C7               	btfsc	4039,0,c	;volatile
  3499  001F80  0012               	return	
  3500  001F82  D7FD               	goto	l129
  3501  001F84                     __end_of_eeWait:
  3502                           	opt stack 0
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           prodh	equ	0xFF4
  3508                           prodl	equ	0xFF3
  3509                           indf0	equ	0xFEF
  3510                           postinc0	equ	0xFEE
  3511                           fsr0h	equ	0xFEA
  3512                           fsr0l	equ	0xFE9
  3513                           postdec1	equ	0xFE5
  3514                           fsr1l	equ	0xFE1
  3515                           indf2	equ	0xFDF
  3516                           postinc2	equ	0xFDE
  3517                           postdec2	equ	0xFDD
  3518                           fsr2h	equ	0xFDA
  3519                           fsr2l	equ	0xFD9
  3520                           status	equ	0xFD8
  3521                           
  3522 ;; *************** function _SPI1out *****************
  3523 ;; Defined at:
  3524 ;;		line 15 in file "SPI.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;  Code            1    wreg     unsigned char 
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;  Code            1   31[COMRAM] unsigned char 
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;Total ram usage:        1 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    2
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_SPI1init
  3549 ;;		_eepromInit
  3550 ;;		_eepromRead
  3551 ;;		_eepromWrite
  3552 ;;		_SPI_LCD4send
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text17
  3557  001F6E                     __ptext17:
  3558                           	opt stack 0
  3559  001F6E                     _SPI1out:
  3560                           	opt stack 25
  3561                           
  3562                           ;incstack = 0
  3563                           ;SPI1out@Code stored from wreg
  3564  001F6E  6E20               	movwf	SPI1out@Code,c
  3565                           
  3566                           ;SPI.c: 17: SSP1BUF = Code;
  3567  001F70  C020  FFC9         	movff	SPI1out@Code,4041	;volatile
  3568  001F74                     l61:
  3569  001F74  A0C7               	btfss	4039,0,c	;volatile
  3570  001F76  D7FE               	goto	l61
  3571                           
  3572                           ;SPI.c: 19: Code = SSP1BUF;
  3573  001F78  CFC9 F020          	movff	4041,SPI1out@Code	;volatile
  3574  001F7C  0012               	return		;funcret
  3575  001F7E                     __end_of_SPI1out:
  3576                           	opt stack 0
  3577                           tblptru	equ	0xFF8
  3578                           tblptrh	equ	0xFF7
  3579                           tblptrl	equ	0xFF6
  3580                           tablat	equ	0xFF5
  3581                           prodh	equ	0xFF4
  3582                           prodl	equ	0xFF3
  3583                           indf0	equ	0xFEF
  3584                           postinc0	equ	0xFEE
  3585                           fsr0h	equ	0xFEA
  3586                           fsr0l	equ	0xFE9
  3587                           postdec1	equ	0xFE5
  3588                           fsr1l	equ	0xFE1
  3589                           indf2	equ	0xFDF
  3590                           postinc2	equ	0xFDE
  3591                           postdec2	equ	0xFDD
  3592                           fsr2h	equ	0xFDA
  3593                           fsr2l	equ	0xFD9
  3594                           status	equ	0xFD8
  3595                           
  3596 ;; *************** function ___llmod *****************
  3597 ;; Defined at:
  3598 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;  dividend        4    0[BANK0 ] unsigned long 
  3601 ;;  divisor         4    4[BANK0 ] unsigned long 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  counter         1   31[COMRAM] unsigned char 
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  4    0[BANK0 ] unsigned long 
  3606 ;; Registers used:
  3607 ;;		wreg, status,2, status,0
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3613 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;Total ram usage:        9 bytes
  3618 ;; Hardware stack levels used:    1
  3619 ;; Hardware stack levels required when called:    2
  3620 ;; This function calls:
  3621 ;;		Nothing
  3622 ;; This function is called by:
  3623 ;;		_ee_write_num
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text18
  3628  001A40                     __ptext18:
  3629                           	opt stack 0
  3630  001A40                     ___llmod:
  3631                           	opt stack 27
  3632                           
  3633                           ;incstack = 0
  3634  001A40  0100               	movlb	0	; () banked
  3635  001A42  5164               	movf	___llmod@divisor& (0+255),w,b
  3636  001A44  0100               	movlb	0	; () banked
  3637  001A46  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  3638  001A48  0100               	movlb	0	; () banked
  3639  001A4A  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  3640  001A4C  0100               	movlb	0	; () banked
  3641  001A4E  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  3642  001A50  B4D8               	btfsc	status,2,c
  3643  001A52  D037               	goto	l705
  3644                           
  3645                           ; BSR set to: 0
  3646  001A54  0E01               	movlw	1
  3647  001A56  6E20               	movwf	___llmod@counter,c
  3648  001A58  D007               	goto	l2373
  3649  001A5A                     l2371:
  3650                           
  3651                           ; BSR set to: 0
  3652  001A5A  0100               	movlb	0	; () banked
  3653  001A5C  90D8               	bcf	status,0,c
  3654  001A5E  3764               	rlcf	___llmod@divisor& (0+255),f,b
  3655  001A60  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  3656  001A62  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  3657  001A64  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  3658  001A66  2A20               	incf	___llmod@counter,f,c
  3659  001A68                     l2373:
  3660                           
  3661                           ; BSR set to: 0
  3662  001A68  0100               	movlb	0	; () banked
  3663  001A6A  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  3664  001A6C  D7F6               	goto	l2371
  3665  001A6E                     l2375:
  3666                           
  3667                           ; BSR set to: 0
  3668  001A6E  0100               	movlb	0	; () banked
  3669  001A70  5164               	movf	___llmod@divisor& (0+255),w,b
  3670  001A72  0100               	movlb	0	; () banked
  3671  001A74  5D60               	subwf	___llmod@dividend& (0+255),w,b
  3672  001A76  0100               	movlb	0	; () banked
  3673  001A78  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  3674  001A7A  0100               	movlb	0	; () banked
  3675  001A7C  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  3676  001A7E  0100               	movlb	0	; () banked
  3677  001A80  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  3678  001A82  0100               	movlb	0	; () banked
  3679  001A84  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  3680  001A86  0100               	movlb	0	; () banked
  3681  001A88  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  3682  001A8A  0100               	movlb	0	; () banked
  3683  001A8C  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  3684  001A8E  A0D8               	btfss	status,0,c
  3685  001A90  D010               	goto	l2379
  3686                           
  3687                           ; BSR set to: 0
  3688  001A92  0100               	movlb	0	; () banked
  3689  001A94  5164               	movf	___llmod@divisor& (0+255),w,b
  3690  001A96  0100               	movlb	0	; () banked
  3691  001A98  5F60               	subwf	___llmod@dividend& (0+255),f,b
  3692  001A9A  0100               	movlb	0	; () banked
  3693  001A9C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  3694  001A9E  0100               	movlb	0	; () banked
  3695  001AA0  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  3696  001AA2  0100               	movlb	0	; () banked
  3697  001AA4  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  3698  001AA6  0100               	movlb	0	; () banked
  3699  001AA8  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  3700  001AAA  0100               	movlb	0	; () banked
  3701  001AAC  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  3702  001AAE  0100               	movlb	0	; () banked
  3703  001AB0  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  3704  001AB2                     l2379:
  3705                           
  3706                           ; BSR set to: 0
  3707  001AB2  0100               	movlb	0	; () banked
  3708  001AB4  90D8               	bcf	status,0,c
  3709  001AB6  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  3710  001AB8  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  3711  001ABA  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  3712  001ABC  3364               	rrcf	___llmod@divisor& (0+255),f,b
  3713                           
  3714                           ; BSR set to: 0
  3715  001ABE  2E20               	decfsz	___llmod@counter,f,c
  3716  001AC0  D7D6               	goto	l2375
  3717  001AC2                     l705:
  3718                           
  3719                           ; BSR set to: 0
  3720  001AC2  C060  F060         	movff	___llmod@dividend,?___llmod
  3721  001AC6  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  3722  001ACA  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  3723  001ACE  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  3724                           
  3725                           ; BSR set to: 0
  3726  001AD2  0012               	return		;funcret
  3727  001AD4                     __end_of___llmod:
  3728                           	opt stack 0
  3729                           tblptru	equ	0xFF8
  3730                           tblptrh	equ	0xFF7
  3731                           tblptrl	equ	0xFF6
  3732                           tablat	equ	0xFF5
  3733                           prodh	equ	0xFF4
  3734                           prodl	equ	0xFF3
  3735                           indf0	equ	0xFEF
  3736                           postinc0	equ	0xFEE
  3737                           fsr0h	equ	0xFEA
  3738                           fsr0l	equ	0xFE9
  3739                           postdec1	equ	0xFE5
  3740                           fsr1l	equ	0xFE1
  3741                           indf2	equ	0xFDF
  3742                           postinc2	equ	0xFDE
  3743                           postdec2	equ	0xFDD
  3744                           fsr2h	equ	0xFDA
  3745                           fsr2l	equ	0xFD9
  3746                           status	equ	0xFD8
  3747                           
  3748 ;; *************** function ___lldiv *****************
  3749 ;; Defined at:
  3750 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  dividend        4    0[BANK0 ] unsigned long 
  3753 ;;  divisor         4    4[BANK0 ] unsigned long 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  quotient        4    8[BANK0 ] unsigned long 
  3756 ;;  counter         1   12[BANK0 ] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  4    0[BANK0 ] unsigned long 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3766 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;Total ram usage:       13 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    2
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_ee_write_num
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text19
  3781  001790                     __ptext19:
  3782                           	opt stack 0
  3783  001790                     ___lldiv:
  3784                           	opt stack 27
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;incstack = 0
  3788  001790  0E00               	movlw	0
  3789  001792  0100               	movlb	0	; () banked
  3790  001794  6F68               	movwf	___lldiv@quotient& (0+255),b
  3791  001796  0E00               	movlw	0
  3792  001798  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  3793  00179A  0E00               	movlw	0
  3794  00179C  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3795  00179E  0E00               	movlw	0
  3796  0017A0  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3797                           
  3798                           ; BSR set to: 0
  3799  0017A2  0100               	movlb	0	; () banked
  3800  0017A4  5164               	movf	___lldiv@divisor& (0+255),w,b
  3801  0017A6  0100               	movlb	0	; () banked
  3802  0017A8  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3803  0017AA  0100               	movlb	0	; () banked
  3804  0017AC  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3805  0017AE  0100               	movlb	0	; () banked
  3806  0017B0  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3807  0017B2  B4D8               	btfsc	status,2,c
  3808  0017B4  D042               	goto	l695
  3809                           
  3810                           ; BSR set to: 0
  3811  0017B6  0E01               	movlw	1
  3812  0017B8  0100               	movlb	0	; () banked
  3813  0017BA  6F6C               	movwf	___lldiv@counter& (0+255),b
  3814  0017BC  D008               	goto	l2353
  3815  0017BE                     l2351:
  3816                           
  3817                           ; BSR set to: 0
  3818  0017BE  0100               	movlb	0	; () banked
  3819  0017C0  90D8               	bcf	status,0,c
  3820  0017C2  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  3821  0017C4  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3822  0017C6  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3823  0017C8  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3824  0017CA  0100               	movlb	0	; () banked
  3825  0017CC  2B6C               	incf	___lldiv@counter& (0+255),f,b
  3826  0017CE                     l2353:
  3827                           
  3828                           ; BSR set to: 0
  3829  0017CE  0100               	movlb	0	; () banked
  3830  0017D0  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3831  0017D2  D7F5               	goto	l2351
  3832  0017D4                     l2355:
  3833                           
  3834                           ; BSR set to: 0
  3835  0017D4  0100               	movlb	0	; () banked
  3836  0017D6  90D8               	bcf	status,0,c
  3837  0017D8  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  3838  0017DA  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3839  0017DC  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3840  0017DE  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3841                           
  3842                           ; BSR set to: 0
  3843  0017E0  0100               	movlb	0	; () banked
  3844  0017E2  5164               	movf	___lldiv@divisor& (0+255),w,b
  3845  0017E4  0100               	movlb	0	; () banked
  3846  0017E6  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  3847  0017E8  0100               	movlb	0	; () banked
  3848  0017EA  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3849  0017EC  0100               	movlb	0	; () banked
  3850  0017EE  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3851  0017F0  0100               	movlb	0	; () banked
  3852  0017F2  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3853  0017F4  0100               	movlb	0	; () banked
  3854  0017F6  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3855  0017F8  0100               	movlb	0	; () banked
  3856  0017FA  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3857  0017FC  0100               	movlb	0	; () banked
  3858  0017FE  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3859  001800  A0D8               	btfss	status,0,c
  3860  001802  D012               	goto	l2363
  3861                           
  3862                           ; BSR set to: 0
  3863  001804  0100               	movlb	0	; () banked
  3864  001806  5164               	movf	___lldiv@divisor& (0+255),w,b
  3865  001808  0100               	movlb	0	; () banked
  3866  00180A  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  3867  00180C  0100               	movlb	0	; () banked
  3868  00180E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3869  001810  0100               	movlb	0	; () banked
  3870  001812  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3871  001814  0100               	movlb	0	; () banked
  3872  001816  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3873  001818  0100               	movlb	0	; () banked
  3874  00181A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3875  00181C  0100               	movlb	0	; () banked
  3876  00181E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3877  001820  0100               	movlb	0	; () banked
  3878  001822  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3879                           
  3880                           ; BSR set to: 0
  3881  001824  0100               	movlb	0	; () banked
  3882  001826  8168               	bsf	___lldiv@quotient& (0+255),0,b
  3883  001828                     l2363:
  3884                           
  3885                           ; BSR set to: 0
  3886  001828  0100               	movlb	0	; () banked
  3887  00182A  90D8               	bcf	status,0,c
  3888  00182C  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3889  00182E  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3890  001830  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3891  001832  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  3892                           
  3893                           ; BSR set to: 0
  3894  001834  0100               	movlb	0	; () banked
  3895  001836  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  3896  001838  D7CD               	goto	l2355
  3897  00183A                     l695:
  3898                           
  3899                           ; BSR set to: 0
  3900  00183A  C068  F060         	movff	___lldiv@quotient,?___lldiv
  3901  00183E  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  3902  001842  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  3903  001846  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  3904                           
  3905                           ; BSR set to: 0
  3906  00184A  0012               	return		;funcret
  3907  00184C                     __end_of___lldiv:
  3908                           	opt stack 0
  3909                           tblptru	equ	0xFF8
  3910                           tblptrh	equ	0xFF7
  3911                           tblptrl	equ	0xFF6
  3912                           tablat	equ	0xFF5
  3913                           prodh	equ	0xFF4
  3914                           prodl	equ	0xFF3
  3915                           indf0	equ	0xFEF
  3916                           postinc0	equ	0xFEE
  3917                           fsr0h	equ	0xFEA
  3918                           fsr0l	equ	0xFE9
  3919                           postdec1	equ	0xFE5
  3920                           fsr1l	equ	0xFE1
  3921                           indf2	equ	0xFDF
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function _Read_KeyPad *****************
  3929 ;; Defined at:
  3930 ;;		line 14 in file "Keypad.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;		None
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  i               2    1[BANK0 ] int 
  3935 ;;  code            1    4[BANK0 ] unsigned char 
  3936 ;;  Col             1    3[BANK0 ] unsigned char 
  3937 ;;  value           1    0[BANK0 ] unsigned char 
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  1    wreg      unsigned char 
  3940 ;; Registers used:
  3941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;Total ram usage:        5 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    3
  3954 ;; This function calls:
  3955 ;;		_process_key
  3956 ;; This function is called by:
  3957 ;;		_main
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text20
  3962  001B66                     __ptext20:
  3963                           	opt stack 0
  3964  001B66                     _Read_KeyPad:
  3965                           	opt stack 27
  3966                           
  3967                           ;Keypad.c: 16: unsigned char code,Col,value;
  3968                           ;Keypad.c: 17: int i;
  3969                           ;Keypad.c: 18: value = 0xFF;
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;incstack = 0
  3973  001B66  0100               	movlb	0	; () banked
  3974  001B68  6960               	setf	Read_KeyPad@value& (0+255),b
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;Keypad.c: 19: Col = 0b11111110;
  3978  001B6A  0EFE               	movlw	254
  3979  001B6C  0100               	movlb	0	; () banked
  3980  001B6E  6F63               	movwf	Read_KeyPad@Col& (0+255),b
  3981                           
  3982                           ;Keypad.c: 20: for (i=0;i<4;i++)
  3983  001B70  0E00               	movlw	0
  3984  001B72  0100               	movlb	0	; () banked
  3985  001B74  6F62               	movwf	(Read_KeyPad@i+1)& (0+255),b
  3986  001B76  0E00               	movlw	0
  3987  001B78  6F61               	movwf	Read_KeyPad@i& (0+255),b
  3988  001B7A                     l2387:
  3989                           
  3990                           ; BSR set to: 0
  3991  001B7A  0100               	movlb	0	; () banked
  3992  001B7C  BF62               	btfsc	(Read_KeyPad@i+1)& (0+255),7,b
  3993  001B7E  D008               	goto	l16
  3994  001B80  0100               	movlb	0	; () banked
  3995  001B82  5162               	movf	(Read_KeyPad@i+1)& (0+255),w,b
  3996  001B84  E128               	bnz	l2401
  3997  001B86  0E04               	movlw	4
  3998  001B88  0100               	movlb	0	; () banked
  3999  001B8A  5D61               	subwf	Read_KeyPad@i& (0+255),w,b
  4000  001B8C  B0D8               	btfsc	status,0,c
  4001  001B8E  D023               	goto	l2401
  4002  001B90                     l16:
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;Keypad.c: 21: {
  4006                           ;Keypad.c: 22: LATD = Col;
  4007  001B90  C063  FF8C         	movff	Read_KeyPad@Col,3980	;volatile
  4008                           
  4009                           ;Keypad.c: 23: code = PORTD;
  4010  001B94  CF83 F064          	movff	3971,Read_KeyPad@code	;volatile
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;Keypad.c: 24: code = code | 0b00001111;
  4014  001B98  0100               	movlb	0	; () banked
  4015  001B9A  5164               	movf	Read_KeyPad@code& (0+255),w,b
  4016  001B9C  090F               	iorlw	15
  4017  001B9E  0100               	movlb	0	; () banked
  4018  001BA0  6F64               	movwf	Read_KeyPad@code& (0+255),b
  4019                           
  4020                           ;Keypad.c: 25: code = code & Col;
  4021  001BA2  0100               	movlb	0	; () banked
  4022  001BA4  5164               	movf	Read_KeyPad@code& (0+255),w,b
  4023  001BA6  0100               	movlb	0	; () banked
  4024  001BA8  1563               	andwf	Read_KeyPad@Col& (0+255),w,b
  4025  001BAA  0100               	movlb	0	; () banked
  4026  001BAC  6F64               	movwf	Read_KeyPad@code& (0+255),b
  4027                           
  4028                           ;Keypad.c: 26: if (code!=Col)
  4029  001BAE  0100               	movlb	0	; () banked
  4030  001BB0  5163               	movf	Read_KeyPad@Col& (0+255),w,b
  4031  001BB2  0100               	movlb	0	; () banked
  4032  001BB4  1964               	xorwf	Read_KeyPad@code& (0+255),w,b
  4033  001BB6  B4D8               	btfsc	status,2,c
  4034  001BB8  D007               	goto	l2395
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;Keypad.c: 27: {
  4038                           ;Keypad.c: 28: value = process_key(code);
  4039  001BBA  0100               	movlb	0	; () banked
  4040  001BBC  5164               	movf	Read_KeyPad@code& (0+255),w,b
  4041  001BBE  EC34  F00F         	call	_process_key
  4042  001BC2  0100               	movlb	0	; () banked
  4043  001BC4  6F60               	movwf	Read_KeyPad@value& (0+255),b
  4044                           
  4045                           ;Keypad.c: 29: break;
  4046  001BC6  D007               	goto	l2401
  4047  001BC8                     l2395:
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;Keypad.c: 30: }
  4051                           ;Keypad.c: 31: Col = (Col << 1) | 0x01;
  4052  001BC8  80D8               	bsf	status,0,c
  4053  001BCA  0100               	movlb	0	; () banked
  4054  001BCC  3763               	rlcf	Read_KeyPad@Col& (0+255),f,b
  4055                           
  4056                           ; BSR set to: 0
  4057  001BCE  0100               	movlb	0	; () banked
  4058  001BD0  4B61               	infsnz	Read_KeyPad@i& (0+255),f,b
  4059  001BD2  2B62               	incf	(Read_KeyPad@i+1)& (0+255),f,b
  4060  001BD4  D7D2               	goto	l2387
  4061  001BD6                     l2401:
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;Keypad.c: 32: }
  4065                           ;Keypad.c: 34: return(value);
  4066  001BD6  0100               	movlb	0	; () banked
  4067  001BD8  5160               	movf	Read_KeyPad@value& (0+255),w,b
  4068  001BDA  0012               	return	
  4069  001BDC                     __end_of_Read_KeyPad:
  4070                           	opt stack 0
  4071                           tblptru	equ	0xFF8
  4072                           tblptrh	equ	0xFF7
  4073                           tblptrl	equ	0xFF6
  4074                           tablat	equ	0xFF5
  4075                           prodh	equ	0xFF4
  4076                           prodl	equ	0xFF3
  4077                           indf0	equ	0xFEF
  4078                           postinc0	equ	0xFEE
  4079                           fsr0h	equ	0xFEA
  4080                           fsr0l	equ	0xFE9
  4081                           postdec1	equ	0xFE5
  4082                           fsr1l	equ	0xFE1
  4083                           indf2	equ	0xFDF
  4084                           postinc2	equ	0xFDE
  4085                           postdec2	equ	0xFDD
  4086                           fsr2h	equ	0xFDA
  4087                           fsr2l	equ	0xFD9
  4088                           status	equ	0xFD8
  4089                           
  4090 ;; *************** function _process_key *****************
  4091 ;; Defined at:
  4092 ;;		line 37 in file "Keypad.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;  code            1    wreg     unsigned char 
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;  code            1   32[COMRAM] unsigned char 
  4097 ;;  i               1   33[COMRAM] unsigned char 
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      unsigned char 
  4100 ;; Registers used:
  4101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4110 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4111 ;;Total ram usage:        3 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    2
  4114 ;; This function calls:
  4115 ;;		Nothing
  4116 ;; This function is called by:
  4117 ;;		_Read_KeyPad
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text21
  4122  001E68                     __ptext21:
  4123                           	opt stack 0
  4124  001E68                     _process_key:
  4125                           	opt stack 27
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;incstack = 0
  4129                           ;process_key@code stored from wreg
  4130  001E68  6E21               	movwf	process_key@code,c
  4131                           
  4132                           ;Keypad.c: 39: unsigned char i;
  4133                           ;Keypad.c: 40: for (i=0;i<16;i++)
  4134  001E6A  0E00               	movlw	0
  4135  001E6C  6E22               	movwf	process_key@i,c
  4136  001E6E                     l2299:
  4137  001E6E  0E0F               	movlw	15
  4138  001E70  6422               	cpfsgt	process_key@i,c
  4139  001E72  D001               	goto	l2303
  4140  001E74  D010               	goto	l2313
  4141  001E76                     l2303:
  4142                           
  4143                           ;Keypad.c: 41: {
  4144                           ;Keypad.c: 42: if (code==scan_code[i]) return i;
  4145  001E76  5022               	movf	process_key@i,w,c
  4146  001E78  0D01               	mullw	1
  4147  001E7A  0E24               	movlw	low _scan_code
  4148  001E7C  24F3               	addwf	prodl,w,c
  4149  001E7E  6ED9               	movwf	fsr2l,c
  4150  001E80  0E00               	movlw	high _scan_code
  4151  001E82  20F4               	addwfc	prodh,w,c
  4152  001E84  6EDA               	movwf	fsr2h,c
  4153  001E86  5021               	movf	process_key@code,w,c
  4154  001E88  18DE               	xorwf	postinc2,w,c
  4155  001E8A  A4D8               	btfss	status,2,c
  4156  001E8C  D002               	goto	l2309
  4157  001E8E  5022               	movf	process_key@i,w,c
  4158  001E90  0012               	return	
  4159  001E92                     l2309:
  4160  001E92  2A22               	incf	process_key@i,f,c
  4161  001E94  D7EC               	goto	l2299
  4162  001E96                     l2313:
  4163                           
  4164                           ;Keypad.c: 43: }
  4165                           ;Keypad.c: 44: return(0xFF);
  4166  001E96  0EFF               	movlw	255
  4167  001E98  0012               	return	
  4168  001E9A                     __end_of_process_key:
  4169                           	opt stack 0
  4170                           tblptru	equ	0xFF8
  4171                           tblptrh	equ	0xFF7
  4172                           tblptrl	equ	0xFF6
  4173                           tablat	equ	0xFF5
  4174                           prodh	equ	0xFF4
  4175                           prodl	equ	0xFF3
  4176                           indf0	equ	0xFEF
  4177                           postinc0	equ	0xFEE
  4178                           fsr0h	equ	0xFEA
  4179                           fsr0l	equ	0xFE9
  4180                           postdec1	equ	0xFE5
  4181                           fsr1l	equ	0xFE1
  4182                           indf2	equ	0xFDF
  4183                           postinc2	equ	0xFDE
  4184                           postdec2	equ	0xFDD
  4185                           fsr2h	equ	0xFDA
  4186                           fsr2l	equ	0xFD9
  4187                           status	equ	0xFD8
  4188                           
  4189 ;; *************** function _LCD8init *****************
  4190 ;; Defined at:
  4191 ;;		line 12 in file "LCD8.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg, status,2, status,0, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;Total ram usage:        0 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    4
  4212 ;; This function calls:
  4213 ;;		_LCD8send
  4214 ;;		_delay_ms
  4215 ;; This function is called by:
  4216 ;;		_main
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text22
  4221  0016D2                     __ptext22:
  4222                           	opt stack 0
  4223  0016D2                     _LCD8init:
  4224                           	opt stack 26
  4225                           
  4226                           ;LCD8.c: 14: TRISE = 0x00;
  4227                           
  4228                           ;incstack = 0
  4229  0016D2  0E00               	movlw	0
  4230  0016D4  6E96               	movwf	3990,c	;volatile
  4231                           
  4232                           ;LCD8.c: 15: TRISH = 0b11111000;
  4233  0016D6  0EF8               	movlw	248
  4234  0016D8  6E99               	movwf	3993,c	;volatile
  4235                           
  4236                           ;LCD8.c: 16: LATHbits.LATH1 = 0;
  4237  0016DA  9290               	bcf	3984,1,c	;volatile
  4238                           
  4239                           ;LCD8.c: 17: LATHbits.LATH0 = 0;
  4240  0016DC  9090               	bcf	3984,0,c	;volatile
  4241                           
  4242                           ;LCD8.c: 18: LATHbits.LATH2 = 0;
  4243  0016DE  9490               	bcf	3984,2,c	;volatile
  4244                           
  4245                           ;LCD8.c: 19: delay_ms(200);
  4246  0016E0  0E00               	movlw	0
  4247  0016E2  6E21               	movwf	delay_ms@x+1,c
  4248  0016E4  0EC8               	movlw	200
  4249  0016E6  6E20               	movwf	delay_ms@x,c
  4250  0016E8  EC16  F00F         	call	_delay_ms	;wreg free
  4251                           
  4252                           ;LCD8.c: 21: LCD8send(0x30,0);
  4253  0016EC  0E00               	movlw	0
  4254  0016EE  6E23               	movwf	LCD8send@mode,c
  4255  0016F0  0E30               	movlw	48
  4256  0016F2  ECF8  F00E         	call	_LCD8send
  4257                           
  4258                           ;LCD8.c: 22: LCD8send(0x30,0);
  4259  0016F6  0E00               	movlw	0
  4260  0016F8  6E23               	movwf	LCD8send@mode,c
  4261  0016FA  0E30               	movlw	48
  4262  0016FC  ECF8  F00E         	call	_LCD8send
  4263                           
  4264                           ;LCD8.c: 23: LCD8send(0x30,0);
  4265  001700  0E00               	movlw	0
  4266  001702  6E23               	movwf	LCD8send@mode,c
  4267  001704  0E30               	movlw	48
  4268  001706  ECF8  F00E         	call	_LCD8send
  4269                           
  4270                           ;LCD8.c: 24: LCD8send(0x38,0);
  4271  00170A  0E00               	movlw	0
  4272  00170C  6E23               	movwf	LCD8send@mode,c
  4273  00170E  0E38               	movlw	56
  4274  001710  ECF8  F00E         	call	_LCD8send
  4275                           
  4276                           ;LCD8.c: 25: LCD8send(0x10,0);
  4277  001714  0E00               	movlw	0
  4278  001716  6E23               	movwf	LCD8send@mode,c
  4279  001718  0E10               	movlw	16
  4280  00171A  ECF8  F00E         	call	_LCD8send
  4281                           
  4282                           ;LCD8.c: 26: LCD8send(0x0F,0);
  4283  00171E  0E00               	movlw	0
  4284  001720  6E23               	movwf	LCD8send@mode,c
  4285  001722  0E0F               	movlw	15
  4286  001724  ECF8  F00E         	call	_LCD8send
  4287                           
  4288                           ;LCD8.c: 27: LCD8send(0x06,0);
  4289  001728  0E00               	movlw	0
  4290  00172A  6E23               	movwf	LCD8send@mode,c
  4291  00172C  0E06               	movlw	6
  4292  00172E  ECF8  F00E         	call	_LCD8send
  4293                           
  4294                           ;LCD8.c: 28: LCD8send(0x01,0);
  4295  001732  0E00               	movlw	0
  4296  001734  6E23               	movwf	LCD8send@mode,c
  4297  001736  0E01               	movlw	1
  4298  001738  ECF8  F00E         	call	_LCD8send
  4299                           
  4300                           ;LCD8.c: 29: delay_ms(100);
  4301  00173C  0E00               	movlw	0
  4302  00173E  6E21               	movwf	delay_ms@x+1,c
  4303  001740  0E64               	movlw	100
  4304  001742  6E20               	movwf	delay_ms@x,c
  4305  001744  EC16  F00F         	call	_delay_ms	;wreg free
  4306                           
  4307                           ;LCD8.c: 31: LCD8send(0x8A,0);
  4308  001748  0E00               	movlw	0
  4309  00174A  6E23               	movwf	LCD8send@mode,c
  4310  00174C  0E8A               	movlw	138
  4311  00174E  ECF8  F00E         	call	_LCD8send
  4312                           
  4313                           ;LCD8.c: 33: LCD8send('N',1);
  4314  001752  0E01               	movlw	1
  4315  001754  6E23               	movwf	LCD8send@mode,c
  4316  001756  0E4E               	movlw	78
  4317  001758  ECF8  F00E         	call	_LCD8send
  4318                           
  4319                           ;LCD8.c: 34: LCD8send('A',1);
  4320  00175C  0E01               	movlw	1
  4321  00175E  6E23               	movwf	LCD8send@mode,c
  4322  001760  0E41               	movlw	65
  4323  001762  ECF8  F00E         	call	_LCD8send
  4324                           
  4325                           ;LCD8.c: 35: LCD8send('M',1);
  4326  001766  0E01               	movlw	1
  4327  001768  6E23               	movwf	LCD8send@mode,c
  4328  00176A  0E4D               	movlw	77
  4329  00176C  ECF8  F00E         	call	_LCD8send
  4330                           
  4331                           ;LCD8.c: 36: LCD8send('E',1);
  4332  001770  0E01               	movlw	1
  4333  001772  6E23               	movwf	LCD8send@mode,c
  4334  001774  0E45               	movlw	69
  4335  001776  ECF8  F00E         	call	_LCD8send
  4336                           
  4337                           ;LCD8.c: 38: LCD8send(0xC0,0);
  4338  00177A  0E00               	movlw	0
  4339  00177C  6E23               	movwf	LCD8send@mode,c
  4340  00177E  0EC0               	movlw	192
  4341  001780  ECF8  F00E         	call	_LCD8send
  4342                           
  4343                           ;LCD8.c: 39: LCD8send('#',1);
  4344  001784  0E01               	movlw	1
  4345  001786  6E23               	movwf	LCD8send@mode,c
  4346  001788  0E23               	movlw	35
  4347  00178A  ECF8  F00E         	call	_LCD8send
  4348  00178E  0012               	return		;funcret
  4349  001790                     __end_of_LCD8init:
  4350                           	opt stack 0
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           prodh	equ	0xFF4
  4356                           prodl	equ	0xFF3
  4357                           indf0	equ	0xFEF
  4358                           postinc0	equ	0xFEE
  4359                           fsr0h	equ	0xFEA
  4360                           fsr0l	equ	0xFE9
  4361                           postdec1	equ	0xFE5
  4362                           fsr1l	equ	0xFE1
  4363                           indf2	equ	0xFDF
  4364                           postinc2	equ	0xFDE
  4365                           postdec2	equ	0xFDD
  4366                           fsr2h	equ	0xFDA
  4367                           fsr2l	equ	0xFD9
  4368                           status	equ	0xFD8
  4369                           
  4370 ;; *************** function _LCD8send *****************
  4371 ;; Defined at:
  4372 ;;		line 42 in file "LCD8.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;  c               1    wreg     unsigned char 
  4375 ;;  mode            1   34[COMRAM] unsigned char 
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;  c               1    2[BANK0 ] unsigned char 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  1    wreg      void 
  4380 ;; Registers used:
  4381 ;;		wreg, status,2, status,0, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4387 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;Total ram usage:        2 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    3
  4394 ;; This function calls:
  4395 ;;		_delay_ms
  4396 ;;		_delay_us
  4397 ;; This function is called by:
  4398 ;;		_LCD8init
  4399 ;;		_lcdWriteLine
  4400 ;;		_writeLCD
  4401 ;;		_main
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text23
  4406  001DF0                     __ptext23:
  4407                           	opt stack 0
  4408  001DF0                     _LCD8send:
  4409                           	opt stack 25
  4410                           
  4411                           ;incstack = 0
  4412                           ;LCD8send@c stored from wreg
  4413  001DF0  0100               	movlb	0	; () banked
  4414  001DF2  6F62               	movwf	LCD8send@c& (0+255),b
  4415                           
  4416                           ;LCD8.c: 43: LATHbits.LATH2 = mode;
  4417  001DF4  B023               	btfsc	LCD8send@mode,0,c
  4418  001DF6  D002               	bra	u1425
  4419  001DF8  9490               	bcf	3984,2,c	;volatile
  4420  001DFA  D001               	bra	u1426
  4421  001DFC                     u1425:
  4422  001DFC  8490               	bsf	3984,2,c	;volatile
  4423  001DFE                     u1426:
  4424                           
  4425                           ;LCD8.c: 44: delay_ms(1);
  4426  001DFE  0E00               	movlw	0
  4427  001E00  6E21               	movwf	delay_ms@x+1,c
  4428  001E02  0E01               	movlw	1
  4429  001E04  6E20               	movwf	delay_ms@x,c
  4430  001E06  EC16  F00F         	call	_delay_ms	;wreg free
  4431                           
  4432                           ;LCD8.c: 46: LATE = c;
  4433  001E0A  C062  FF8D         	movff	LCD8send@c,3981	;volatile
  4434                           
  4435                           ;LCD8.c: 47: LATHbits.LATH0 = 1;
  4436  001E0E  8090               	bsf	3984,0,c	;volatile
  4437                           
  4438                           ;LCD8.c: 48: delay_us(1);
  4439  001E10  0E00               	movlw	0
  4440  001E12  6E21               	movwf	delay_us@x+1,c
  4441  001E14  0E01               	movlw	1
  4442  001E16  6E20               	movwf	delay_us@x,c
  4443  001E18  EC4D  F00F         	call	_delay_us	;wreg free
  4444                           
  4445                           ;LCD8.c: 49: LATHbits.LATH0 = 0;
  4446  001E1C  9090               	bcf	3984,0,c	;volatile
  4447                           
  4448                           ;LCD8.c: 50: delay_us(50);
  4449  001E1E  0E00               	movlw	0
  4450  001E20  6E21               	movwf	delay_us@x+1,c
  4451  001E22  0E32               	movlw	50
  4452  001E24  6E20               	movwf	delay_us@x,c
  4453  001E26  EC4D  F00F         	call	_delay_us	;wreg free
  4454  001E2A  0012               	return		;funcret
  4455  001E2C                     __end_of_LCD8send:
  4456                           	opt stack 0
  4457                           tblptru	equ	0xFF8
  4458                           tblptrh	equ	0xFF7
  4459                           tblptrl	equ	0xFF6
  4460                           tablat	equ	0xFF5
  4461                           prodh	equ	0xFF4
  4462                           prodl	equ	0xFF3
  4463                           indf0	equ	0xFEF
  4464                           postinc0	equ	0xFEE
  4465                           fsr0h	equ	0xFEA
  4466                           fsr0l	equ	0xFE9
  4467                           postdec1	equ	0xFE5
  4468                           fsr1l	equ	0xFE1
  4469                           indf2	equ	0xFDF
  4470                           postinc2	equ	0xFDE
  4471                           postdec2	equ	0xFDD
  4472                           fsr2h	equ	0xFDA
  4473                           fsr2l	equ	0xFD9
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function _delay_us *****************
  4477 ;; Defined at:
  4478 ;;		line 87 in file "delay.h"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  x               2   31[COMRAM] int 
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;  i               2    0[BANK0 ] int 
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  1    wreg      void 
  4485 ;; Registers used:
  4486 ;;		wreg, status,2, status,0
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4492 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;Total ram usage:        5 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    2
  4499 ;; This function calls:
  4500 ;;		Nothing
  4501 ;; This function is called by:
  4502 ;;		_LCD8send
  4503 ;;		_SPI_LCD4send
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           	psect	text24
  4508  001E9A                     __ptext24:
  4509                           	opt stack 0
  4510  001E9A                     _delay_us:
  4511                           	opt stack 25
  4512                           
  4513                           ;delay.h: 89: for (int i = 0; i < x; i++)
  4514                           
  4515                           ;incstack = 0
  4516  001E9A  0E00               	movlw	0
  4517  001E9C  0100               	movlb	0	; () banked
  4518  001E9E  6F61               	movwf	(delay_us@i+1)& (0+255),b
  4519  001EA0  0E00               	movlw	0
  4520  001EA2  6F60               	movwf	delay_us@i& (0+255),b
  4521  001EA4  D006               	goto	l2115
  4522  001EA6                     l122:
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;delay.h: 90: {
  4526                           ;delay.h: 91: _delay((unsigned long)((1)*(25000000/4000000.0)));
  4527  001EA6  D000               	nop2		;2 cycle nop
  4528  001EA8  D000               	nop2		;2 cycle nop
  4529  001EAA  D000               	nop2		;2 cycle nop
  4530  001EAC  0100               	movlb	0	; () banked
  4531  001EAE  4B60               	infsnz	delay_us@i& (0+255),f,b
  4532  001EB0  2B61               	incf	(delay_us@i+1)& (0+255),f,b
  4533  001EB2                     l2115:
  4534                           
  4535                           ; BSR set to: 0
  4536  001EB2  5020               	movf	delay_us@x,w,c
  4537  001EB4  0100               	movlb	0	; () banked
  4538  001EB6  5D60               	subwf	delay_us@i& (0+255),w,b
  4539  001EB8  0100               	movlb	0	; () banked
  4540  001EBA  5161               	movf	(delay_us@i+1)& (0+255),w,b
  4541  001EBC  0A80               	xorlw	128
  4542  001EBE  6E22               	movwf	??_delay_us& (0+255),c
  4543  001EC0  5021               	movf	delay_us@x+1,w,c
  4544  001EC2  0A80               	xorlw	128
  4545  001EC4  5822               	subwfb	??_delay_us& (0+255),w,c
  4546  001EC6  B0D8               	btfsc	status,0,c
  4547  001EC8  0012               	return	
  4548  001ECA  D7ED               	goto	l122
  4549  001ECC                     __end_of_delay_us:
  4550                           	opt stack 0
  4551                           tblptru	equ	0xFF8
  4552                           tblptrh	equ	0xFF7
  4553                           tblptrl	equ	0xFF6
  4554                           tablat	equ	0xFF5
  4555                           prodh	equ	0xFF4
  4556                           prodl	equ	0xFF3
  4557                           indf0	equ	0xFEF
  4558                           postinc0	equ	0xFEE
  4559                           fsr0h	equ	0xFEA
  4560                           fsr0l	equ	0xFE9
  4561                           postdec1	equ	0xFE5
  4562                           fsr1l	equ	0xFE1
  4563                           indf2	equ	0xFDF
  4564                           postinc2	equ	0xFDE
  4565                           postdec2	equ	0xFDD
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function _delay_ms *****************
  4571 ;; Defined at:
  4572 ;;		line 79 in file "delay.h"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  x               2   31[COMRAM] int 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  i               2    0[BANK0 ] int 
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  1    wreg      void 
  4579 ;; Registers used:
  4580 ;;		wreg, status,2, status,0
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4586 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;Total ram usage:        5 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    2
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_LCD8init
  4597 ;;		_LCD8send
  4598 ;;		_eepromWrite
  4599 ;;		_main
  4600 ;;		_SPI_LCD4send
  4601 ;;		_SPI_LCD4init
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text25
  4606  001E2C                     __ptext25:
  4607                           	opt stack 0
  4608  001E2C                     _delay_ms:
  4609                           	opt stack 25
  4610                           
  4611                           ;delay.h: 81: for (int i = 0; i < x; i++)
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;incstack = 0
  4615  001E2C  0E00               	movlw	0
  4616  001E2E  0100               	movlb	0	; () banked
  4617  001E30  6F61               	movwf	(delay_ms@i+1)& (0+255),b
  4618  001E32  0E00               	movlw	0
  4619  001E34  6F60               	movwf	delay_ms@i& (0+255),b
  4620  001E36  D00B               	goto	l115
  4621  001E38                     l2107:
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;delay.h: 82: {
  4625                           ;delay.h: 83: _delay((unsigned long)((1)*(25000000/4000.0)));
  4626  001E38  0E09               	movlw	9
  4627  001E3A  6E22               	movwf	??_delay_ms& (0+255),c
  4628  001E3C  0E1C               	movlw	28
  4629  001E3E                     u2067:
  4630  001E3E  2EE8               	decfsz	wreg,f,c
  4631  001E40  D7FE               	goto	u2067
  4632  001E42  2E22               	decfsz	??_delay_ms& (0+255),f,c
  4633  001E44  D7FC               	goto	u2067
  4634  001E46  D000               	nop2	
  4635  001E48  0100               	movlb	0	; () banked
  4636  001E4A  4B60               	infsnz	delay_ms@i& (0+255),f,b
  4637  001E4C  2B61               	incf	(delay_ms@i+1)& (0+255),f,b
  4638  001E4E                     l115:
  4639                           
  4640                           ; BSR set to: 0
  4641  001E4E  5020               	movf	delay_ms@x,w,c
  4642  001E50  0100               	movlb	0	; () banked
  4643  001E52  5D60               	subwf	delay_ms@i& (0+255),w,b
  4644  001E54  0100               	movlb	0	; () banked
  4645  001E56  5161               	movf	(delay_ms@i+1)& (0+255),w,b
  4646  001E58  0A80               	xorlw	128
  4647  001E5A  6E22               	movwf	??_delay_ms& (0+255),c
  4648  001E5C  5021               	movf	delay_ms@x+1,w,c
  4649  001E5E  0A80               	xorlw	128
  4650  001E60  5822               	subwfb	??_delay_ms& (0+255),w,c
  4651  001E62  B0D8               	btfsc	status,0,c
  4652  001E64  0012               	return	
  4653  001E66  D7E8               	goto	l2107
  4654  001E68                     __end_of_delay_ms:
  4655                           	opt stack 0
  4656                           tblptru	equ	0xFF8
  4657                           tblptrh	equ	0xFF7
  4658                           tblptrl	equ	0xFF6
  4659                           tablat	equ	0xFF5
  4660                           prodh	equ	0xFF4
  4661                           prodl	equ	0xFF3
  4662                           indf0	equ	0xFEF
  4663                           postinc0	equ	0xFEE
  4664                           fsr0h	equ	0xFEA
  4665                           fsr0l	equ	0xFE9
  4666                           wreg	equ	0xFE8
  4667                           postdec1	equ	0xFE5
  4668                           fsr1l	equ	0xFE1
  4669                           indf2	equ	0xFDF
  4670                           postinc2	equ	0xFDE
  4671                           postdec2	equ	0xFDD
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _KeyPadinit *****************
  4677 ;; Defined at:
  4678 ;;		line 10 in file "Keypad.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;		None
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;		None
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  1    wreg      void 
  4685 ;; Registers used:
  4686 ;;		wreg, status,2
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;Total ram usage:        0 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    2
  4699 ;; This function calls:
  4700 ;;		Nothing
  4701 ;; This function is called by:
  4702 ;;		_main
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text26
  4707  001F84                     __ptext26:
  4708                           	opt stack 0
  4709  001F84                     _KeyPadinit:
  4710                           	opt stack 28
  4711                           
  4712                           ;Keypad.c: 11: TRISD = 0xF0;
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;incstack = 0
  4716  001F84  0EF0               	movlw	240
  4717  001F86  6E95               	movwf	3989,c	;volatile
  4718  001F88  0012               	return		;funcret
  4719  001F8A                     __end_of_KeyPadinit:
  4720                           	opt stack 0
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           indf0	equ	0xFEF
  4728                           postinc0	equ	0xFEE
  4729                           fsr0h	equ	0xFEA
  4730                           fsr0l	equ	0xFE9
  4731                           wreg	equ	0xFE8
  4732                           postdec1	equ	0xFE5
  4733                           fsr1l	equ	0xFE1
  4734                           indf2	equ	0xFDF
  4735                           postinc2	equ	0xFDE
  4736                           postdec2	equ	0xFDD
  4737                           fsr2h	equ	0xFDA
  4738                           fsr2l	equ	0xFD9
  4739                           status	equ	0xFD8
  4740                           
  4741 ;; *************** function _LowIsr *****************
  4742 ;; Defined at:
  4743 ;;		line 32 in file "test.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;		None
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;		None
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  1    wreg      void 
  4750 ;; Registers used:
  4751 ;;		None
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4759 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;Total ram usage:       17 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    1
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		Interrupt level 1
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	intcodelo
  4772  000018                     __pintcodelo:
  4773                           	opt stack 0
  4774  000018                     _LowIsr:
  4775                           	opt stack 24
  4776                           
  4777                           ;incstack = 0
  4778  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4779  00001A  CFD8 F00F          	movff	status,??_LowIsr
  4780  00001E  CFE8 F010          	movff	wreg,??_LowIsr+1
  4781  000022  CFE0 F011          	movff	bsr,??_LowIsr+2
  4782  000026  CFFA F012          	movff	pclath,??_LowIsr+3
  4783  00002A  CFFB F013          	movff	pclatu,??_LowIsr+4
  4784  00002E  CFE9 F014          	movff	fsr0l,??_LowIsr+5
  4785  000032  CFEA F015          	movff	fsr0h,??_LowIsr+6
  4786  000036  CFE1 F016          	movff	fsr1l,??_LowIsr+7
  4787  00003A  CFE2 F017          	movff	fsr1h,??_LowIsr+8
  4788  00003E  CFD9 F018          	movff	fsr2l,??_LowIsr+9
  4789  000042  CFDA F019          	movff	fsr2h,??_LowIsr+10
  4790  000046  CFF3 F01A          	movff	prodl,??_LowIsr+11
  4791  00004A  CFF4 F01B          	movff	prodh,??_LowIsr+12
  4792  00004E  CFF6 F01C          	movff	tblptrl,??_LowIsr+13
  4793  000052  CFF7 F01D          	movff	tblptrh,??_LowIsr+14
  4794  000056  CFF8 F01E          	movff	tblptru,??_LowIsr+15
  4795  00005A  CFF5 F01F          	movff	tablat,??_LowIsr+16
  4796  00005E  C01F  FFF5         	movff	??_LowIsr+16,tablat
  4797  000062  C01E  FFF8         	movff	??_LowIsr+15,tblptru
  4798  000066  C01D  FFF7         	movff	??_LowIsr+14,tblptrh
  4799  00006A  C01C  FFF6         	movff	??_LowIsr+13,tblptrl
  4800  00006E  C01B  FFF4         	movff	??_LowIsr+12,prodh
  4801  000072  C01A  FFF3         	movff	??_LowIsr+11,prodl
  4802  000076  C019  FFDA         	movff	??_LowIsr+10,fsr2h
  4803  00007A  C018  FFD9         	movff	??_LowIsr+9,fsr2l
  4804  00007E  C017  FFE2         	movff	??_LowIsr+8,fsr1h
  4805  000082  C016  FFE1         	movff	??_LowIsr+7,fsr1l
  4806  000086  C015  FFEA         	movff	??_LowIsr+6,fsr0h
  4807  00008A  C014  FFE9         	movff	??_LowIsr+5,fsr0l
  4808  00008E  C013  FFFB         	movff	??_LowIsr+4,pclatu
  4809  000092  C012  FFFA         	movff	??_LowIsr+3,pclath
  4810  000096  C011  FFE0         	movff	??_LowIsr+2,bsr
  4811  00009A  C010  FFE8         	movff	??_LowIsr+1,wreg
  4812  00009E  C00F  FFD8         	movff	??_LowIsr,status
  4813  0000A2  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4814  0000A4  0010               	retfie	
  4815  0000A6                     __end_of_LowIsr:
  4816                           	opt stack 0
  4817                           pclatu	equ	0xFFB
  4818                           pclath	equ	0xFFA
  4819                           tblptru	equ	0xFF8
  4820                           tblptrh	equ	0xFF7
  4821                           tblptrl	equ	0xFF6
  4822                           tablat	equ	0xFF5
  4823                           prodh	equ	0xFF4
  4824                           prodl	equ	0xFF3
  4825                           indf0	equ	0xFEF
  4826                           postinc0	equ	0xFEE
  4827                           fsr0h	equ	0xFEA
  4828                           fsr0l	equ	0xFE9
  4829                           wreg	equ	0xFE8
  4830                           postdec1	equ	0xFE5
  4831                           fsr1h	equ	0xFE2
  4832                           fsr1l	equ	0xFE1
  4833                           bsr	equ	0xFE0
  4834                           indf2	equ	0xFDF
  4835                           postinc2	equ	0xFDE
  4836                           postdec2	equ	0xFDD
  4837                           fsr2h	equ	0xFDA
  4838                           fsr2l	equ	0xFD9
  4839                           status	equ	0xFD8
  4840                           
  4841 ;; *************** function _HighIsr *****************
  4842 ;; Defined at:
  4843 ;;		line 18 in file "test.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;		None
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;		None
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  1    wreg      void 
  4850 ;; Registers used:
  4851 ;;		wreg, status,2, status,0
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;Total ram usage:       14 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; This function calls:
  4864 ;;		Nothing
  4865 ;; This function is called by:
  4866 ;;		Interrupt level 2
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           	psect	intcode
  4871  000008                     __pintcode:
  4872                           	opt stack 0
  4873  000008                     _HighIsr:
  4874                           	opt stack 24
  4875                           
  4876                           ;incstack = 0
  4877  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4878  00000A  CFFA F001          	movff	pclath,??_HighIsr
  4879  00000E  CFFB F002          	movff	pclatu,??_HighIsr+1
  4880  000012  EF6A  F00D         	goto	int_func
  4881                           pclatu	equ	0xFFB
  4882                           pclath	equ	0xFFA
  4883                           tblptru	equ	0xFF8
  4884                           tblptrh	equ	0xFF7
  4885                           tblptrl	equ	0xFF6
  4886                           tablat	equ	0xFF5
  4887                           prodh	equ	0xFF4
  4888                           prodl	equ	0xFF3
  4889                           indf0	equ	0xFEF
  4890                           postinc0	equ	0xFEE
  4891                           fsr0h	equ	0xFEA
  4892                           fsr0l	equ	0xFE9
  4893                           wreg	equ	0xFE8
  4894                           postdec1	equ	0xFE5
  4895                           fsr1h	equ	0xFE2
  4896                           fsr1l	equ	0xFE1
  4897                           bsr	equ	0xFE0
  4898                           indf2	equ	0xFDF
  4899                           postinc2	equ	0xFDE
  4900                           postdec2	equ	0xFDD
  4901                           fsr2h	equ	0xFDA
  4902                           fsr2l	equ	0xFD9
  4903                           status	equ	0xFD8
  4904                           
  4905                           	psect	intcode_body
  4906  001AD4                     __pintcode_body:
  4907                           	opt stack 24
  4908  001AD4                     int_func:
  4909                           	opt stack 24
  4910  001AD4  CFE9 F003          	movff	fsr0l,??_HighIsr+2
  4911  001AD8  CFEA F004          	movff	fsr0h,??_HighIsr+3
  4912  001ADC  CFE1 F005          	movff	fsr1l,??_HighIsr+4
  4913  001AE0  CFE2 F006          	movff	fsr1h,??_HighIsr+5
  4914  001AE4  CFD9 F007          	movff	fsr2l,??_HighIsr+6
  4915  001AE8  CFDA F008          	movff	fsr2h,??_HighIsr+7
  4916  001AEC  CFF3 F009          	movff	prodl,??_HighIsr+8
  4917  001AF0  CFF4 F00A          	movff	prodh,??_HighIsr+9
  4918  001AF4  CFF6 F00B          	movff	tblptrl,??_HighIsr+10
  4919  001AF8  CFF7 F00C          	movff	tblptrh,??_HighIsr+11
  4920  001AFC  CFF8 F00D          	movff	tblptru,??_HighIsr+12
  4921  001B00  CFF5 F00E          	movff	tablat,??_HighIsr+13
  4922                           
  4923                           ;test.c: 20: if (PIR3bits.TMR4IF==1)
  4924  001B04  A6A4               	btfss	4004,3,c	;volatile
  4925  001B06  D011               	goto	i2l196
  4926                           
  4927                           ;test.c: 21: {
  4928                           ;test.c: 22: counter++;
  4929  001B08  4A3C               	infsnz	_counter,f,c
  4930  001B0A  2A3D               	incf	_counter+1,f,c
  4931                           
  4932                           ;test.c: 23: if (counter>=1000)
  4933  001B0C  BE3D               	btfsc	_counter+1,7,c
  4934  001B0E  D00C               	goto	i2l1403
  4935  001B10  0EE8               	movlw	232
  4936  001B12  5C3C               	subwf	_counter,w,c
  4937  001B14  0E03               	movlw	3
  4938  001B16  583D               	subwfb	_counter+1,w,c
  4939  001B18  A0D8               	btfss	status,0,c
  4940  001B1A  D006               	goto	i2l1403
  4941                           
  4942                           ;test.c: 24: {
  4943                           ;test.c: 25: sec++;
  4944  001B1C  4A3E               	infsnz	_sec,f,c
  4945  001B1E  2A3F               	incf	_sec+1,f,c
  4946                           
  4947                           ;test.c: 26: counter=0;
  4948  001B20  0E00               	movlw	0
  4949  001B22  6E3D               	movwf	_counter+1,c
  4950  001B24  0E00               	movlw	0
  4951  001B26  6E3C               	movwf	_counter,c
  4952  001B28                     i2l1403:
  4953                           
  4954                           ;test.c: 27: }
  4955                           ;test.c: 28: PIR3bits.TMR4IF = 0;
  4956  001B28  96A4               	bcf	4004,3,c	;volatile
  4957  001B2A                     i2l196:
  4958  001B2A  C00E  FFF5         	movff	??_HighIsr+13,tablat
  4959  001B2E  C00D  FFF8         	movff	??_HighIsr+12,tblptru
  4960  001B32  C00C  FFF7         	movff	??_HighIsr+11,tblptrh
  4961  001B36  C00B  FFF6         	movff	??_HighIsr+10,tblptrl
  4962  001B3A  C00A  FFF4         	movff	??_HighIsr+9,prodh
  4963  001B3E  C009  FFF3         	movff	??_HighIsr+8,prodl
  4964  001B42  C008  FFDA         	movff	??_HighIsr+7,fsr2h
  4965  001B46  C007  FFD9         	movff	??_HighIsr+6,fsr2l
  4966  001B4A  C006  FFE2         	movff	??_HighIsr+5,fsr1h
  4967  001B4E  C005  FFE1         	movff	??_HighIsr+4,fsr1l
  4968  001B52  C004  FFEA         	movff	??_HighIsr+3,fsr0h
  4969  001B56  C003  FFE9         	movff	??_HighIsr+2,fsr0l
  4970  001B5A  C002  FFFB         	movff	??_HighIsr+1,pclatu
  4971  001B5E  C001  FFFA         	movff	??_HighIsr,pclath
  4972  001B62  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4973  001B64  0011               	retfie		f
  4974  001B66                     __end_of_HighIsr:
  4975                           	opt stack 0
  4976                           pclatu	equ	0xFFB
  4977                           pclath	equ	0xFFA
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           indf0	equ	0xFEF
  4985                           postinc0	equ	0xFEE
  4986                           fsr0h	equ	0xFEA
  4987                           fsr0l	equ	0xFE9
  4988                           wreg	equ	0xFE8
  4989                           postdec1	equ	0xFE5
  4990                           fsr1h	equ	0xFE2
  4991                           fsr1l	equ	0xFE1
  4992                           bsr	equ	0xFE0
  4993                           indf2	equ	0xFDF
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           fsr2h	equ	0xFDA
  4997                           fsr2l	equ	0xFD9
  4998                           status	equ	0xFD8
  4999                           pclatu	equ	0xFFB
  5000                           pclath	equ	0xFFA
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           indf0	equ	0xFEF
  5008                           postinc0	equ	0xFEE
  5009                           fsr0h	equ	0xFEA
  5010                           fsr0l	equ	0xFE9
  5011                           wreg	equ	0xFE8
  5012                           postdec1	equ	0xFE5
  5013                           fsr1h	equ	0xFE2
  5014                           fsr1l	equ	0xFE1
  5015                           bsr	equ	0xFE0
  5016                           indf2	equ	0xFDF
  5017                           postinc2	equ	0xFDE
  5018                           postdec2	equ	0xFDD
  5019                           fsr2h	equ	0xFDA
  5020                           fsr2l	equ	0xFD9
  5021                           status	equ	0xFD8
  5022                           
  5023                           	psect	rparam
  5024  0000                     pclatu	equ	0xFFB
  5025                           pclath	equ	0xFFA
  5026                           tblptru	equ	0xFF8
  5027                           tblptrh	equ	0xFF7
  5028                           tblptrl	equ	0xFF6
  5029                           tablat	equ	0xFF5
  5030                           prodh	equ	0xFF4
  5031                           prodl	equ	0xFF3
  5032                           indf0	equ	0xFEF
  5033                           postinc0	equ	0xFEE
  5034                           fsr0h	equ	0xFEA
  5035                           fsr0l	equ	0xFE9
  5036                           wreg	equ	0xFE8
  5037                           postdec1	equ	0xFE5
  5038                           fsr1h	equ	0xFE2
  5039                           fsr1l	equ	0xFE1
  5040                           bsr	equ	0xFE0
  5041                           indf2	equ	0xFDF
  5042                           postinc2	equ	0xFDE
  5043                           postdec2	equ	0xFDD
  5044                           fsr2h	equ	0xFDA
  5045                           fsr2l	equ	0xFD9
  5046                           status	equ	0xFD8
  5047                           
  5048                           	psect	temp
  5049  000040                     btemp:
  5050                           	opt stack 0
  5051  000040                     	ds	1
  5052  0000                     int$flags	set	btemp
  5053                           pclatu	equ	0xFFB
  5054                           pclath	equ	0xFFA
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           indf0	equ	0xFEF
  5062                           postinc0	equ	0xFEE
  5063                           fsr0h	equ	0xFEA
  5064                           fsr0l	equ	0xFE9
  5065                           wreg	equ	0xFE8
  5066                           postdec1	equ	0xFE5
  5067                           fsr1h	equ	0xFE2
  5068                           fsr1l	equ	0xFE1
  5069                           bsr	equ	0xFE0
  5070                           indf2	equ	0xFDF
  5071                           postinc2	equ	0xFDE
  5072                           postdec2	equ	0xFDD
  5073                           fsr2h	equ	0xFDA
  5074                           fsr2l	equ	0xFD9
  5075                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    18
    Data        40
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      63
    BANK0           160     75      91
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> writeNum@numStr(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcdWriteLine@data	PTR unsigned char  size(2) Largest target is 20
		 -> STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> STR_3(CODE[3]), STR_2(CODE[2]), writeNum@numStr(BANK0[20]), 

    ee_read_char@_data	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_LCD8send
    _main->___lmul
    _writeLCD->_LCD8send
    _writeLCD->_ee_read_char
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _lcdWriteLine->_LCD8send
    _ee_read_num->___lmul
    _ee_read_char->_eepromRead
    _eepromRead->_SPI1out
    _eepromInit->_SPI1out
    _SPI1init->_SPI1out
    _ee_write_char->_eepromWrite
    _eepromWrite->_delay_ms
    _Read_KeyPad->_process_key
    _LCD8init->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in COMRAM

    None.

Critical Paths under _HighIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_writeLCD
    _writeLCD->_writeNum
    _writeNum->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdWriteLine->_LCD8send
    _ee_read_num->___lmul
    _ee_write_num->___lldiv
    _ee_write_char->___llmod
    _eepromWrite->_delay_ms
    _LCD8init->_LCD8send
    _LCD8send->_delay_ms
    _LCD8send->_delay_us

Critical Paths under _LowIsr in BANK0

    None.

Critical Paths under _HighIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowIsr in BANK1

    None.

Critical Paths under _HighIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowIsr in BANK2

    None.

Critical Paths under _HighIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowIsr in BANK3

    None.

Critical Paths under _HighIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowIsr in BANK4

    None.

Critical Paths under _HighIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowIsr in BANK5

    None.

Critical Paths under _HighIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowIsr in BANK6

    None.

Critical Paths under _HighIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowIsr in BANK7

    None.

Critical Paths under _HighIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowIsr in BANK8

    None.

Critical Paths under _HighIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowIsr in BANK9

    None.

Critical Paths under _HighIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowIsr in BANK10

    None.

Critical Paths under _HighIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowIsr in BANK11

    None.

Critical Paths under _HighIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowIsr in BANK12

    None.

Critical Paths under _HighIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowIsr in BANK13

    None.

Critical Paths under _HighIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _LowIsr in BANK14

    None.

Critical Paths under _HighIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _LowIsr in BANK15

    None.

Critical Paths under _HighIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   37699
                                             58 BANK0     17    17      0
                         _KeyPadinit
                           _LCD8init
                           _LCD8send
                        _Read_KeyPad
                             ___lmul
                           _delay_ms
                      _ee_write_char
                       _ee_write_num
                         _eepromInit
                       _lcdWriteLine
                           _writeLCD
                           _writeNum
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                            10     8      2   13922
                                             48 BANK0     10     8      2
                           _LCD8send
                       _ee_read_char
                        _ee_read_num
                       _lcdWriteLine
                           _writeNum
 ---------------------------------------------------------------------------------
 (1) _writeNum                                            24    20      4    5778
                                             24 BANK0     24    20      4
                       _lcdWriteLine
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    17      8    1631
                                              8 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              3 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             31 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcdWriteLine                                         6     4      2    3639
                                              3 BANK0      6     4      2
                           _LCD8send
 ---------------------------------------------------------------------------------
 (2) _ee_read_num                                         14    10      4     861
                                              8 BANK0     14    10      4
                             ___lmul
                         _eepromRead
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     558
                                             31 COMRAM     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) _ee_read_char                                         3     1      2     315
                                             34 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                         _eepromRead
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           2     2      0      99
                                             32 COMRAM     2     2      0
                            _SPI1out
                             _eeWait
 ---------------------------------------------------------------------------------
 (1) _eepromInit                                           0     0      0      68
                           _SPI1init
                            _SPI1out
 ---------------------------------------------------------------------------------
 (2) _SPI1init                                             0     0      0      34
                            _SPI1out
 ---------------------------------------------------------------------------------
 (1) _ee_write_num                                         6     2      4    2687
                                             13 BANK0      6     2      4
                            ___lldiv
                            ___llmod
                      _ee_write_char
 ---------------------------------------------------------------------------------
 (2) _ee_write_char                                        2     1      1    1572
                                              8 BANK0      2     1      1
                            ___llmod (ARG)
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (3) _eepromWrite                                          3     2      1    1125
                                             34 COMRAM     1     0      1
                                              2 BANK0      2     2      0
                            _SPI1out
                           _delay_ms
                             _eeWait
 ---------------------------------------------------------------------------------
 (4) _eeWait                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI1out                                              1     1      0      34
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     386
                                             31 COMRAM     1     1      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _Read_KeyPad                                          5     5      0     529
                                              0 BANK0      5     5      0
                        _process_key
 ---------------------------------------------------------------------------------
 (2) _process_key                                          3     3      0     161
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD8init                                             0     0      0    3885
                           _LCD8send
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _LCD8send                                             2     1      1    2970
                                             34 COMRAM     1     0      1
                                              2 BANK0      1     1      0
                           _delay_ms
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             5     3      2     453
                                             31 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             5     3      2     915
                                             31 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _KeyPadinit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowIsr                                              17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighIsr                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeyPadinit
   _LCD8init
     _LCD8send
       _delay_ms
       _delay_us
     _delay_ms
   _LCD8send
     _delay_ms
     _delay_us
   _Read_KeyPad
     _process_key
   ___lmul
   _delay_ms
   _ee_write_char
     ___llmod (ARG)
     _eepromWrite (ARG)
       _SPI1out
       _delay_ms
       _eeWait
   _ee_write_num
     ___lldiv
     ___llmod
     _ee_write_char
       ___llmod (ARG)
       _eepromWrite (ARG)
         _SPI1out
         _delay_ms
         _eeWait
   _eepromInit
     _SPI1init
       _SPI1out
     _SPI1out
   _lcdWriteLine
     _LCD8send
       _delay_ms
       _delay_us
   _writeLCD
     _LCD8send
       _delay_ms
       _delay_us
     _ee_read_char
       _eepromRead
         _SPI1out
         _eeWait
     _ee_read_num
       ___lmul
       _eepromRead
         _SPI1out
         _eeWait
     _lcdWriteLine
       _LCD8send
         _delay_ms
         _delay_us
     _writeNum
       _lcdWriteLine
         _LCD8send
           _delay_ms
           _delay_us
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _writeNum
     _lcdWriteLine
       _LCD8send
         _delay_ms
         _delay_us
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)

 _LowIsr (ROOT)

 _HighIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7F      0       0      38        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      30        0.0%
BANK12             100      0       0      28        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4B      5B       5       56.9%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      3F       1       67.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9A      29        0.0%
DATA                 0      0      9A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Aug 14 16:32:42 2017

                     l16 1B90                       l61 1F74                       bsr 000FE0  
             _WRITE_MODE 1011                      l122 1EA6                      l115 1E4E  
                    l129 1F7E                      l705 1AC2                      l748 1CFE  
                    l758 1CA0                      l695 183A                      _sec 003E  
        __end_of_EEDELAY 100F                      prod 000FF3                      wreg 000FE8  
             _TXSTA1bits 000FAC             __CFG_FOSC$HS 000000              main@address 00A7  
   __end_of_ee_read_char 1F3A           ??_lcdWriteLine 0065             __CFG_WDT$OFF 000000  
                   l2107 1E38                     l2115 1EB2                     l2221 19B6  
                   l2141 1CCE                     l2303 1E76                     l2151 1CF2  
                   l2143 1CD2                     l2313 1E96                     l2401 1BD6  
                   l2225 19FE                     l2161 1C68                     l2241 14B4  
                   l2139 1CC4                     l2163 1C6E                     l2251 14E4  
                   l2235 1480                     l2309 1E92                     l2333 187A  
                   l2253 14EA                     l2229 1462                     l2351 17BE  
                   l2191 1D12                     l2167 1C92                     l2159 1C5C  
                   l2271 1546                     l2353 17CE                     l2273 154C  
                   l2265 1526                     l2281 15BA                     l2601 1276  
                   l2363 1828                     l2355 17D4                     l2371 1A5A  
                   l2283 15DA                     l2611 12DE                     l2373 1A68  
                   l2293 1C0A                     l2621 136A                     l2605 12A6  
                   l2375 1A6E                     l2279 15AE                     l2623 1376  
                   l2615 131A                     l2289 1BEC                     l2633 13C8  
                   l2299 1E6E                     l2395 1BC8                     l2387 1B7A  
                   l2379 1AB2                     l2467 190C                     l2555 1082  
                   l2477 1996                     l2493 1666                     l2581 11AE  
                   l2573 1112                     l2591 1214                     l2575 117C  
                   l2585 11E4                     l2569 10DE                     l2649 1446  
                   l2595 1246            lcdWriteLine@i 0067                     STR_1 1028  
                   STR_2 102B                     STR_3 1025                     STR_4 102B  
                   STR_5 101F                     STR_6 1022                     STR_7 1019  
                   STR_8 1013                     u1520 19F4                     _LATD 000F8C  
                   u1425 1DFC                     _LATE 000F8D                     u1426 1DFE  
                   u1530 1A38                     u2067 1E3E                     u1527 19EA  
                   u1537 1A2E                     u1921 11CE                     u1951 1234  
                   u1981 1296              main@valMode 009E          __end_of_SPI1out 1F7E  
                   _main 102E            eepromWrite@sr 0063                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr0l 000FE9  
                   fsr2h 000FDA                     fsr1l 000FE1                     indf2 000FDF  
                   fsr2l 000FD9              main@prevKey 00A0                     btemp 0040  
                   pclat 000FFA             process_key@i 0022                     prodh 000FF4  
                   prodl 000FF3                     start 00A6          __end_of_HighIsr 1B66  
           ___param_bank 000010         __end_of_LCD8init 1790            ??_Read_KeyPad 0023  
       __end_of_LCD8send 1E2C                    ?_main 0001          __end_of___lldiv 184C  
        __end_of___llmod 1AD4          __end_of___lwdiv 1D08          __end_of___lwmod 1CAA  
                  i2l196 1B2A                    _PORTD 000F83                    _PORTJ 000F88  
                  _TRISD 000F95                    _TRISE 000F96                    _TRISH 000F99  
                  _TRISJ 000F9A      ___lmul@multiplicand 0064      ee_read_char@address 0023  
   __end_of_ee_write_num 19AA         __end_of_SPI1init 1F4C          __end_of_dpowers 100B  
        clr_screen@F6532 0034     __size_of_ee_read_num 00B6                    tablat 000FF5  
             _KeyPadinit 1F84                    status 000FD8          __end_of_sprintf 15E8  
        __initialization 1D60             __end_of_main 1454         eepromRead@buffer 0022  
                 ??_main 009A            __activetblptr 000003      __end_of_Read_KeyPad 1BDC  
      __end_of_READ_MODE 1011                ??_SPI1out 0020         ___llmod@dividend 0060  
                 i2l1403 1B28                   _SPBRG1 000FAF                ??_HighIsr 0001  
                 _TXREG1 000FAD                   _TXSTA1 000FAC         __end_of_delay_ms 1E68  
       __end_of_delay_us 1ECC           __CFG_XINST$OFF 000000                   _LowIsr 0018  
   __size_of_eepromWrite 0058    __end_of_ee_write_char 1F5E                   ___lmul 1BDC  
                 _eeWait 1F7E                ??___lldiv 0020     __end_of_lcdWriteLine 1A40  
              ??___llmod 0020                ??___lwdiv 0024                ??___lwmod 0024  
  __size_of_ee_read_char 0014             __pdataCOMRAM 0024             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
           Read_KeyPad@i 0061                ??_sprintf 0070                LCD8send@c 0062  
       __end_of_writeLCD 16D2                ?_LCD8init 0001                ?_LCD8send 0023  
           ?_process_key 0001         __end_of_writeNum 1DF0              ?_KeyPadinit 0001  
             __accesstop 0060  __end_of__initialization 1DA8            ___rparam_used 000001  
   ee_write_char@address 0069           __pcstackCOMRAM 0001             _ee_read_char 1F26  
           __pidataBANK0 1F5E                ?_SPI1init 0001              _Read_KeyPad 1B66  
  __size_of_ee_write_num 00A8        eepromRead@address 0021               ??_LCD8init 0024  
             ??_LCD8send 0024          writeLCD@address 0099                  ?_LowIsr 0001  
        writeLCD@valMode 0090             _ee_write_num 1902                  ?___lmul 0060  
                ?_eeWait 0001               ??_SPI1init 0021         lcdWriteLine@data 0063  
         ___lmul@product 0020                  _EEDELAY 100B      __size_of_KeyPadinit 0006  
             _eepromInit 1EF4               _eepromRead 1ECC                ?_delay_ms 0020  
              ?_delay_us 0020                  _SSP1BUF 000FC9                  _SPI1out 1F6E  
                _HighIsr 0008    __size_of_lcdWriteLine 0096                  __Hparam 0000  
                __Lparam 0000          __size_of_LowIsr 008E          __size_of___lmul 006C  
        __size_of_eeWait 0006                  ___lldiv 1790                  ___llmod 1A40  
                ___lwdiv 1CAA                  ___lwmod 1C48             __psmallconst 1000  
           writeLCD@data 0097                  __pcinit 1D60          ee_read_num@addr 006C  
                __ramtop 1000                ?_writeLCD 0090          ee_read_num@byte 0075  
                __ptext0 102E                  __ptext1 15E8                  __ptext2 1DB2  
                __ptext3 1454                  __ptext4 1C48                  __ptext5 1CAA  
                __ptext6 19AA                  __ptext7 184C                  __ptext8 1BDC  
                __ptext9 1F26                ?_writeNum 0078                  _counter 003C  
                _dpowers 1001               ??_delay_ms 0022               ??_delay_us 0022  
          ??_ee_read_num 0024         eepromWrite@value 0023                  _sprintf 1454  
                main@key 00A8           __pintcode_body 1AD4             _lcdWriteLine 19AA  
   end_of_initialization 1DA8                _READ_MODE 100F              SPI1out@Code 0020  
                int_func 1AD4     __size_of_process_key 0032       __end_of_WRITE_MODE 1013  
        ___lldiv@divisor 0064          process_key@code 0021          ___lldiv@counter 006C  
              _RCSTAbits 000FAB                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE               ??_writeLCD 0092  
              _PORTCbits 000F82               ??_writeNum 0024              ?_eepromInit 0001  
            ?_eepromRead 0001                _TRISCbits 000F94           main@writeValue 00A3  
           ??_KeyPadinit 0020      __end_of_ee_read_num 1902            ??_eepromWrite 0024  
      __size_of_LCD8init 00BE        __size_of_LCD8send 003C        ee_read_char@_data 0060  
         __end_of_LowIsr 00A6             ?_Read_KeyPad 0001           __end_of___lmul 1C48  
         __end_of_eeWait 1F84            __pidataCOMRAM 1F0E        __size_of_SPI1init 0012  
     __end_of_KeyPadinit 1F8A      start_initialization 1D60       ee_write_char@chunk 0068  
 __size_of_ee_write_char 0012          ___llmod@divisor 0064          ___llmod@counter 0020  
    __size_of_eepromInit 001A      __size_of_eepromRead 0028                 ??_LowIsr 000F  
               ??___lmul 0020                 ??_eeWait 0020      __end_of_eepromWrite 1D60  
            __pdataBANK0 00AB            ee_write_num@i 0072              __pbssCOMRAM 003C  
          __pcstackBANK0 0060              _ee_read_num 184C                 ?_SPI1out 0001  
      __size_of_delay_ms 003C        __size_of_delay_us 0032              sprintf@flag 0073  
               ?_HighIsr 0001              sprintf@prec 0074         ___lwdiv@dividend 0020  
              __pintcode 0008            _ee_write_char 1F4C                 ?___lldiv 0060  
               ?___llmod 0060        ee_read_num@number 0071                 ?___lwdiv 0020  
               ?___lwmod 0063             ee_read_num@i 006D              __pintcodelo 0018  
            __smallconst 1000                 _BAUDCON1 000F7E        __size_of_writeLCD 00EA  
      __size_of_writeNum 003E                _keyValues 00AB         ___lwdiv@quotient 0061  
               ?_sprintf 0068              writeLCD@num 0093                 _LCD8init 16D2  
              _scan_code 0024                 _LCD8send 1DF0       eepromWrite@address 0062  
     ee_write_num@number 006D                 _LATCbits 000F8B                delay_ms@i 0060  
              delay_ms@x 0020                 _LATHbits 000F90                delay_us@i 0060  
              delay_us@x 0020              _eepromWrite 1D08                 _IPR1bits 000F9F  
               _PIE1bits 000F9D                 _IPR3bits 000FA5                 _PIE3bits 000FA3  
               _PIR1bits 000F9E                 _PIR3bits 000FA4           ?_ee_write_char 0068  
               _RCONbits 000FD0                 _SSP1CON1 000FC6                 _SPI1init 1F3A  
   __size_of_Read_KeyPad 0076             ??_eepromInit 0021             ??_eepromRead 0021  
              main@keyNo 00A1        ___lmul@multiplier 0060                copy_data0 1D7C  
              copy_data1 1D9C         __size_of_SPI1out 0010            ??_process_key 0020  
       __size_of_HighIsr 1B5E                 __Hrparam 0000                 __Lrparam 0000  
          ?_ee_read_char 0060       __end_of_eepromInit 1F0E       __end_of_eepromRead 1EF4  
       Read_KeyPad@value 0060         __size_of___lldiv 00BC         __size_of___llmod 0094  
       __size_of___lwdiv 005E         __size_of___lwmod 0062         cursor_home@F6537 0038  
             sprintf@val 0075                 _delay_ms 1E2C                 _delay_us 1E9A  
        ___lwdiv@divisor 0022          ___lwdiv@counter 0060                 __ptext10 1ECC  
               __ptext11 1EF4                 __ptext20 1B66                 __ptext12 1F3A  
               __ptext21 1E68                 __ptext13 1902                 __ptext22 16D2  
               __ptext14 1F4C                 __ptext23 1DF0                 __ptext15 1D08  
               __ptext24 1E9A                 __ptext16 1F7E                 __ptext25 1E2C  
               __ptext17 1F6E                 __ptext26 1F84                 __ptext18 1A40  
               __ptext19 1790         __size_of_sprintf 0194            __size_of_main 0426  
        ??_ee_write_char 0024      __end_of_process_key 1E9A           ??_ee_read_char 0023  
          ?_ee_write_num 006D                 int$flags 0040             _SSP1STATbits 000FC7  
               main@mode 00A9                 _writeLCD 15E8                 _writeNum 1DB2  
             _INTCONbits 000FF2          Read_KeyPad@code 0064             ?_ee_read_num 0068  
               intlevel1 0000                 intlevel2 0000                sprintf@ap 0071  
              sprintf@sp 0068         ___lwmod@dividend 0063         ___lldiv@dividend 0060  
             _RCSTA1bits 000FAB         ee_write_num@addr 0071           ??_ee_write_num 0024  
         Read_KeyPad@Col 0063             LCD8send@mode 0023                 sprintf@c 0077  
               sprintf@f 006A         ___lldiv@quotient 0068          ___lwmod@divisor 0065  
        ___lwmod@counter 0067            ?_lcdWriteLine 0063              _process_key 1E68  
         writeNum@numStr 007C           writeNum@number 0078             ?_eepromWrite 0023  
